import { GetExamplesFunc } from "./common";
import {  RoleCreationParams } from '../../declerations/SwaggerCloudTowerAPI1.9.0';
import i18next from "i18next";

export enum ROLE_ACTION {
  // ROOT
  ROOT_ACTION = '*',

  // datacenter
  MANAGE_DATA_CENTER = 'MANAGE_DATA_CENTER',

  // cluster
  MANAGE_CLUSTER_CONNECTION = 'MANAGE_CLUSTER_CONNECTION',

  // host
  MANAGE_HOST = 'MANAGE_HOST',

  // nic
  MANAGE_NIC_MTU = 'MANAGE_NIC_MTU',

  // disk
  MANAGE_DISK = 'MANAGE_DISK',

  // hardware topo
  MANAGE_HARDWARE_TOPO = 'MANAGE_HARDWARE_TOPO',

  // usb device
  MANAGE_USB_DEVICE = 'MANAGE_USB_DEVICE',

  // vds
  MANAGE_VDS = 'MANAGE_VDS',

  // vlan
  MANAGE_VLAN = 'MANAGE_VLAN',

  // system vlan
  MANAGE_SYSTEM_VLAN = 'MANAGE_SYSTEM_VLAN',

  // iscsi data store
  MANAGE_ISCSI_DATA_STORE = 'MANAGE_ISCSI_DATA_STORE',

  // nfd data store
  MANAGE_NFS_DATA_STORE = 'MANAGE_NFS_DATA_STORE',

  // nvmf data store
  MANAGE_NVMF_DATA_STORE = 'MANAGE_NVMF_DATA_STORE',

  // vm
  CREATE_VM = 'CREATE_VM',
  UPDATE_VM = 'UPDATE_VM',
  DELETE_VM = 'DELETE_VM',
  UPDATE_VM_ADVANCED_SETTING = 'UPDATE_VM_ADVANCED_SETTING',
  UPDATE_VM_GUEST = 'UPDATE_VM_GUEST',
  VM_OPERATION_OPEN_TERMINAL = 'VM_OPERATION_OPEN_TERMINAL',
  VM_OPERATION_MIGRATE = 'VM_OPERATION_MIGRATE',
  VM_OPERATION_VM_FOLDER = 'VM_OPERATION_VM_FOLDER',
  VM_OPERATION_VM_POWER = 'VM_OPERATION_VM_POWER',
  VM_OPERATION_CLONE = 'VM_OPERATION_CLONE',
  VM_OPERATION_INSTALL_TOOLS = 'VM_OPERATION_INSTALL_TOOLS',

  // vm template
  MANAGE_VM_TEMPLATE = 'MANAGE_VM_TEMPLATE',

  // vm snapshot
  MANAGE_VM_SNAPSHOT = 'MANAGE_VM_SNAPSHOT',

  // vm volume
  MANAGE_VM_VOLUME = 'MANAGE_VM_VOLUME',

  // iso
  MANAGE_ISO = 'MANAGE_ISO',

  // sensitive resources
  QUERY_SENSITIVE_RESOURCE_LIST = 'QUERY_SENSITIVE_RESOURCE_LIST',
  QUERY_SENSITIVE_RESOURCE = 'QUERY_SENSITIVE_RESOURCE',
  MANAGE_SENSITIVE_RESOURCE = 'MANAGE_SENSITIVE_RESOURCE',

  // vm placement group
  MANAGE_VM_PLACEMENT_GROUP = 'MANAGE_VM_PLACEMENT_GROUP',

  // snapshot plan
  MANAGE_SNAPSHOT_PLAN = 'MANAGE_SNAPSHOT_PLAN',

  // alert
  MANAGE_ALERT = 'MANAGE_ALERT',

  // monitor view
  MANAGE_MONITOR_VIEW = 'MANAGE_MONITOR_VIEW',

  // entity filter
  MANAGE_ENTITY_FILTER = 'MANAGE_ENTITY_FILTER',

  // cluster setting
  MANAGE_CLUSTER_NAME = 'MANAGE_CLUSTER_NAME',
  MANAGE_CLUSTER_LICENCE = 'MANAGE_CLUSTER_LICENCE',
  MANAGE_CLUSTER_SNMP = 'MANAGE_CLUSTER_SNMP',

  // cluster network setting
  MANAGE_CLUSTER_VIP = 'MANAGE_CLUSTER_VIP',
  MANAGE_CLUSTER_MANAGEMENT_IP = 'MANAGE_CLUSTER_MANAGEMENT_IP',
  MANAGE_DNS_SERVER = 'MANAGE_DNS_SERVER',
  MANAGE_NTP_SERVER = 'MANAGE_NTP_SERVER',
  MANAGE_IPMI = 'MANAGE_IPMI',

  // cluster virtualization setting
  MANAGE_CLUSTER_VM_CPU_MODEL = 'MANAGE_CLUSTER_VM_CPU_MODEL',
  MANAGE_CLUSTER_VM_TOOLS = 'MANAGE_CLUSTER_VM_TOOLS',
  MANAGE_CLUSTER_HOT_MIGRATION = 'MANAGE_CLUSTER_HOT_MIGRATION',
  MANAGE_CLUSTER_HA = 'MANAGE_CLUSTER_HA',

  // security and user authorization
  MANAGE_SSL_CERTIFICATE = 'MANAGE_SSL_CERTIFICATE',

  // developer tools
  MANAGE_LOG_COLLECTION = 'MANAGE_LOG_COLLECTION',

  // label
  MANAGE_LABEL = 'MANAGE_LABEL',

  // user and role
  MANAGE_USER_AND_ROLE = 'MANAGE_USER_AND_ROLE',

  // platform integration
  MANAGE_VCENTER_ASSOCIATION = 'MANAGE_VCENTER_ASSOCIATION',
  MANAGE_ESXI_ASSOCIATION = 'MANAGE_ESXI_ASSOCIATION',

  // audit log
  MANAGE_AUDIT_LOG = 'MANAGE_AUDIT_LOG',

  // alert email
  MANAGE_ALERT_EMAIL_SETTING = 'MANAGE_ALERT_EMAIL_SETTING',

  // SMTP server
  MANAGE_SMTP_SERVER = 'MANAGE_SMTP_SERVER',

  // cluster upgrade
  MANAGE_CLUSTER_UPGRADE = 'MANAGE_CLUSTER_UPGRADE',

  // vm recycle bin
  MANAGE_VM_RECYCLE_BIN_SETTING = 'MANAGE_VM_RECYCLE_BIN_SETTING',

  // report
  MANAGE_REPORT = 'MANAGE_REPORT',

  // sharing vm tools
  MANAGE_SHARING_VM_TOOLS = 'MANAGE_SHARING_VM_TOOLS',

  // advanced monitor
  MANAGE_ADVANCED_MONITOR = 'MANAGE_ADVANCED_MONITOR',

  // migrate transmitter
  MANAGE_MIGRATE_TRANSMITTER = 'MANAGE_MIGRATE_TRANSMITTER',

  // support driver
  MANAGE_THIRD_PARTY_DRIVER = 'MANAGE_THIRD_PARTY_DRIVER',

  // organization
  MANAGE_ORGANIZATION_NAME = 'MANAGE_ORGANIZATION_NAME',

  // license
  MANAGE_CLOUD_TOWER_LICENSE = 'MANAGE_CLOUD_TOWER_LICENSE',

  // consistency group
  MANAGE_CONSISTENCY_GROUP = 'MANAGE_CONSISTENCY_GROUP',

  // SR-IOV
  MANAGE_SR_IOV_NIC = 'MANAGE_SR_IOV_NIC',

  //iscsi
  MANAGE_CLUSTER_ISCSI = 'MANAGE_CLUSTER_ISCSI',

  //backup license
  MANAGE_BACKUP_LICENSE = 'MANAGE_BACKUP_LICENSE',

  //backup package
  MANAGE_BACKUP_PACKAGE = 'MANAGE_BACKUP_PACKAGE',

  //backup service
  MANAGE_BACKUP_SERVICE = 'MANAGE_BACKUP_SERVICE',

  //backup store repository
  MANAGE_BACKUP_STORE_REPOSITORY = 'MANAGE_BACKUP_STORE_REPOSITORY',

  // backup plan
  MANAGE_BACKUP_PLAN = 'MANAGE_BACKUP_PLAN',

  //backup task
  MANAGE_BACKUP_TASK = 'MANAGE_BACKUP_TASK',

  //backup restore point
  MANAGE_BACKUP_RESTORE_POINT = 'MANAGE_BACKUP_RESTORE_POINT',

  //backup restore point task
  MANAGE_BACKUP_RESTORE_POINT_TASK = 'MANAGE_BACKUP_RESTORE_POINT_TASK',
}

export const getCreateUserRoleNexts:GetExamplesFunc = (lng) => ({
  [i18next.t("examples.getCreateUserRoleNexts_all")]: {
    description: "创建名为 'new-role' 的新角色，该角色拥有所有权限",
    value: [
      {
        name: "new-role",
        actions: [
          ROLE_ACTION.ROOT_ACTION
        ] as ROLE_ACTION[],
      }
    ] as RoleCreationParams[]
  },
  [i18next.t('examples.getCreateUserRoleNexts_multiple')]: {
    description: "创建名为 'new-role-1' 的新角色，该角色可以创建，删除，更新虚拟机。同时创建名为 'new-role-2' 的角色，该角色没有任何权限",
    value: [
      { name: "new-role-1", actions: [ROLE_ACTION.CREATE_VM, ROLE_ACTION.UPDATE_VM, ROLE_ACTION.DELETE_VM] },
      { name: "new-role-2", actions: [] },
    ] as RoleCreationParams[]
  }
})