{
  "/update-global-alert-rule": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "GlobalAlertRule-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-global-alert-rule \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"GlobalAlertRule-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalAlertRuleApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_alert_rule_api = GlobalAlertRuleApi(client)\r\n    resp = global_alert_rule_api.update_global_alert_rule({\"data\":{},\"where\":{\"id\":\"GlobalAlertRule-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_alert_rule\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_alert_rule_api := client.GlobalAlertRule\r\n    params := global_alert_rule.NewUpdateGlobalAlertRuleParams()\r\n    params.RequestBody = &models.GlobalAlertRuleUpdationParams{\nData: &models.GlobalAlertRuleUpdationParamsData{\n},\nWhere: &models.GlobalAlertRuleWhereInput{\nID: pointy.String(\"GlobalAlertRule-id\"),\n},\n}\r\n    rawResp, err := global_alert_rule_api.UpdateGlobalAlertRule(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskGlobalAlertRule) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalAlertRuleApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalAlertRuleApi globalAlertRuleApi = new GlobalAlertRuleApi(client);\r\n        GlobalAlertRuleUpdationParams params = new GlobalAlertRuleUpdationParams()\n.data(new GlobalAlertRuleUpdationParamsData())\n.where(new GlobalAlertRuleWhereInput()\n.id(\"GlobalAlertRule-id\"));\r\n        List<WithTaskGlobalAlertRule> resp = globalAlertRuleApi.updateGlobalAlertRule(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-customize-alert-rule": {
    "exampleValue": {
      "data": {
        "clusters": {
          "id": "Cluster-id"
        }
      },
      "where": {
        "id": "GlobalAlertRule-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-customize-alert-rule \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"GlobalAlertRule-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalAlertRuleApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_alert_rule_api = GlobalAlertRuleApi(client)\r\n    resp = global_alert_rule_api.update_customize_alert_rule({\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"GlobalAlertRule-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_alert_rule\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_alert_rule_api := client.GlobalAlertRule\r\n    params := global_alert_rule.NewUpdateCustomizeAlertRuleParams()\r\n    params.RequestBody = &models.CustomizeAlertRuleUpdationParams{\nData: &models.CustomizeAlertRuleUpdationParamsData{\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n},\nWhere: &models.GlobalAlertRuleWhereInput{\nID: pointy.String(\"GlobalAlertRule-id\"),\n},\n}\r\n    rawResp, err := global_alert_rule_api.UpdateCustomizeAlertRule(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskGlobalAlertRule) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalAlertRuleApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalAlertRuleApi globalAlertRuleApi = new GlobalAlertRuleApi(client);\r\n        CustomizeAlertRuleUpdationParams params = new CustomizeAlertRuleUpdationParams()\n.data(new CustomizeAlertRuleUpdationParamsData()\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\")))\n.where(new GlobalAlertRuleWhereInput()\n.id(\"GlobalAlertRule-id\"));\r\n        List<WithTaskGlobalAlertRule> resp = globalAlertRuleApi.updateCustomizeAlertRule(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/resolve-alert": {
    "exampleValue": {
      "where": {
        "id": "Alert-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/resolve-alert \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Alert-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_api = AlertApi(client)\r\n    resp = alert_api.resolve_alert({\"where\":{\"id\":\"Alert-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_api := client.Alert\r\n    params := alert.NewResolveAlertParams()\r\n    params.RequestBody = &models.ResolveAlertParams{\nWhere: &models.AlertWhereInput{\nID: pointy.String(\"Alert-id\"),\n},\n}\r\n    rawResp, err := alert_api.ResolveAlert(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskAlert) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.AlertApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertApi alertApi = new AlertApi(client);\r\n        ResolveAlertParams params = new ResolveAlertParams()\n.where(new AlertWhereInput()\n.id(\"Alert-id\"));\r\n        List<WithTaskAlert> resp = alertApi.resolveAlert(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-user-audit-log": {
    "exampleValue": [
      {
        "status": "FAILED",
        "user_id": "ck74rk21wg5lz0786opdnzz5m",
        "message": {
          "en-US": "en-US-string",
          "zh-CN": "zh-CN-string"
        },
        "resource_type": "resource_type-string",
        "action": "action-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-user-audit-log \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"status\":\"FAILED\",\"user_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"message\":{\"en-US\":\"en-US-string\",\"zh-CN\":\"zh-CN-string\"},\"resource_type\":\"resource_type-string\",\"action\":\"action-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, UserAuditLogApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_audit_log_api = UserAuditLogApi(client)\r\n    resp = user_audit_log_api.create_role([{\"status\":\"FAILED\",\"user_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"message\":{\"en-US\":\"en-US-string\",\"zh-CN\":\"zh-CN-string\"},\"resource_type\":\"resource_type-string\",\"action\":\"action-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user_audit_log\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_audit_log_api := client.UserAuditLog\r\n    params := user_audit_log.NewCreateRoleParams()\r\n    params.RequestBody = []*models.UserAuditLogCreationParams{\n{\nStatus: models.UserAuditLogStatusFAILED.Pointer(),\nUserID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nMessage: &models.UserAuditLogMessage{\nEnUs: pointy.String(\"en-US-string\"),\nZhCn: pointy.String(\"zh-CN-string\"),\n},\nResourceType: pointy.String(\"resource_type-string\"),\nAction: pointy.String(\"action-string\"),\n},\n}\r\n    rawResp, err := user_audit_log_api.CreateRole(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskUserAuditLog) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserAuditLogApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserAuditLogApi userAuditLogApi = new UserAuditLogApi(client);\r\n        List<UserAuditLogCreationParams> params = new ArrayList<>();\r\n        params.add(new UserAuditLogCreationParams()\n.status(UserAuditLogStatus.fromValue(\"FAILED\"))\n.userId(\"ck74rk21wg5lz0786opdnzz5m\")\n.message(new UserAuditLogMessage()\n.enUs(\"en-US-string\")\n.zhCn(\"zh-CN-string\"))\n.resourceType(\"resource_type-string\")\n.action(\"action-string\"));\r\n        List<WithTaskUserAuditLog> resp = userAuditLogApi.createRole(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-brick-topo": {
    "exampleValue": [
      {
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "height": 1,
        "name": "name-string",
        "position": 1
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-brick-topo \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"height\":1,\"name\":\"name-string\",\"position\":1}]'",
    "python": "from cloudtower import ApiClient, Configuration, BrickTopoApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    brick_topo_api = BrickTopoApi(client)\r\n    resp = brick_topo_api.create_brick_topo([{\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"height\":1,\"name\":\"name-string\",\"position\":1}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/brick_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        brick_topo_api := client.BrickTopo\r\n    params := brick_topo.NewCreateBrickTopoParams()\r\n    params.RequestBody = []*models.BrickTopoCreationParams{\n{\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nHeight: pointy.Int32(1),\nName: pointy.String(\"name-string\"),\nPosition: pointy.Int32(1),\n},\n}\r\n    rawResp, err := brick_topo_api.CreateBrickTopo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskBrickTopo) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.BrickTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        BrickTopoApi brickTopoApi = new BrickTopoApi(client);\r\n        List<BrickTopoCreationParams> params = new ArrayList<>();\r\n        params.add(new BrickTopoCreationParams()\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.height(1)\n.name(\"name-string\")\n.position(1));\r\n        List<WithTaskBrickTopo> resp = brickTopoApi.createBrickTopo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-brick-topo": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "BrickTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-brick-topo \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"BrickTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, BrickTopoApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    brick_topo_api = BrickTopoApi(client)\r\n    resp = brick_topo_api.update_brick_topo({\"data\":{},\"where\":{\"id\":\"BrickTopo-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/brick_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        brick_topo_api := client.BrickTopo\r\n    params := brick_topo.NewUpdateBrickTopoParams()\r\n    params.RequestBody = &models.BrickTopoUpdationParams{\nData: &models.BrickTopoUpdationParamsData{\n},\nWhere: &models.BrickTopoWhereInput{\nID: pointy.String(\"BrickTopo-id\"),\n},\n}\r\n    rawResp, err := brick_topo_api.UpdateBrickTopo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskBrickTopo) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.BrickTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        BrickTopoApi brickTopoApi = new BrickTopoApi(client);\r\n        BrickTopoUpdationParams params = new BrickTopoUpdationParams()\n.data(new BrickTopoUpdationParamsData())\n.where(new BrickTopoWhereInput()\n.id(\"BrickTopo-id\"));\r\n        List<WithTaskBrickTopo> resp = brickTopoApi.updateBrickTopo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/move-brick-topo": {
    "exampleValue": {
      "data": {
        "position": 1
      },
      "where": {
        "id": "BrickTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/move-brick-topo \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"position\":1},\"where\":{\"id\":\"BrickTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, BrickTopoApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    brick_topo_api = BrickTopoApi(client)\r\n    resp = brick_topo_api.move_brick_topo({\"data\":{\"position\":1},\"where\":{\"id\":\"BrickTopo-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/brick_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        brick_topo_api := client.BrickTopo\r\n    params := brick_topo.NewMoveBrickTopoParams()\r\n    params.RequestBody = &models.BrickTopoMoveParams{\nData: &models.BrickTopoMoveParamsData{\nPosition: pointy.Int32(1),\n},\nWhere: &models.BrickTopoWhereInput{\nID: pointy.String(\"BrickTopo-id\"),\n},\n}\r\n    rawResp, err := brick_topo_api.MoveBrickTopo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskBrickTopo) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.BrickTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        BrickTopoApi brickTopoApi = new BrickTopoApi(client);\r\n        BrickTopoMoveParams params = new BrickTopoMoveParams()\n.data(new BrickTopoMoveParamsData()\n.position(1))\n.where(new BrickTopoWhereInput()\n.id(\"BrickTopo-id\"));\r\n        List<WithTaskBrickTopo> resp = brickTopoApi.moveBrickTopo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-brick-topo": {
    "exampleValue": {
      "where": {
        "id": "BrickTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-brick-topo \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"BrickTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, BrickTopoApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    brick_topo_api = BrickTopoApi(client)\r\n    resp = brick_topo_api.delete_brick_topo({\"where\":{\"id\":\"BrickTopo-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/brick_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        brick_topo_api := client.BrickTopo\r\n    params := brick_topo.NewDeleteBrickTopoParams()\r\n    params.RequestBody = &models.BrickTopoDeletionParams{\nWhere: &models.BrickTopoWhereInput{\nID: pointy.String(\"BrickTopo-id\"),\n},\n}\r\n    rawResp, err := brick_topo_api.DeleteBrickTopo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteBrickTopo) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.BrickTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        BrickTopoApi brickTopoApi = new BrickTopoApi(client);\r\n        BrickTopoDeletionParams params = new BrickTopoDeletionParams()\n.where(new BrickTopoWhereInput()\n.id(\"BrickTopo-id\"));\r\n        List<WithTaskDeleteBrickTopo> resp = brickTopoApi.deleteBrickTopo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/upload-cloudtower-application-package": {
    "exampleValue": {
      "file": "file-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/upload-cloudtower-application-package \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: multipart/form-data' \\\n\t-d '{\"file\":\"file-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_api = CloudTowerApplicationApi(client)\r\n    with open(\"file-path\", \"rb\") as file:\r\n        resp = cloud_tower_application_api.upload_cloud_tower_application_package(\r\n            file=file\r\n        )\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"bytes\"\r\n    \"fmt\"\r\n    \"io\"\r\n\r\n    \"github.com/go-openapi/runtime\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_api := client.CloudTowerApplication\r\n    params := cloud_tower_application.NewUploadCloudTowerApplicationPackageParams()\r\n    params.File = runtime.NamedReader(\"file\",io.NopCloser(bytes.NewReader([]byte(\"file-string\"))))\r\n    resp, err := cloud_tower_application_api.UploadCloudTowerApplicationPackage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationApi cloudTowerApplicationApi = new CloudTowerApplicationApi(client);\r\n        List<UploadTask> resp = cloudTowerApplicationApi.uploadCloudTowerApplicationPackage(\r\n            Files.readAllBytes(Path.of(\"file-string\")),\r\n            \"name\",\r\n            \"size\",\r\n            \"size_unit\",\r\n            \"upload_task_id\"\r\n        );\r\n    }\r\n}"
  },
  "/delete-cloudtower-application-package": {
    "exampleValue": {
      "where": {
        "id": "CloudTowerApplicationPackage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-cloudtower-application-package \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"CloudTowerApplicationPackage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_api = CloudTowerApplicationApi(client)\r\n    resp = cloud_tower_application_api.delete_cloud_tower_application_package({\"where\":{\"id\":\"CloudTowerApplicationPackage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_api := client.CloudTowerApplication\r\n    params := cloud_tower_application.NewDeleteCloudTowerApplicationPackageParams()\r\n    params.RequestBody = &models.DeleteCloudTowerApplicationPackageParams{\nWhere: &models.CloudTowerApplicationPackageWhereInput{\nID: pointy.String(\"CloudTowerApplicationPackage-id\"),\n},\n}\r\n    rawResp, err := cloud_tower_application_api.DeleteCloudTowerApplicationPackage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationApi cloudTowerApplicationApi = new CloudTowerApplicationApi(client);\r\n        DeleteCloudTowerApplicationPackageParams params = new DeleteCloudTowerApplicationPackageParams()\n.where(new CloudTowerApplicationPackageWhereInput()\n.id(\"CloudTowerApplicationPackage-id\"));\r\n        List<DeleteCloudTowerApplicationPackage> resp = cloudTowerApplicationApi.deleteCloudTowerApplicationPackage(params);\r\n    }\r\n}"
  },
  "/deploy-cloudtower-application": {
    "exampleValue": {
      "name": "name-string",
      "targetPackage": "targetPackage-string",
      "vmSpec": {}
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/deploy-cloudtower-application \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"name\":\"name-string\",\"targetPackage\":\"targetPackage-string\",\"vmSpec\":{}}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_api = CloudTowerApplicationApi(client)\r\n    resp = cloud_tower_application_api.deploy_cloud_tower_application({\"name\":\"name-string\",\"targetPackage\":\"targetPackage-string\",\"vmSpec\":{}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_api := client.CloudTowerApplication\r\n    params := cloud_tower_application.NewDeployCloudTowerApplicationParams()\r\n    params.RequestBody = &models.DeployCloudTowerApplicationParams{\nName: pointy.String(\"name-string\"),\nTargetPackage: pointy.String(\"targetPackage-string\"),\nVMSpec: &models.ApplicationVMSpecDefinition{\n},\n}\r\n    rawResp, err := cloud_tower_application_api.DeployCloudTowerApplication(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationApi cloudTowerApplicationApi = new CloudTowerApplicationApi(client);\r\n        DeployCloudTowerApplicationParams params = new DeployCloudTowerApplicationParams()\n.name(\"name-string\")\n.targetPackage(\"targetPackage-string\")\n.vmSpec(new ApplicationVmSpecDefinition());\r\n        CloudTowerApplication resp = cloudTowerApplicationApi.deployCloudTowerApplication(params);\r\n    }\r\n}"
  },
  "/upgrade-cloudtower-application": {
    "exampleValue": {
      "data": {
        "targetPackage": "targetPackage-string"
      },
      "where": {
        "id": "CloudTowerApplication-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/upgrade-cloudtower-application \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"targetPackage\":\"targetPackage-string\"},\"where\":{\"id\":\"CloudTowerApplication-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_api = CloudTowerApplicationApi(client)\r\n    resp = cloud_tower_application_api.upgrade_cloud_tower_application({\"data\":{\"targetPackage\":\"targetPackage-string\"},\"where\":{\"id\":\"CloudTowerApplication-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_api := client.CloudTowerApplication\r\n    params := cloud_tower_application.NewUpgradeCloudTowerApplicationParams()\r\n    params.RequestBody = &models.UpgradeCloudTowerApplicationParams{\nData: &models.UpgradeCloudTowerApplicationParamsData{\nTargetPackage: pointy.String(\"targetPackage-string\"),\n},\nWhere: &models.CloudTowerApplicationWhereUniqueInput{\nID: pointy.String(\"CloudTowerApplication-id\"),\n},\n}\r\n    rawResp, err := cloud_tower_application_api.UpgradeCloudTowerApplication(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationApi cloudTowerApplicationApi = new CloudTowerApplicationApi(client);\r\n        UpgradeCloudTowerApplicationParams params = new UpgradeCloudTowerApplicationParams()\n.data(new UpgradeCloudTowerApplicationParamsData()\n.targetPackage(\"targetPackage-string\"))\n.where(new CloudTowerApplicationWhereUniqueInput()\n.id(\"CloudTowerApplication-id\"));\r\n        CloudTowerApplication resp = cloudTowerApplicationApi.upgradeCloudTowerApplication(params);\r\n    }\r\n}"
  },
  "/uninstall-cloudtower-application": {
    "exampleValue": {
      "where": {
        "id": "CloudTowerApplication-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/uninstall-cloudtower-application \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"CloudTowerApplication-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_api = CloudTowerApplicationApi(client)\r\n    resp = cloud_tower_application_api.uninstall_cloud_tower_application({\"where\":{\"id\":\"CloudTowerApplication-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_api := client.CloudTowerApplication\r\n    params := cloud_tower_application.NewUninstallCloudTowerApplicationParams()\r\n    params.RequestBody = &models.UninstallCloudTowerApplicationParams{\nWhere: &models.CloudTowerApplicationWhereInput{\nID: pointy.String(\"CloudTowerApplication-id\"),\n},\n}\r\n    rawResp, err := cloud_tower_application_api.UninstallCloudTowerApplication(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationApi cloudTowerApplicationApi = new CloudTowerApplicationApi(client);\r\n        UninstallCloudTowerApplicationParams params = new UninstallCloudTowerApplicationParams()\n.where(new CloudTowerApplicationWhereInput()\n.id(\"CloudTowerApplication-id\"));\r\n        List<CloudTowerApplication> resp = cloudTowerApplicationApi.uninstallCloudTowerApplication(params);\r\n    }\r\n}"
  },
  "/connect-cluster": {
    "exampleValue": [
      {
        "password": "password-string",
        "username": "username-string",
        "ip": "ip-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/connect-cluster \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"password\":\"password-string\",\"username\":\"username-string\",\"ip\":\"ip-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.connect_cluster([{\"password\":\"password-string\",\"username\":\"username-string\",\"ip\":\"ip-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewConnectClusterParams()\r\n    params.RequestBody = []*models.ClusterCreationParams{\n{\nPassword: pointy.String(\"password-string\"),\nUsername: pointy.String(\"username-string\"),\nIP: pointy.String(\"ip-string\"),\n},\n}\r\n    rawResp, err := cluster_api.ConnectCluster(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskCluster) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        List<ClusterCreationParams> params = new ArrayList<>();\r\n        params.add(new ClusterCreationParams()\n.password(\"password-string\")\n.username(\"username-string\")\n.ip(\"ip-string\"));\r\n        List<WithTaskCluster> resp = clusterApi.connectCluster(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-cluster": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-cluster \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.update_cluster({\"data\":{},\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewUpdateClusterParams()\r\n    params.RequestBody = &models.ClusterUpdationParams{\nData: &models.ClusterUpdationParamsData{\n},\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.UpdateCluster(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskCluster) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        ClusterUpdationParams params = new ClusterUpdationParams()\n.data(new ClusterUpdationParamsData())\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskCluster> resp = clusterApi.updateCluster(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-cluster-license": {
    "exampleValue": {
      "data": {
        "license": "license-string"
      },
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-cluster-license \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"license\":\"license-string\"},\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.update_cluster_license({\"data\":{\"license\":\"license-string\"},\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewUpdateClusterLicenseParams()\r\n    params.RequestBody = &models.ClusterLicenseUpdationParams{\nData: &models.ClusterLicenseUpdationParamsData{\nLicense: pointy.String(\"license-string\"),\n},\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.UpdateClusterLicense(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskCluster) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        ClusterLicenseUpdationParams params = new ClusterLicenseUpdationParams()\n.data(new ClusterLicenseUpdationParamsData()\n.license(\"license-string\"))\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskCluster> resp = clusterApi.updateClusterLicense(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-cluster-network-setting": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-cluster-network-setting \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.update_cluster_network_setting({\"data\":{},\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewUpdateClusterNetworkSettingParams()\r\n    params.RequestBody = &models.ClusterNetworkSettingUpdationParams{\nData: &models.ClusterNetworkSettingUpdationParamsData{\n},\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.UpdateClusterNetworkSetting(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskCluster) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        ClusterNetworkSettingUpdationParams params = new ClusterNetworkSettingUpdationParams()\n.data(new ClusterNetworkSettingUpdationParamsData())\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskCluster> resp = clusterApi.updateClusterNetworkSetting(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-cluster-virtualization-setting": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-cluster-virtualization-setting \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.update_cluster_virtualization_setting({\"data\":{},\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewUpdateClusterVirtualizationSettingParams()\r\n    params.RequestBody = &models.ClusterVirtualizationUpdationParams{\nData: &models.ClusterVirtualizationUpdationParamsData{\n},\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.UpdateClusterVirtualizationSetting(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskCluster) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        ClusterVirtualizationUpdationParams params = new ClusterVirtualizationUpdationParams()\n.data(new ClusterVirtualizationUpdationParamsData())\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskCluster> resp = clusterApi.updateClusterVirtualizationSetting(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-cluster-ha-setting": {
    "exampleValue": {
      "ha": true,
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-cluster-ha-setting \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"ha\":true,\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.update_cluster_ha_setting({\"ha\":True,\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewUpdateClusterHaSettingParams()\r\n    params.RequestBody = &models.ClusterHaUpdationParams{\nHa: pointy.Bool(true),\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.UpdateClusterHaSetting(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskClusterSettings) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        ClusterHaUpdationParams params = new ClusterHaUpdationParams()\n.ha(true)\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskClusterSettings> resp = clusterApi.updateClusterHaSetting(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-cluster-enable-iscsi-setting": {
    "exampleValue": {
      "enable_iscsi": true,
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-cluster-enable-iscsi-setting \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"enable_iscsi\":true,\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.update_cluster_enable_iscsi_setting({\"enable_iscsi\":True,\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewUpdateClusterEnableIscsiSettingParams()\r\n    params.RequestBody = &models.ClusterEnableIscsiUpdationParams{\nEnableIscsi: pointy.Bool(true),\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.UpdateClusterEnableIscsiSetting(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskClusterSettings) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        ClusterEnableIscsiUpdationParams params = new ClusterEnableIscsiUpdationParams()\n.enableIscsi(true)\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskClusterSettings> resp = clusterApi.updateClusterEnableIscsiSetting(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-cluster": {
    "exampleValue": {
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-cluster \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.delete_cluster({\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewDeleteClusterParams()\r\n    params.RequestBody = &models.ClusterDeletionParams{\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.DeleteCluster(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteCluster) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        ClusterDeletionParams params = new ClusterDeletionParams()\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskDeleteCluster> resp = clusterApi.deleteCluster(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-meta-leader": {
    "exampleValue": {
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-meta-leader \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.get_meta_leader({\"where\":{\"id\":\"Cluster-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewGetMetaLeaderParams()\r\n    params.RequestBody = &models.GetMetaLeaderRequestBody{\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.GetMetaLeader(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        GetMetaLeaderRequestBody params = new GetMetaLeaderRequestBody()\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<MetaLeader> resp = clusterApi.getMetaLeader(params);\r\n    }\r\n}"
  },
  "/create-consistency-snapshot-group": {
    "exampleValue": [
      {
        "consistency_group_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-consistency-snapshot-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"consistency_group_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_snapshot_api = ConsistencyGroupSnapshotApi(client)\r\n    resp = consistency_group_snapshot_api.create_consistency_group_snapshot([{\"consistency_group_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_snapshot_api := client.ConsistencyGroupSnapshot\r\n    params := consistency_group_snapshot.NewCreateConsistencyGroupSnapshotParams()\r\n    params.RequestBody = []*models.ConsistencyGroupSnapshotCreationParams{\n{\nConsistencyGroupID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := consistency_group_snapshot_api.CreateConsistencyGroupSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskConsistencyGroupSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupSnapshotApi consistencyGroupSnapshotApi = new ConsistencyGroupSnapshotApi(client);\r\n        List<ConsistencyGroupSnapshotCreationParams> params = new ArrayList<>();\r\n        params.add(new ConsistencyGroupSnapshotCreationParams()\n.consistencyGroupId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskConsistencyGroupSnapshot> resp = consistencyGroupSnapshotApi.createConsistencyGroupSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/rollback-consistency-snapshot-group": {
    "exampleValue": {
      "where": {
        "id": "ConsistencyGroupSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/rollback-consistency-snapshot-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ConsistencyGroupSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_snapshot_api = ConsistencyGroupSnapshotApi(client)\r\n    resp = consistency_group_snapshot_api.update_consistency_group_snapshot({\"where\":{\"id\":\"ConsistencyGroupSnapshot-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_snapshot_api := client.ConsistencyGroupSnapshot\r\n    params := consistency_group_snapshot.NewUpdateConsistencyGroupSnapshotParams()\r\n    params.RequestBody = &models.ConsistencyGroupSnapshotUpdationParams{\nWhere: &models.ConsistencyGroupSnapshotWhereInput{\nID: pointy.String(\"ConsistencyGroupSnapshot-id\"),\n},\n}\r\n    rawResp, err := consistency_group_snapshot_api.UpdateConsistencyGroupSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskConsistencyGroupSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupSnapshotApi consistencyGroupSnapshotApi = new ConsistencyGroupSnapshotApi(client);\r\n        ConsistencyGroupSnapshotUpdationParams params = new ConsistencyGroupSnapshotUpdationParams()\n.where(new ConsistencyGroupSnapshotWhereInput()\n.id(\"ConsistencyGroupSnapshot-id\"));\r\n        List<WithTaskConsistencyGroupSnapshot> resp = consistencyGroupSnapshotApi.updateConsistencyGroupSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-consistency-snapshot-group": {
    "exampleValue": {
      "data": {
        "remain_volume_snapshot": true
      },
      "where": {
        "id": "ConsistencyGroupSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-consistency-snapshot-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"remain_volume_snapshot\":true},\"where\":{\"id\":\"ConsistencyGroupSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_snapshot_api = ConsistencyGroupSnapshotApi(client)\r\n    resp = consistency_group_snapshot_api.delete_consistency_group_snapshot({\"data\":{\"remain_volume_snapshot\":True},\"where\":{\"id\":\"ConsistencyGroupSnapshot-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_snapshot_api := client.ConsistencyGroupSnapshot\r\n    params := consistency_group_snapshot.NewDeleteConsistencyGroupSnapshotParams()\r\n    params.RequestBody = &models.ConsistencyGroupSnapshotDeletionParams{\nData: &models.ConsistencyGroupSnapshotDeletionParamsData{\nRemainVolumeSnapshot: pointy.Bool(true),\n},\nWhere: &models.ConsistencyGroupSnapshotWhereInput{\nID: pointy.String(\"ConsistencyGroupSnapshot-id\"),\n},\n}\r\n    rawResp, err := consistency_group_snapshot_api.DeleteConsistencyGroupSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteConsistencyGroupSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupSnapshotApi consistencyGroupSnapshotApi = new ConsistencyGroupSnapshotApi(client);\r\n        ConsistencyGroupSnapshotDeletionParams params = new ConsistencyGroupSnapshotDeletionParams()\n.data(new ConsistencyGroupSnapshotDeletionParamsData()\n.remainVolumeSnapshot(true))\n.where(new ConsistencyGroupSnapshotWhereInput()\n.id(\"ConsistencyGroupSnapshot-id\"));\r\n        List<WithTaskDeleteConsistencyGroupSnapshot> resp = consistencyGroupSnapshotApi.deleteConsistencyGroupSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-consistency-group": {
    "exampleValue": [
      {
        "namespaces_ids": [
          "-string"
        ],
        "iscsi_luns_ids": [
          "-string"
        ],
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-consistency-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"namespaces_ids\":[\"-string\"],\"iscsi_luns_ids\":[\"-string\"],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_api = ConsistencyGroupApi(client)\r\n    resp = consistency_group_api.create_consistency_group([{\"namespaces_ids\":[\"-string\"],\"iscsi_luns_ids\":[\"-string\"],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_api := client.ConsistencyGroup\r\n    params := consistency_group.NewCreateConsistencyGroupParams()\r\n    params.RequestBody = []*models.ConsistencyGroupCreationParams{\n{\nNamespacesIds: []string{\"-string\",\n},\nIscsiLunsIds: []string{\"-string\",\n},\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := consistency_group_api.CreateConsistencyGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskConsistencyGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupApi consistencyGroupApi = new ConsistencyGroupApi(client);\r\n        List<ConsistencyGroupCreationParams> params = new ArrayList<>();\r\n        params.add(new ConsistencyGroupCreationParams()\n.addNamespacesIdsItem(\"-string\")\n.addIscsiLunsIdsItem(\"-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskConsistencyGroup> resp = consistencyGroupApi.createConsistencyGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-consistency-group": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "ConsistencyGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-consistency-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"ConsistencyGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_api = ConsistencyGroupApi(client)\r\n    resp = consistency_group_api.update_consistency_group({\"data\":{},\"where\":{\"id\":\"ConsistencyGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_api := client.ConsistencyGroup\r\n    params := consistency_group.NewUpdateConsistencyGroupParams()\r\n    params.RequestBody = &models.ConsistencyGroupUpdationParams{\nData: &models.ConsistencyGroupUpdationParamsData{\n},\nWhere: &models.ConsistencyGroupWhereInput{\nID: pointy.String(\"ConsistencyGroup-id\"),\n},\n}\r\n    rawResp, err := consistency_group_api.UpdateConsistencyGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskConsistencyGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupApi consistencyGroupApi = new ConsistencyGroupApi(client);\r\n        ConsistencyGroupUpdationParams params = new ConsistencyGroupUpdationParams()\n.data(new ConsistencyGroupUpdationParamsData())\n.where(new ConsistencyGroupWhereInput()\n.id(\"ConsistencyGroup-id\"));\r\n        List<WithTaskConsistencyGroup> resp = consistencyGroupApi.updateConsistencyGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-consistency-group": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "ConsistencyGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-consistency-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"ConsistencyGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_api = ConsistencyGroupApi(client)\r\n    resp = consistency_group_api.delete_consistency_group({\"data\":{},\"where\":{\"id\":\"ConsistencyGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_api := client.ConsistencyGroup\r\n    params := consistency_group.NewDeleteConsistencyGroupParams()\r\n    params.RequestBody = &models.ConsistencyGroupDeletionParams{\nData: &models.ConsistencyGroupDeletionParamsData{\n},\nWhere: &models.ConsistencyGroupWhereInput{\nID: pointy.String(\"ConsistencyGroup-id\"),\n},\n}\r\n    rawResp, err := consistency_group_api.DeleteConsistencyGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteConsistencyGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupApi consistencyGroupApi = new ConsistencyGroupApi(client);\r\n        ConsistencyGroupDeletionParams params = new ConsistencyGroupDeletionParams()\n.data(new ConsistencyGroupDeletionParamsData())\n.where(new ConsistencyGroupWhereInput()\n.id(\"ConsistencyGroup-id\"));\r\n        List<WithTaskDeleteConsistencyGroup> resp = consistencyGroupApi.deleteConsistencyGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/upload-content-library-image": {
    "exampleValue": {
      "file": "file-string",
      "clusters": "clusters-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/upload-content-library-image \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: multipart/form-data' \\\n\t-d '{\"file\":\"file-string\",\"clusters\":\"clusters-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_image_api = ContentLibraryImageApi(client)\r\n    with open(\"file-path\", \"rb\") as file:\r\n        resp = content_library_image_api.create_content_library_image(\r\n            file=file,\r\n            clusters=\"clusters-string\"\r\n        )\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"bytes\"\r\n    \"fmt\"\r\n    \"io\"\r\n\r\n    \"github.com/go-openapi/runtime\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_image_api := client.ContentLibraryImage\r\n    params := content_library_image.NewCreateContentLibraryImageParams()\r\n    params.File = runtime.NamedReader(\"file\",io.NopCloser(bytes.NewReader([]byte(\"file-string\"))))\r\n    params.Clusters = \"clusters-string\"\r\n    resp, err := content_library_image_api.CreateContentLibraryImage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ContentLibraryImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryImageApi contentLibraryImageApi = new ContentLibraryImageApi(client);\r\n        List<UploadTask> resp = contentLibraryImageApi.createContentLibraryImage(\r\n            Files.readAllBytes(Path.of(\"file-string\")),\r\n            \"clusters-string\",\r\n            \"name\",\r\n            \"size\",\r\n            \"size_unit\",\r\n            \"description\",\r\n            \"upload_task_id\"\r\n        );\r\n    }\r\n}"
  },
  "/update-content-library-image": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "ContentLibraryImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-content-library-image \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"ContentLibraryImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryImageApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_image_api = ContentLibraryImageApi(client)\r\n    resp = content_library_image_api.update_content_library_image({\"data\":{},\"where\":{\"id\":\"ContentLibraryImage-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_image_api := client.ContentLibraryImage\r\n    params := content_library_image.NewUpdateContentLibraryImageParams()\r\n    params.RequestBody = &models.ContentLibraryImageUpdationParams{\nData: &models.ContentLibraryImageUpdationParamsData{\n},\nWhere: &models.ContentLibraryImageWhereInput{\nID: pointy.String(\"ContentLibraryImage-id\"),\n},\n}\r\n    rawResp, err := content_library_image_api.UpdateContentLibraryImage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryImage) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryImageApi contentLibraryImageApi = new ContentLibraryImageApi(client);\r\n        ContentLibraryImageUpdationParams params = new ContentLibraryImageUpdationParams()\n.data(new ContentLibraryImageUpdationParamsData())\n.where(new ContentLibraryImageWhereInput()\n.id(\"ContentLibraryImage-id\"));\r\n        List<WithTaskContentLibraryImage> resp = contentLibraryImageApi.updateContentLibraryImage(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/distribute-content-library-image-clusters": {
    "exampleValue": {
      "data": {
        "clusters": {
          "id": "Cluster-id"
        }
      },
      "where": {
        "id": "ContentLibraryImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/distribute-content-library-image-clusters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"ContentLibraryImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryImageApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_image_api = ContentLibraryImageApi(client)\r\n    resp = content_library_image_api.distribute_content_library_image_clusters({\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"ContentLibraryImage-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_image_api := client.ContentLibraryImage\r\n    params := content_library_image.NewDistributeContentLibraryImageClustersParams()\r\n    params.RequestBody = &models.ContentLibraryImageUpdationClusterParams{\nData: &models.ContentLibraryImageUpdationClusterParamsData{\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n},\nWhere: &models.ContentLibraryImageWhereInput{\nID: pointy.String(\"ContentLibraryImage-id\"),\n},\n}\r\n    rawResp, err := content_library_image_api.DistributeContentLibraryImageClusters(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryImage) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryImageApi contentLibraryImageApi = new ContentLibraryImageApi(client);\r\n        ContentLibraryImageUpdationClusterParams params = new ContentLibraryImageUpdationClusterParams()\n.data(new ContentLibraryImageUpdationClusterParamsData()\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\")))\n.where(new ContentLibraryImageWhereInput()\n.id(\"ContentLibraryImage-id\"));\r\n        List<WithTaskContentLibraryImage> resp = contentLibraryImageApi.distributeContentLibraryImageClusters(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-content-library-image-clusters": {
    "exampleValue": {
      "data": {
        "clusters": {
          "id": "Cluster-id"
        }
      },
      "where": {
        "id": "ContentLibraryImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-content-library-image-clusters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"ContentLibraryImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryImageApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_image_api = ContentLibraryImageApi(client)\r\n    resp = content_library_image_api.remove_content_library_image_clusters({\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"ContentLibraryImage-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_image_api := client.ContentLibraryImage\r\n    params := content_library_image.NewRemoveContentLibraryImageClustersParams()\r\n    params.RequestBody = &models.ContentLibraryImageUpdationClusterParams{\nData: &models.ContentLibraryImageUpdationClusterParamsData{\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n},\nWhere: &models.ContentLibraryImageWhereInput{\nID: pointy.String(\"ContentLibraryImage-id\"),\n},\n}\r\n    rawResp, err := content_library_image_api.RemoveContentLibraryImageClusters(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryImage) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryImageApi contentLibraryImageApi = new ContentLibraryImageApi(client);\r\n        ContentLibraryImageUpdationClusterParams params = new ContentLibraryImageUpdationClusterParams()\n.data(new ContentLibraryImageUpdationClusterParamsData()\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\")))\n.where(new ContentLibraryImageWhereInput()\n.id(\"ContentLibraryImage-id\"));\r\n        List<WithTaskContentLibraryImage> resp = contentLibraryImageApi.removeContentLibraryImageClusters(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-content-library-image": {
    "exampleValue": {
      "where": {
        "id": "ContentLibraryImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-content-library-image \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ContentLibraryImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryImageApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_image_api = ContentLibraryImageApi(client)\r\n    resp = content_library_image_api.delete_content_library_image({\"where\":{\"id\":\"ContentLibraryImage-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_image_api := client.ContentLibraryImage\r\n    params := content_library_image.NewDeleteContentLibraryImageParams()\r\n    params.RequestBody = &models.ContentLibraryImageDeletionParams{\nWhere: &models.ContentLibraryImageWhereInput{\nID: pointy.String(\"ContentLibraryImage-id\"),\n},\n}\r\n    rawResp, err := content_library_image_api.DeleteContentLibraryImage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteContentLibraryImage) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryImageApi contentLibraryImageApi = new ContentLibraryImageApi(client);\r\n        ContentLibraryImageDeletionParams params = new ContentLibraryImageDeletionParams()\n.where(new ContentLibraryImageWhereInput()\n.id(\"ContentLibraryImage-id\"));\r\n        List<WithTaskDeleteContentLibraryImage> resp = contentLibraryImageApi.deleteContentLibraryImage(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/import-content-library-image": {
    "exampleValue": {
      "data": {
        "url": "url-string",
        "name": "name-string",
        "cluster": {
          "id": "Cluster-id"
        }
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/import-content-library-image \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"url\":\"url-string\",\"name\":\"name-string\",\"cluster\":{\"id\":\"Cluster-id\"}}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_image_api = ContentLibraryImageApi(client)\r\n    resp = content_library_image_api.import_content_library_image({\"data\":{\"url\":\"url-string\",\"name\":\"name-string\",\"cluster\":{\"id\":\"Cluster-id\"}}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_image_api := client.ContentLibraryImage\r\n    params := content_library_image.NewImportContentLibraryImageParams()\r\n    params.RequestBody = &models.ContentLibraryImageImportParams{\nData: &models.ContentLibraryImageImportData{\nURL: pointy.String(\"url-string\"),\nName: pointy.String(\"name-string\"),\nCluster: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n},\n}\r\n    rawResp, err := content_library_image_api.ImportContentLibraryImage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ContentLibraryImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryImageApi contentLibraryImageApi = new ContentLibraryImageApi(client);\r\n        ContentLibraryImageImportParams params = new ContentLibraryImageImportParams()\n.data(new ContentLibraryImageImportData()\n.url(\"url-string\")\n.name(\"name-string\")\n.cluster(new ClusterWhereInput()\n.id(\"Cluster-id\")));\r\n        UploadTask resp = contentLibraryImageApi.importContentLibraryImage(params);\r\n    }\r\n}"
  },
  "/upload-elf-file": {
    "exampleValue": {
      "file": "file-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/upload-elf-file \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: multipart/form-data' \\\n\t-d '{\"file\":\"file-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, OvfApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    ovf_api = OvfApi(client)\r\n    with open(\"file-path\", \"rb\") as file:\r\n        resp = ovf_api.upload_elf_file(\r\n            file=file\r\n        )\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"bytes\"\r\n    \"fmt\"\r\n    \"io\"\r\n\r\n    \"github.com/go-openapi/runtime\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/ovf\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        ovf_api := client.Ovf\r\n    params := ovf.NewUploadElfFileParams()\r\n    params.File = runtime.NamedReader(\"file\",io.NopCloser(bytes.NewReader([]byte(\"file-string\"))))\r\n    resp, err := ovf_api.UploadElfFile(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.OvfApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        OvfApi ovfApi = new OvfApi(client);\r\n        UploadTask resp = ovfApi.uploadElfFile(\r\n            Files.readAllBytes(Path.of(\"file-string\")),\r\n            \"cluster_id\",\r\n            \"name\",\r\n            \"size\",\r\n            \"size_unit\",\r\n            \"upload_task_id\"\r\n        );\r\n    }\r\n}"
  },
  "/parse-ovf": {
    "exampleValue": {
      "file": "file-string",
      "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/parse-ovf \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: multipart/form-data' \\\n\t-d '{\"file\":\"file-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}'",
    "python": "from cloudtower import ApiClient, Configuration, OvfApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    ovf_api = OvfApi(client)\r\n    with open(\"file-path\", \"rb\") as file:\r\n        resp = ovf_api.parse_ovf(\r\n            file=file,\r\n            cluster_id=\"ck74rk21wg5lz0786opdnzz5m\"\r\n        )\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"bytes\"\r\n    \"fmt\"\r\n    \"io\"\r\n\r\n    \"github.com/go-openapi/runtime\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/ovf\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        ovf_api := client.Ovf\r\n    params := ovf.NewParseOvfParams()\r\n    params.File = runtime.NamedReader(\"file\",io.NopCloser(bytes.NewReader([]byte(\"file-string\"))))\r\n    params.ClusterID = \"ck74rk21wg5lz0786opdnzz5m\"\r\n    resp, err := ovf_api.ParseOvf(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.OvfApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        OvfApi ovfApi = new OvfApi(client);\r\n        ParsedOvf resp = ovfApi.parseOvf(\r\n            Files.readAllBytes(Path.of(\"file-string\")),\r\n            \"ck74rk21wg5lz0786opdnzz5m\"\r\n        );\r\n    }\r\n}"
  },
  "/get-export-file-download-links": {
    "exampleValue": {
      "where": {
        "id": "VmExportFile-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-export-file-download-links \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmExportFile-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, OvfApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    ovf_api = OvfApi(client)\r\n    resp = ovf_api.get_export_file_download_links({\"where\":{\"id\":\"VmExportFile-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/ovf\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        ovf_api := client.Ovf\r\n    params := ovf.NewGetExportFileDownloadLinksParams()\r\n    params.RequestBody = &models.GetExportFileDownloadLinksParams{\nWhere: &models.VMExportFileWhereUniqueInput{\nID: pointy.String(\"VmExportFile-id\"),\n},\n}\r\n    rawResp, err := ovf_api.GetExportFileDownloadLinks(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.OvfApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        OvfApi ovfApi = new OvfApi(client);\r\n        GetExportFileDownloadLinksParams params = new GetExportFileDownloadLinksParams()\n.where(new VmExportFileWhereUniqueInput()\n.id(\"VmExportFile-id\"));\r\n        List<ExportFileDownloadLinks> resp = ovfApi.getExportFileDownloadLinks(params);\r\n    }\r\n}"
  },
  "/create-vm": {
    "exampleValue": [
      {
        "status": "DELETED",
        "firmware": "BIOS",
        "ha": true,
        "vm_nics": [
          {
            "connect_vlan_id": "ck74rk21wg5lz0786opdnzz5m"
          }
        ],
        "vm_disks": {},
        "memory": 1,
        "cpu_cores": 1,
        "cpu_sockets": 1,
        "name": "name-string",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"status\":\"DELETED\",\"firmware\":\"BIOS\",\"ha\":true,\"vm_nics\":[{\"connect_vlan_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"vm_disks\":{},\"memory\":1,\"cpu_cores\":1,\"cpu_sockets\":1,\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.create_vm([{\"status\":\"DELETED\",\"firmware\":\"BIOS\",\"ha\":True,\"vm_nics\":[{\"connect_vlan_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"vm_disks\":{},\"memory\":1,\"cpu_cores\":1,\"cpu_sockets\":1,\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewCreateVMParams()\r\n    params.RequestBody = []*models.VMCreationParams{\n{\nStatus: models.VMStatusDELETED.Pointer(),\nFirmware: models.VMFirmwareBIOS.Pointer(),\nHa: pointy.Bool(true),\nVMNics: []*models.VMNicParams{\n{\nConnectVlanID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\nVMDisks: &models.VMDiskParams{\n},\nMemory: pointy.Int64(1),\nCPUCores: pointy.Int32(1),\nCPUSockets: pointy.Int32(1),\nName: pointy.String(\"name-string\"),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := vm_api.CreateVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        List<VmCreationParams> params = new ArrayList<>();\r\n        params.add(new VmCreationParams()\n.status(VmStatus.fromValue(\"DELETED\"))\n.firmware(VmFirmware.fromValue(\"BIOS\"))\n.ha(true)\n.addVmNicsItem(new VmNicParams()\n.connectVlanId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.vmDisks(new VmDiskParams())\n.memory(1L)\n.cpuCores(1)\n.cpuSockets(1)\n.name(\"name-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVm> resp = vmApi.createVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vm-from-template": {
    "exampleValue": [
      {
        "is_full_copy": true,
        "template_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm-from-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"is_full_copy\":true,\"template_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.create_vm_from_template([{\"is_full_copy\":True,\"template_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewCreateVMFromTemplateParams()\r\n    params.RequestBody = []*models.VMCreateVMFromTemplateParams{\n{\nIsFullCopy: pointy.Bool(true),\nTemplateID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vm_api.CreateVMFromTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        List<VmCreateVmFromTemplateParams> params = new ArrayList<>();\r\n        params.add(new VmCreateVmFromTemplateParams()\n.isFullCopy(true)\n.templateId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVm> resp = vmApi.createVmFromTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vm-from-content-library-template": {
    "exampleValue": [
      {
        "is_full_copy": true,
        "template_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm-from-content-library-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"is_full_copy\":true,\"template_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.create_vm_from_content_library_template([{\"is_full_copy\":True,\"template_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewCreateVMFromContentLibraryTemplateParams()\r\n    params.RequestBody = []*models.VMCreateVMFromContentLibraryTemplateParams{\n{\nIsFullCopy: pointy.Bool(true),\nTemplateID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := vm_api.CreateVMFromContentLibraryTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        List<VmCreateVmFromContentLibraryTemplateParams> params = new ArrayList<>();\r\n        params.add(new VmCreateVmFromContentLibraryTemplateParams()\n.isFullCopy(true)\n.templateId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVm> resp = vmApi.createVmFromContentLibraryTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/convert-vm-template-to-vm": {
    "exampleValue": [
      {
        "name": "name-string",
        "converted_from_template_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/convert-vm-template-to-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"name\":\"name-string\",\"converted_from_template_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.convert_vm_template_to_vm([{\"name\":\"name-string\",\"converted_from_template_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewConvertVMTemplateToVMParams()\r\n    params.RequestBody = []*models.ConvertVMTemplateToVMParams{\n{\nName: pointy.String(\"name-string\"),\nConvertedFromTemplateID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := vm_api.ConvertVMTemplateToVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        List<ConvertVmTemplateToVmParams> params = new ArrayList<>();\r\n        params.add(new ConvertVmTemplateToVmParams()\n.name(\"name-string\")\n.convertedFromTemplateId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVm> resp = vmApi.convertVmTemplateToVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/clone-vm": {
    "exampleValue": [
      {
        "src_vm_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/clone-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"src_vm_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.clone_vm([{\"src_vm_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewCloneVMParams()\r\n    params.RequestBody = []*models.VMCloneParams{\n{\nSrcVMID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vm_api.CloneVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        List<VmCloneParams> params = new ArrayList<>();\r\n        params.add(new VmCloneParams()\n.srcVmId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVm> resp = vmApi.cloneVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/rebuild-vm-from-snapshot": {
    "exampleValue": [
      {
        "rebuild_from_snapshot_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/rebuild-vm-from-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"rebuild_from_snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.rebuild_vm([{\"rebuild_from_snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRebuildVMParams()\r\n    params.RequestBody = []*models.VMRebuildParams{\n{\nRebuildFromSnapshotID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vm_api.RebuildVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        List<VmRebuildParams> params = new ArrayList<>();\r\n        params.add(new VmRebuildParams()\n.rebuildFromSnapshotId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVm> resp = vmApi.rebuildVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/rollback-vm": {
    "exampleValue": {
      "data": {
        "snapshot_id": "ck74rk21wg5lz0786opdnzz5m"
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/rollback-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.rollback_vm({\"data\":{\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRollbackVMParams()\r\n    params.RequestBody = &models.VMRollbackParams{\nData: &models.VMRollbackParamsData{\nSnapshotID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RollbackVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmRollbackParams params = new VmRollbackParams()\n.data(new VmRollbackParamsData()\n.snapshotId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.rollbackVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-basic-info": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-basic-info \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm({\"data\":{},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMParams()\r\n    params.RequestBody = &models.VMUpdateParams{\nData: &models.VMUpdateParamsData{\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateParams params = new VmUpdateParams()\n.data(new VmUpdateParamsData())\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/move-vm-to-recycle": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/move-vm-to-recycle \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.move_vm_to_recycle_bin({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewMoveVMToRecycleBinParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.MoveVMToRecycleBin(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskDeleteVm> resp = vmApi.moveVmToRecycleBin(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/recover-vm-from-recycle": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/recover-vm-from-recycle \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.recover_vm_from_recycle_bin({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRecoverVMFromRecycleBinParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RecoverVMFromRecycleBin(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskDeleteVm> resp = vmApi.recoverVmFromRecycleBin(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.delete_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewDeleteVMParams()\r\n    params.RequestBody = &models.VMDeleteParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.DeleteVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmDeleteParams params = new VmDeleteParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskDeleteVm> resp = vmApi.deleteVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/start-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/start-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.start_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewStartVMParams()\r\n    params.RequestBody = &models.VMStartParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.StartVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmStartParams params = new VmStartParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.startVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/restart-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/restart-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.restart_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRestartVMParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RestartVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.restartVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/force-restart-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/force-restart-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.force_restart_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewForceRestartVMParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.ForceRestartVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.forceRestartVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/shutdown-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/shutdown-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.shut_down_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewShutDownVMParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.ShutDownVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.shutDownVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/poweroff-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/poweroff-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.poweroff_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewPoweroffVMParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.PoweroffVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.poweroffVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/suspend-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/suspend-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.suspend_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewSuspendVMParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.SuspendVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.suspendVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/resume-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/resume-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.resume_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewResumeVMParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.ResumeVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.resumeVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/add-vm-disk": {
    "exampleValue": {
      "data": {
        "vm_disks": {}
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/add-vm-disk \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"vm_disks\":{}},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.add_vm_disk({\"data\":{\"vm_disks\":{}},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewAddVMDiskParams()\r\n    params.RequestBody = &models.VMAddDiskParams{\nData: &models.VMAddDiskParamsData{\nVMDisks: &models.VMAddDiskParamsDataVmdisks{\n},\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.AddVMDisk(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmAddDiskParams params = new VmAddDiskParams()\n.data(new VmAddDiskParamsData()\n.vmDisks(new VmAddDiskParamsDataVmdisks()))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.addVmDisk(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-disk": {
    "exampleValue": {
      "data": {
        "vm_disk_id": "ck74rk21wg5lz0786opdnzz5m"
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-disk \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"vm_disk_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_disk({\"data\":{\"vm_disk_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMDiskParams()\r\n    params.RequestBody = &models.VMUpdateDiskParams{\nData: &models.VMUpdateDiskParamsData{\nVMDiskID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMDisk(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateDiskParams params = new VmUpdateDiskParams()\n.data(new VmUpdateDiskParamsData()\n.vmDiskId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmDisk(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/expand-vm-disk": {
    "exampleValue": {
      "size": 1,
      "where": {
        "id": "VmDisk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/expand-vm-disk \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"size\":1,\"where\":{\"id\":\"VmDisk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.expand_vm_disk({\"size\":1,\"where\":{\"id\":\"VmDisk-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewExpandVMDiskParams()\r\n    params.RequestBody = &models.VMExpandVMDiskParams{\nSize: pointy.Int64(1),\nWhere: &models.VMDiskWhereInput{\nID: pointy.String(\"VmDisk-id\"),\n},\n}\r\n    rawResp, err := vm_api.ExpandVMDisk(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmExpandVmDiskParams params = new VmExpandVmDiskParams()\n.size(1L)\n.where(new VmDiskWhereInput()\n.id(\"VmDisk-id\"));\r\n        List<WithTaskVm> resp = vmApi.expandVmDisk(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-vm-disk": {
    "exampleValue": {
      "data": {
        "disk_ids": [
          "-string"
        ]
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-vm-disk \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"disk_ids\":[\"-string\"]},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.remove_vm_disk({\"data\":{\"disk_ids\":[\"-string\"]},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRemoveVMDiskParams()\r\n    params.RequestBody = &models.VMRemoveDiskParams{\nData: &models.VMRemoveDiskParamsData{\nDiskIds: []string{\"-string\",\n},\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RemoveVMDisk(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmRemoveDiskParams params = new VmRemoveDiskParams()\n.data(new VmRemoveDiskParamsData()\n.addDiskIdsItem(\"-string\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.removeVmDisk(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/add-vm-cd-rom": {
    "exampleValue": {
      "data": {
        "vm_cd_roms": [
          {
            "boot": 1
          }
        ]
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/add-vm-cd-rom \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"vm_cd_roms\":[{\"boot\":1}]},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.add_vm_cd_rom({\"data\":{\"vm_cd_roms\":[{\"boot\":1}]},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewAddVMCdRomParams()\r\n    params.RequestBody = &models.VMAddCdRomParams{\nData: &models.VMAddCdRomParamsData{\nVMCdRoms: []*models.VMCdRomParams{\n{\nBoot: pointy.Int32(1),\n},\n},\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.AddVMCdRom(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmAddCdRomParams params = new VmAddCdRomParams()\n.data(new VmAddCdRomParamsData()\n.addVmCdRomsItem(new VmCdRomParams()\n.boot(1)))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.addVmCdRom(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-vm-cd-rom": {
    "exampleValue": {
      "data": {
        "cd_rom_ids": [
          "-string"
        ]
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-vm-cd-rom \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"cd_rom_ids\":[\"-string\"]},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.remove_vm_cd_rom({\"data\":{\"cd_rom_ids\":[\"-string\"]},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRemoveVMCdRomParams()\r\n    params.RequestBody = &models.VMRemoveCdRomParams{\nData: &models.VMRemoveCdRomParamsData{\nCdRomIds: []string{\"-string\",\n},\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RemoveVMCdRom(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmRemoveCdRomParams params = new VmRemoveCdRomParams()\n.data(new VmRemoveCdRomParamsData()\n.addCdRomIdsItem(\"-string\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.removeVmCdRom(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/eject-iso-from-vm-cd-rom": {
    "exampleValue": {
      "where": {
        "id": "VmDisk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/eject-iso-from-vm-cd-rom \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmDisk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.eject_iso_from_vm_cd_rom({\"where\":{\"id\":\"VmDisk-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewEjectIsoFromVMCdRomParams()\r\n    params.RequestBody = &models.VMEjectCdRomParams{\nWhere: &models.VMDiskWhereInput{\nID: pointy.String(\"VmDisk-id\"),\n},\n}\r\n    rawResp, err := vm_api.EjectIsoFromVMCdRom(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmEjectCdRomParams params = new VmEjectCdRomParams()\n.where(new VmDiskWhereInput()\n.id(\"VmDisk-id\"));\r\n        List<WithTaskVm> resp = vmApi.ejectIsoFromVmCdRom(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/toggle-vm-cd-rom-disable": {
    "exampleValue": {
      "disabled": true,
      "where": {
        "id": "VmDisk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/toggle-vm-cd-rom-disable \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"disabled\":true,\"where\":{\"id\":\"VmDisk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.toggle_vm_cd_rom_disable({\"disabled\":True,\"where\":{\"id\":\"VmDisk-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewToggleVMCdRomDisableParams()\r\n    params.RequestBody = &models.VMToggleCdRomDisableParams{\nDisabled: pointy.Bool(true),\nWhere: &models.VMDiskWhereInput{\nID: pointy.String(\"VmDisk-id\"),\n},\n}\r\n    rawResp, err := vm_api.ToggleVMCdRomDisable(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmToggleCdRomDisableParams params = new VmToggleCdRomDisableParams()\n.disabled(true)\n.where(new VmDiskWhereInput()\n.id(\"VmDisk-id\"));\r\n        List<WithTaskVm> resp = vmApi.toggleVmCdRomDisable(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/add-vm-nic": {
    "exampleValue": {
      "data": {
        "vm_nics": [
          {
            "connect_vlan_id": "ck74rk21wg5lz0786opdnzz5m"
          }
        ]
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/add-vm-nic \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"vm_nics\":[{\"connect_vlan_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.add_vm_nic({\"data\":{\"vm_nics\":[{\"connect_vlan_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewAddVMNicParams()\r\n    params.RequestBody = &models.VMAddNicParams{\nData: &models.VMAddNicParamsData{\nVMNics: []*models.VMNicParams{\n{\nConnectVlanID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.AddVMNic(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmAddNicParams params = new VmAddNicParams()\n.data(new VmAddNicParamsData()\n.addVmNicsItem(new VmNicParams()\n.connectVlanId(\"ck74rk21wg5lz0786opdnzz5m\")))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.addVmNic(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-nic": {
    "exampleValue": {
      "data": {
        "nic_index": 1
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-nic \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"nic_index\":1},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_nic({\"data\":{\"nic_index\":1},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMNicParams()\r\n    params.RequestBody = &models.VMUpdateNicParams{\nData: &models.VMUpdateNicParamsData{\nNicIndex: pointy.Int32(1),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMNic(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateNicParams params = new VmUpdateNicParams()\n.data(new VmUpdateNicParamsData()\n.nicIndex(1))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmNic(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-nic-basic-info": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "VmNic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-nic-basic-info \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"VmNic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_nic_basic_info({\"data\":{},\"where\":{\"id\":\"VmNic-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMNicBasicInfoParams()\r\n    params.RequestBody = &models.VMUpdateNicBasicInfoParams{\nData: &models.VMUpdateNicBasicInfoParamsData{\n},\nWhere: &models.VMNicWhereInput{\nID: pointy.String(\"VmNic-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMNicBasicInfo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateNicBasicInfoParams params = new VmUpdateNicBasicInfoParams()\n.data(new VmUpdateNicBasicInfoParamsData())\n.where(new VmNicWhereInput()\n.id(\"VmNic-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmNicBasicInfo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-nic-advance-info": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "VmNic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-nic-advance-info \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"VmNic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_nic_advance_info({\"data\":{},\"where\":{\"id\":\"VmNic-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMNicAdvanceInfoParams()\r\n    params.RequestBody = &models.VMUpdateNicAdvanceInfoParams{\nData: &models.VMUpdateNicAdvanceInfoParamsData{\n},\nWhere: &models.VMNicWhereInput{\nID: pointy.String(\"VmNic-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMNicAdvanceInfo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateNicAdvanceInfoParams params = new VmUpdateNicAdvanceInfoParams()\n.data(new VmUpdateNicAdvanceInfoParamsData())\n.where(new VmNicWhereInput()\n.id(\"VmNic-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmNicAdvanceInfo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-nic-qos-option": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "VmNic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-nic-qos-option \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"VmNic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_nic_qos_option({\"data\":{},\"where\":{\"id\":\"VmNic-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMNicQosOptionParams()\r\n    params.RequestBody = &models.VMUpdateNicQosOptionsParams{\nData: &models.VMUpdateNicQosOptionsParamsData{\n},\nWhere: &models.VMNicWhereInput{\nID: pointy.String(\"VmNic-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMNicQosOption(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateNicQosOptionsParams params = new VmUpdateNicQosOptionsParams()\n.data(new VmUpdateNicQosOptionsParamsData())\n.where(new VmNicWhereInput()\n.id(\"VmNic-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmNicQosOption(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/add-vm-pci-nic": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/add-vm-pci-nic \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.add_vm_pci_nic({\"data\":{},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewAddVMPciNicParams()\r\n    params.RequestBody = &models.VMOperatePciNicParams{\nData: &models.VMOperatePciNicParamsData{\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.AddVMPciNic(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperatePciNicParams params = new VmOperatePciNicParams()\n.data(new VmOperatePciNicParamsData())\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.addVmPciNic(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-vm-pci-nic": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-vm-pci-nic \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.remove_vm_pci_nic({\"data\":{},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRemoveVMPciNicParams()\r\n    params.RequestBody = &models.VMOperatePciNicParams{\nData: &models.VMOperatePciNicParamsData{\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RemoveVMPciNic(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperatePciNicParams params = new VmOperatePciNicParams()\n.data(new VmOperatePciNicParamsData())\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.removeVmPciNic(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-vm-nic": {
    "exampleValue": {
      "data": {
        "nic_index": [
          1
        ]
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-vm-nic \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"nic_index\":[1]},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.remove_vm_nic({\"data\":{\"nic_index\":[1]},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRemoveVMNicParams()\r\n    params.RequestBody = &models.VMRemoveNicParams{\nData: &models.VMRemoveNicParamsData{\nNicIndex: []int{1\n},\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RemoveVMNic(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmRemoveNicParams params = new VmRemoveNicParams()\n.data(new VmRemoveNicParamsData()\n.addNicIndexItem(1))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.removeVmNic(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-vm-nic-by-where": {
    "exampleValue": {
      "effect": {},
      "where": {
        "id": "VmNic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-vm-nic-by-where \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"effect\":{},\"where\":{\"id\":\"VmNic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.remove_vm_nic_by_where({\"effect\":{},\"where\":{\"id\":\"VmNic-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRemoveVMNicByWhereParams()\r\n    params.RequestBody = &models.VMRemoveNicByWhereParams{\nEffect: &models.VMRemoveNicByWhereParamsEffect{\n},\nWhere: &models.VMNicWhereInput{\nID: pointy.String(\"VmNic-id\"),\n},\n}\r\n    rawResp, err := vm_api.RemoveVMNicByWhere(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmRemoveNicByWhereParams params = new VmRemoveNicByWhereParams()\n.effect(new VmRemoveNicByWhereParamsEffect())\n.where(new VmNicWhereInput()\n.id(\"VmNic-id\"));\r\n        List<WithTaskVm> resp = vmApi.removeVmNicByWhere(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/add-vm-gpu-device": {
    "exampleValue": {
      "data": [
        {
          "gpu_id": "ck74rk21wg5lz0786opdnzz5m"
        }
      ],
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/add-vm-gpu-device \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":[{\"gpu_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.add_vm_gpu_device({\"data\":[{\"gpu_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewAddVMGpuDeviceParams()\r\n    params.RequestBody = &models.VMAddGpuDeviceParams{\nData: []*models.VMGpuOperationParams{\n{\nGpuID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.AddVMGpuDevice(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmAddGpuDeviceParams params = new VmAddGpuDeviceParams()\n.addDataItem(new VmGpuOperationParams()\n.gpuId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.addVmGpuDevice(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-vm-gpu-device": {
    "exampleValue": {
      "data": [
        {
          "gpu_id": "ck74rk21wg5lz0786opdnzz5m"
        }
      ],
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-vm-gpu-device \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":[{\"gpu_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.remove_vm_gpu_device({\"data\":[{\"gpu_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRemoveVMGpuDeviceParams()\r\n    params.RequestBody = &models.VMRemoveGpuDeviceParams{\nData: []*models.VMGpuOperationParams{\n{\nGpuID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RemoveVMGpuDevice(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmRemoveGpuDeviceParams params = new VmRemoveGpuDeviceParams()\n.addDataItem(new VmGpuOperationParams()\n.gpuId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.removeVmGpuDevice(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/install-vmtools": {
    "exampleValue": {
      "data": {
        "svt_image_id": "ck74rk21wg5lz0786opdnzz5m",
        "cd_rom_id": "ck74rk21wg5lz0786opdnzz5m"
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/install-vmtools \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"svt_image_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"cd_rom_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.install_vmtools({\"data\":{\"svt_image_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"cd_rom_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewInstallVmtoolsParams()\r\n    params.RequestBody = &models.InstallVmtoolsParams{\nData: &models.InstallVmtoolsParamsData{\nSvtImageID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nCdRomID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.InstallVmtools(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        InstallVmtoolsParams params = new InstallVmtoolsParams()\n.data(new InstallVmtoolsParamsData()\n.svtImageId(\"ck74rk21wg5lz0786opdnzz5m\")\n.cdRomId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.installVmtools(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/migrate-vm": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/migrate-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.migrate_vm({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewMigrateVMParams()\r\n    params.RequestBody = &models.VMMigrateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.MigrateVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmMigrateParams params = new VmMigrateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.migrateVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/migrate-vm-across-cluster": {
    "exampleValue": {
      "data": {
        "vm_config": {
          "network_mapping": [
            {
              "src_vlan_local_id": "ck74rk21wg5lz0786opdnzz5m",
              "dest_vlan_local_id": "ck74rk21wg5lz0786opdnzz5m"
            }
          ],
          "migrate_type": "COLD_MIGRATE",
          "elf_storage_policy": "ELF_CP_REPLICA_2_THICK_PROVISION"
        },
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/migrate-vm-across-cluster \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"vm_config\":{\"network_mapping\":[{\"src_vlan_local_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"dest_vlan_local_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"migrate_type\":\"COLD_MIGRATE\",\"elf_storage_policy\":\"ELF_CP_REPLICA_2_THICK_PROVISION\"},\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.migrate_vm_across_cluster({\"data\":{\"vm_config\":{\"network_mapping\":[{\"src_vlan_local_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"dest_vlan_local_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"migrate_type\":\"COLD_MIGRATE\",\"elf_storage_policy\":\"ELF_CP_REPLICA_2_THICK_PROVISION\"},\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewMigrateVMAcrossClusterParams()\r\n    params.RequestBody = &models.VMMigrateAcrossClusterParams{\nData: &models.VMMigrateAcrossClusterParamsData{\nVMConfig: &models.MigrateVMConfig{\nNetworkMapping: []*models.VlanMapping{\n{\nSrcVlanLocalID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nDestVlanLocalID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\nMigrateType: models.MigrateTypeCOLD_MIGRATE.Pointer(),\nElfStoragePolicy: models.VMVolumeElfStoragePolicyTypeELF_CP_REPLICA_2_THICK_PROVISION.Pointer(),\n},\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.MigrateVMAcrossCluster(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmMigrateAcrossClusterParams params = new VmMigrateAcrossClusterParams()\n.data(new VmMigrateAcrossClusterParamsData()\n.vmConfig(new MigrateVmConfig()\n.addNetworkMappingItem(new VlanMapping()\n.srcVlanLocalId(\"ck74rk21wg5lz0786opdnzz5m\")\n.destVlanLocalId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.migrateType(MigrateType.fromValue(\"COLD_MIGRATE\"))\n.elfStoragePolicy(VmVolumeElfStoragePolicyType.fromValue(\"ELF_CP_REPLICA_2_THICK_PROVISION\")))\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.migrateVmAcrossCluster(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/stop-vm-in-cutover-migration": {
    "exampleValue": {
      "tasks": {
        "id": "Task-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/stop-vm-in-cutover-migration \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"tasks\":{\"id\":\"Task-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.stop_vm_in_cutover_migration({\"tasks\":{\"id\":\"Task-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewStopVMInCutoverMigrationParams()\r\n    params.RequestBody = &models.StopVMInCutoverMigrationParams{\nTasks: &models.TaskWhereInput{\nID: pointy.String(\"Task-id\"),\n},\n}\r\n    rawResp, err := vm_api.StopVMInCutoverMigration(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        StopVmInCutoverMigrationParams params = new StopVmInCutoverMigrationParams()\n.tasks(new TaskWhereInput()\n.id(\"Task-id\"));\r\n        List<WithTaskVm> resp = vmApi.stopVmInCutoverMigration(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/abort-migrate-vm-across-cluster": {
    "exampleValue": {
      "tasks": {
        "id": "Task-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/abort-migrate-vm-across-cluster \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"tasks\":{\"id\":\"Task-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.abort_migrate_vm_across_cluster({\"tasks\":{\"id\":\"Task-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewAbortMigrateVMAcrossClusterParams()\r\n    params.RequestBody = &models.AbortMigrateVMAcrossClusterParams{\nTasks: &models.TaskWhereInput{\nID: pointy.String(\"Task-id\"),\n},\n}\r\n    rawResp, err := vm_api.AbortMigrateVMAcrossCluster(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        AbortMigrateVmAcrossClusterParams params = new AbortMigrateVmAcrossClusterParams()\n.tasks(new TaskWhereInput()\n.id(\"Task-id\"));\r\n        List<Task> resp = vmApi.abortMigrateVmAcrossCluster(params);\r\n    }\r\n}"
  },
  "/add-vm-to-folder": {
    "exampleValue": {
      "data": {
        "folder_id": "ck74rk21wg5lz0786opdnzz5m"
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/add-vm-to-folder \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"folder_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.add_vm_to_folder({\"data\":{\"folder_id\":\"ck74rk21wg5lz0786opdnzz5m\"},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewAddVMToFolderParams()\r\n    params.RequestBody = &models.VMAddFolderParams{\nData: &models.VMAddFolderParamsData{\nFolderID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.AddVMToFolder(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmAddFolderParams params = new VmAddFolderParams()\n.data(new VmAddFolderParamsData()\n.folderId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.addVmToFolder(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-vm-from-folder": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-vm-from-folder \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.remove_vm_to_folder({\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewRemoveVMToFolderParams()\r\n    params.RequestBody = &models.VMOperateParams{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.RemoveVMToFolder(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmOperateParams params = new VmOperateParams()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.removeVmToFolder(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-advanced-options": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-advanced-options \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_advanced_options({\"data\":{},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMAdvancedOptionsParams()\r\n    params.RequestBody = &models.VMUpdateAdvancedOptionsParams{\nData: &models.VMUpdateAdvancedOptionsParamsData{\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMAdvancedOptions(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateAdvancedOptionsParams params = new VmUpdateAdvancedOptionsParams()\n.data(new VmUpdateAdvancedOptionsParamsData())\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmAdvancedOptions(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-host-options": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-host-options \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_host_options({\"data\":{},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMHostOptionsParams()\r\n    params.RequestBody = &models.VMUpdateHostOptionsParams{\nData: &models.VMUpdateHostOptionsParamsData{\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMHostOptions(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateHostOptionsParams params = new VmUpdateHostOptionsParams()\n.data(new VmUpdateHostOptionsParamsData())\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmHostOptions(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/reset-vm-guest-os-password": {
    "exampleValue": {
      "data": {
        "password": "password-string",
        "username": "username-string"
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/reset-vm-guest-os-password \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"password\":\"password-string\",\"username\":\"username-string\"},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.reset_vm_guest_os_password({\"data\":{\"password\":\"password-string\",\"username\":\"username-string\"},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewResetVMGuestOsPasswordParams()\r\n    params.RequestBody = &models.VMResetGuestOsPasswordParams{\nData: &models.VMResetGuestOsPasswordParamsData{\nPassword: pointy.String(\"password-string\"),\nUsername: pointy.String(\"username-string\"),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.ResetVMGuestOsPassword(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmResetGuestOsPasswordParams params = new VmResetGuestOsPasswordParams()\n.data(new VmResetGuestOsPasswordParamsData()\n.password(\"password-string\")\n.username(\"username-string\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.resetVmGuestOsPassword(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-owner": {
    "exampleValue": {
      "data": {
        "search_for": "username",
        "value": "value-string"
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-owner \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"search_for\":\"username\",\"value\":\"value-string\"},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_owner({\"data\":{\"search_for\":\"username\",\"value\":\"value-string\"},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMOwnerParams()\r\n    params.RequestBody = &models.VMUpdateOwnerParams{\nData: &models.VMUpdateOwnerParamsData{\nSearchFor: pointy.String(\"username\"),\nValue: pointy.String(\"value-string\"),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMOwner(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateOwnerParams params = new VmUpdateOwnerParams()\n.data(new VmUpdateOwnerParamsData()\n.searchFor(\"username\")\n.value(\"value-string\"))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmOwner(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-io-policy": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-io-policy \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.update_vm_io_policy({\"data\":{},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewUpdateVMIoPolicyParams()\r\n    params.RequestBody = &models.VMUpdateIoPolicyParams{\nData: &models.VMUpdateIoPolicyParamsData{\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.UpdateVMIoPolicy(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmUpdateIoPolicyParams params = new VmUpdateIoPolicyParams()\n.data(new VmUpdateIoPolicyParamsData())\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVm> resp = vmApi.updateVmIoPolicy(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/export-vm": {
    "exampleValue": {
      "data": {
        "type": "OVF"
      },
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/export-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"type\":\"OVF\"},\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.export_vm({\"data\":{\"type\":\"OVF\"},\"where\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewExportVMParams()\r\n    params.RequestBody = &models.VMExportParams{\nData: &models.VMExportParamsData{\nType: models.VMExportFileTypeOVF.Pointer(),\n},\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.ExportVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMExportFile) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        VmExportParams params = new VmExportParams()\n.data(new VmExportParamsData()\n.type(VmExportFileType.fromValue(\"OVF\")))\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskVmExportFile> resp = vmApi.exportVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/import-vm": {
    "exampleValue": [
      {
        "name": "name-string",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "upload_tasks": [
          "-string"
        ],
        "parsed_ovf": {
          "firmware": "BIOS",
          "disks": [
            {
              "size": 1,
              "type": "CD_ROM",
              "bus": "IDE",
              "name": "name-string"
            }
          ],
          "nics": [
            {
              "mac": "mac-string"
            }
          ],
          "memory": 1,
          "cpu": {
            "sockets": 1,
            "cores": 1
          },
          "vcpu": 1,
          "name": "name-string"
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/import-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"upload_tasks\":[\"-string\"],\"parsed_ovf\":{\"firmware\":\"BIOS\",\"disks\":[{\"size\":1,\"type\":\"CD_ROM\",\"bus\":\"IDE\",\"name\":\"name-string\"}],\"nics\":[{\"mac\":\"mac-string\"}],\"memory\":1,\"cpu\":{\"sockets\":1,\"cores\":1},\"vcpu\":1,\"name\":\"name-string\"}}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.import_vm([{\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"upload_tasks\":[\"-string\"],\"parsed_ovf\":{\"firmware\":\"BIOS\",\"disks\":[{\"size\":1,\"type\":\"CD_ROM\",\"bus\":\"IDE\",\"name\":\"name-string\"}],\"nics\":[{\"mac\":\"mac-string\"}],\"memory\":1,\"cpu\":{\"sockets\":1,\"cores\":1},\"vcpu\":1,\"name\":\"name-string\"}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewImportVMParams()\r\n    params.RequestBody = []*models.VMImportParams{\n{\nName: pointy.String(\"name-string\"),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nUploadTasks: []string{\"-string\",\n},\nParsedOvf: &models.ParsedOvf{\nFirmware: models.VMFirmwareBIOS.Pointer(),\nDisks: []*models.OvfDisk{\n{\nSize: pointy.Int64(1),\nType: models.VMDiskTypeCD_ROM.Pointer(),\nBus: models.BusIDE.Pointer(),\nName: pointy.String(\"name-string\"),\n},\n},\nNics: []*models.OvfNic{\n{\nMac: pointy.String(\"mac-string\"),\n},\n},\nMemory: pointy.Int64(1),\nCPU: &models.OvfCPU{\nSockets: pointy.Int32(1),\nCores: pointy.Int32(1),\n},\nVcpu: pointy.Int32(1),\nName: pointy.String(\"name-string\"),\n},\n},\n}\r\n    rawResp, err := vm_api.ImportVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVM) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        List<VmImportParams> params = new ArrayList<>();\r\n        params.add(new VmImportParams()\n.name(\"name-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.addUploadTasksItem(\"-string\")\n.parsedOvf(new ParsedOvf()\n.firmware(VmFirmware.fromValue(\"BIOS\"))\n.addDisksItem(new OvfDisk()\n.size(1L)\n.type(VmDiskType.fromValue(\"CD_ROM\"))\n.bus(Bus.fromValue(\"IDE\"))\n.name(\"name-string\"))\n.addNicsItem(new OvfNic()\n.mac(\"mac-string\"))\n.memory(1L)\n.cpu(new OvfCpu()\n.sockets(1)\n.cores(1))\n.vcpu(1)\n.name(\"name-string\")));\r\n        List<WithTaskVm> resp = vmApi.importVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-vm-gpu-device-info": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-gpu-device-info \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.get_vm_gpu_device_info({\"where\":{\"id\":\"Vm-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewGetVMGpuDeviceInfoParams()\r\n    params.RequestBody = &models.GetVmsRequestBody{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.GetVMGpuDeviceInfo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        GetVmsRequestBody params = new GetVmsRequestBody()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<VmGpuInfo> resp = vmApi.getVmGpuDeviceInfo(params);\r\n    }\r\n}"
  },
  "/get-vm-vnc-info": {
    "exampleValue": {
      "vm": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-vnc-info \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"vm\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.get_vm_vnc_info({\"vm\":{\"id\":\"Vm-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewGetVMVncInfoParams()\r\n    params.RequestBody = &models.GetVMVncInfoParams{\nVM: &models.VMWhereUniqueInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.GetVMVncInfo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        GetVmVncInfoParams params = new GetVmVncInfoParams()\n.vm(new VmWhereUniqueInput()\n.id(\"Vm-id\"));\r\n        VmVncInfo resp = vmApi.getVmVncInfo(params);\r\n    }\r\n}"
  },
  "/clone-content-library-vm-template-from-vm": {
    "exampleValue": [
      {
        "clusters": {
          "id": "Cluster-id"
        },
        "vm": {
          "id": "Vm-id"
        },
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/clone-content-library-vm-template-from-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"clusters\":{\"id\":\"Cluster-id\"},\"vm\":{\"id\":\"Vm-id\"},\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.clone_content_library_vm_template_from_vm([{\"clusters\":{\"id\":\"Cluster-id\"},\"vm\":{\"id\":\"Vm-id\"},\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewCloneContentLibraryVMTemplateFromVMParams()\r\n    params.RequestBody = []*models.ContentLibraryVMTemplateCreationParams{\n{\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\nVM: &models.VMWhereUniqueInput{\nID: pointy.String(\"Vm-id\"),\n},\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.CloneContentLibraryVMTemplateFromVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        List<ContentLibraryVmTemplateCreationParams> params = new ArrayList<>();\r\n        params.add(new ContentLibraryVmTemplateCreationParams()\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\"))\n.vm(new VmWhereUniqueInput()\n.id(\"Vm-id\"))\n.name(\"name-string\"));\r\n        List<WithTaskContentLibraryVmTemplate> resp = contentLibraryVmTemplateApi.cloneContentLibraryVmTemplateFromVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/convert-content-library-vm-template-from-vm": {
    "exampleValue": [
      {
        "clusters": {
          "id": "Cluster-id"
        },
        "vm": {
          "id": "Vm-id"
        },
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/convert-content-library-vm-template-from-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"clusters\":{\"id\":\"Cluster-id\"},\"vm\":{\"id\":\"Vm-id\"},\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.convert_content_library_vm_template_from_vm([{\"clusters\":{\"id\":\"Cluster-id\"},\"vm\":{\"id\":\"Vm-id\"},\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewConvertContentLibraryVMTemplateFromVMParams()\r\n    params.RequestBody = []*models.ContentLibraryVMTemplateCreationParams{\n{\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\nVM: &models.VMWhereUniqueInput{\nID: pointy.String(\"Vm-id\"),\n},\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.ConvertContentLibraryVMTemplateFromVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        List<ContentLibraryVmTemplateCreationParams> params = new ArrayList<>();\r\n        params.add(new ContentLibraryVmTemplateCreationParams()\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\"))\n.vm(new VmWhereUniqueInput()\n.id(\"Vm-id\"))\n.name(\"name-string\"));\r\n        List<WithTaskContentLibraryVmTemplate> resp = contentLibraryVmTemplateApi.convertContentLibraryVmTemplateFromVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-content-library-vm-template": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "ContentLibraryVmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-content-library-vm-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.update_content_library_vm_template({\"data\":{},\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewUpdateContentLibraryVMTemplateParams()\r\n    params.RequestBody = &models.ContentLibraryVMTemplateUpdationParams{\nData: &models.ContentLibraryVMTemplateUpdationParamsData{\n},\nWhere: &models.ContentLibraryVMTemplateWhereInput{\nID: pointy.String(\"ContentLibraryVmTemplate-id\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.UpdateContentLibraryVMTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        ContentLibraryVmTemplateUpdationParams params = new ContentLibraryVmTemplateUpdationParams()\n.data(new ContentLibraryVmTemplateUpdationParamsData())\n.where(new ContentLibraryVmTemplateWhereInput()\n.id(\"ContentLibraryVmTemplate-id\"));\r\n        List<WithTaskContentLibraryVmTemplate> resp = contentLibraryVmTemplateApi.updateContentLibraryVmTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/distribute-content-library-vm-template-clusters": {
    "exampleValue": {
      "data": {
        "clusters": {
          "id": "Cluster-id"
        }
      },
      "where": {
        "id": "ContentLibraryVmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/distribute-content-library-vm-template-clusters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.distribute_content_library_vmtemplate_clusters({\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewDistributeContentLibraryVmtemplateClustersParams()\r\n    params.RequestBody = &models.ContentLibraryVMTemplateUpdationClusterParams{\nData: &models.ContentLibraryVMTemplateUpdationClusterParamsData{\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n},\nWhere: &models.ContentLibraryVMTemplateWhereInput{\nID: pointy.String(\"ContentLibraryVmTemplate-id\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.DistributeContentLibraryVmtemplateClusters(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        ContentLibraryVmTemplateUpdationClusterParams params = new ContentLibraryVmTemplateUpdationClusterParams()\n.data(new ContentLibraryVmTemplateUpdationClusterParamsData()\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\")))\n.where(new ContentLibraryVmTemplateWhereInput()\n.id(\"ContentLibraryVmTemplate-id\"));\r\n        List<WithTaskContentLibraryVmTemplate> resp = contentLibraryVmTemplateApi.distributeContentLibraryVmtemplateClusters(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-content-library-vm-template-clusters": {
    "exampleValue": {
      "data": {
        "clusters": {
          "id": "Cluster-id"
        }
      },
      "where": {
        "id": "ContentLibraryVmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-content-library-vm-template-clusters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.remove_content_library_vm_template_clusters({\"data\":{\"clusters\":{\"id\":\"Cluster-id\"}},\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewRemoveContentLibraryVMTemplateClustersParams()\r\n    params.RequestBody = &models.ContentLibraryVMTemplateUpdationClusterParams{\nData: &models.ContentLibraryVMTemplateUpdationClusterParamsData{\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n},\nWhere: &models.ContentLibraryVMTemplateWhereInput{\nID: pointy.String(\"ContentLibraryVmTemplate-id\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.RemoveContentLibraryVMTemplateClusters(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        ContentLibraryVmTemplateUpdationClusterParams params = new ContentLibraryVmTemplateUpdationClusterParams()\n.data(new ContentLibraryVmTemplateUpdationClusterParamsData()\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\")))\n.where(new ContentLibraryVmTemplateWhereInput()\n.id(\"ContentLibraryVmTemplate-id\"));\r\n        List<WithTaskContentLibraryVmTemplate> resp = contentLibraryVmTemplateApi.removeContentLibraryVmTemplateClusters(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-content-library-vm-template": {
    "exampleValue": {
      "where": {
        "id": "ContentLibraryVmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-content-library-vm-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.delete_content_library_vm_template({\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewDeleteContentLibraryVMTemplateParams()\r\n    params.RequestBody = &models.ContentLibraryVMTemplateDeletionParams{\nWhere: &models.ContentLibraryVMTemplateWhereInput{\nID: pointy.String(\"ContentLibraryVmTemplate-id\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.DeleteContentLibraryVMTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteContentLibraryVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        ContentLibraryVmTemplateDeletionParams params = new ContentLibraryVmTemplateDeletionParams()\n.where(new ContentLibraryVmTemplateWhereInput()\n.id(\"ContentLibraryVmTemplate-id\"));\r\n        List<WithTaskDeleteContentLibraryVmTemplate> resp = contentLibraryVmTemplateApi.deleteContentLibraryVmTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/export-content-library-vm-template": {
    "exampleValue": {
      "where": {
        "id": "ContentLibraryVmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/export-content-library-vm-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.export_content_library_vm_template({\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewExportContentLibraryVMTemplateParams()\r\n    params.RequestBody = &models.ContentLibraryVMTemplateExportParams{\nWhere: &models.ContentLibraryVMTemplateWhereInput{\nID: pointy.String(\"ContentLibraryVmTemplate-id\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.ExportContentLibraryVMTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMExportFile) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        ContentLibraryVmTemplateExportParams params = new ContentLibraryVmTemplateExportParams()\n.where(new ContentLibraryVmTemplateWhereInput()\n.id(\"ContentLibraryVmTemplate-id\"));\r\n        List<WithTaskVmExportFile> resp = contentLibraryVmTemplateApi.exportContentLibraryVmTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/import-content-library-vm-template": {
    "exampleValue": [
      {
        "name": "name-string",
        "upload_tasks": [
          "-string"
        ],
        "parsed_ovf": {
          "firmware": "BIOS",
          "disks": [
            {
              "size": 1,
              "type": "CD_ROM",
              "bus": "IDE",
              "name": "name-string"
            }
          ],
          "nics": [
            {
              "mac": "mac-string"
            }
          ],
          "memory": 1,
          "cpu": {
            "sockets": 1,
            "cores": 1
          },
          "vcpu": 1,
          "name": "name-string"
        },
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/import-content-library-vm-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"name\":\"name-string\",\"upload_tasks\":[\"-string\"],\"parsed_ovf\":{\"firmware\":\"BIOS\",\"disks\":[{\"size\":1,\"type\":\"CD_ROM\",\"bus\":\"IDE\",\"name\":\"name-string\"}],\"nics\":[{\"mac\":\"mac-string\"}],\"memory\":1,\"cpu\":{\"sockets\":1,\"cores\":1},\"vcpu\":1,\"name\":\"name-string\"},\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.import_content_library_vm_template([{\"name\":\"name-string\",\"upload_tasks\":[\"-string\"],\"parsed_ovf\":{\"firmware\":\"BIOS\",\"disks\":[{\"size\":1,\"type\":\"CD_ROM\",\"bus\":\"IDE\",\"name\":\"name-string\"}],\"nics\":[{\"mac\":\"mac-string\"}],\"memory\":1,\"cpu\":{\"sockets\":1,\"cores\":1},\"vcpu\":1,\"name\":\"name-string\"},\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewImportContentLibraryVMTemplateParams()\r\n    params.RequestBody = []*models.ContentLibraryVMTemplateImportParams{\n{\nName: pointy.String(\"name-string\"),\nUploadTasks: []string{\"-string\",\n},\nParsedOvf: &models.ParsedOvf{\nFirmware: models.VMFirmwareBIOS.Pointer(),\nDisks: []*models.OvfDisk{\n{\nSize: pointy.Int64(1),\nType: models.VMDiskTypeCD_ROM.Pointer(),\nBus: models.BusIDE.Pointer(),\nName: pointy.String(\"name-string\"),\n},\n},\nNics: []*models.OvfNic{\n{\nMac: pointy.String(\"mac-string\"),\n},\n},\nMemory: pointy.Int64(1),\nCPU: &models.OvfCPU{\nSockets: pointy.Int32(1),\nCores: pointy.Int32(1),\n},\nVcpu: pointy.Int32(1),\nName: pointy.String(\"name-string\"),\n},\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.ImportContentLibraryVMTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskContentLibraryVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        List<ContentLibraryVmTemplateImportParams> params = new ArrayList<>();\r\n        params.add(new ContentLibraryVmTemplateImportParams()\n.name(\"name-string\")\n.addUploadTasksItem(\"-string\")\n.parsedOvf(new ParsedOvf()\n.firmware(VmFirmware.fromValue(\"BIOS\"))\n.addDisksItem(new OvfDisk()\n.size(1L)\n.type(VmDiskType.fromValue(\"CD_ROM\"))\n.bus(Bus.fromValue(\"IDE\"))\n.name(\"name-string\"))\n.addNicsItem(new OvfNic()\n.mac(\"mac-string\"))\n.memory(1L)\n.cpu(new OvfCpu()\n.sockets(1)\n.cores(1))\n.vcpu(1)\n.name(\"name-string\"))\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskContentLibraryVmTemplate> resp = contentLibraryVmTemplateApi.importContentLibraryVmTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-datacenter": {
    "exampleValue": [
      {
        "organization_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-datacenter \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"organization_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, DatacenterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    datacenter_api = DatacenterApi(client)\r\n    resp = datacenter_api.create_datacenter([{\"organization_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/datacenter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        datacenter_api := client.Datacenter\r\n    params := datacenter.NewCreateDatacenterParams()\r\n    params.RequestBody = []*models.DatacenterCreationParams{\n{\nOrganizationID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := datacenter_api.CreateDatacenter(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDatacenter) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.DatacenterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DatacenterApi datacenterApi = new DatacenterApi(client);\r\n        List<DatacenterCreationParams> params = new ArrayList<>();\r\n        params.add(new DatacenterCreationParams()\n.organizationId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskDatacenter> resp = datacenterApi.createDatacenter(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-datacenter": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Datacenter-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-datacenter \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Datacenter-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DatacenterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    datacenter_api = DatacenterApi(client)\r\n    resp = datacenter_api.update_datacenter({\"data\":{},\"where\":{\"id\":\"Datacenter-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/datacenter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        datacenter_api := client.Datacenter\r\n    params := datacenter.NewUpdateDatacenterParams()\r\n    params.RequestBody = &models.DatacenterUpdationParams{\nData: &models.DatacenterUpdationParamsData{\n},\nWhere: &models.DatacenterWhereInput{\nID: pointy.String(\"Datacenter-id\"),\n},\n}\r\n    rawResp, err := datacenter_api.UpdateDatacenter(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDatacenter) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.DatacenterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DatacenterApi datacenterApi = new DatacenterApi(client);\r\n        DatacenterUpdationParams params = new DatacenterUpdationParams()\n.data(new DatacenterUpdationParamsData())\n.where(new DatacenterWhereInput()\n.id(\"Datacenter-id\"));\r\n        List<WithTaskDatacenter> resp = datacenterApi.updateDatacenter(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/add-clusters-to-datacenter": {
    "exampleValue": [
      {
        "data": {},
        "where": {
          "id": "Datacenter-id"
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/add-clusters-to-datacenter \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"data\":{},\"where\":{\"id\":\"Datacenter-id\"}}]'",
    "python": "from cloudtower import ApiClient, Configuration, DatacenterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    datacenter_api = DatacenterApi(client)\r\n    resp = datacenter_api.add_clusters_to_datacenter([{\"data\":{},\"where\":{\"id\":\"Datacenter-id\"}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/datacenter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        datacenter_api := client.Datacenter\r\n    params := datacenter.NewAddClustersToDatacenterParams()\r\n    params.RequestBody = []*models.AddClustersToDatacenterParams{\n{\nData: &models.AddClustersToDatacenterParamsData{\n},\nWhere: &models.DatacenterWhereUniqueInput{\nID: pointy.String(\"Datacenter-id\"),\n},\n},\n}\r\n    rawResp, err := datacenter_api.AddClustersToDatacenter(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDatacenter) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.DatacenterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DatacenterApi datacenterApi = new DatacenterApi(client);\r\n        List<AddClustersToDatacenterParams> params = new ArrayList<>();\r\n        params.add(new AddClustersToDatacenterParams()\n.data(new AddClustersToDatacenterParamsData())\n.where(new DatacenterWhereUniqueInput()\n.id(\"Datacenter-id\")));\r\n        List<WithTaskDatacenter> resp = datacenterApi.addClustersToDatacenter(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-clusters-from-datacenter": {
    "exampleValue": [
      {
        "data": {},
        "where": {
          "id": "Datacenter-id"
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-clusters-from-datacenter \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"data\":{},\"where\":{\"id\":\"Datacenter-id\"}}]'",
    "python": "from cloudtower import ApiClient, Configuration, DatacenterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    datacenter_api = DatacenterApi(client)\r\n    resp = datacenter_api.remove_clusters_from_datacenter([{\"data\":{},\"where\":{\"id\":\"Datacenter-id\"}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/datacenter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        datacenter_api := client.Datacenter\r\n    params := datacenter.NewRemoveClustersFromDatacenterParams()\r\n    params.RequestBody = []*models.RemoveClustersFromDatacenterParams{\n{\nData: &models.RemoveClustersFromDatacenterParamsData{\n},\nWhere: &models.DatacenterWhereUniqueInput{\nID: pointy.String(\"Datacenter-id\"),\n},\n},\n}\r\n    rawResp, err := datacenter_api.RemoveClustersFromDatacenter(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDatacenter) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.DatacenterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DatacenterApi datacenterApi = new DatacenterApi(client);\r\n        List<RemoveClustersFromDatacenterParams> params = new ArrayList<>();\r\n        params.add(new RemoveClustersFromDatacenterParams()\n.data(new RemoveClustersFromDatacenterParamsData())\n.where(new DatacenterWhereUniqueInput()\n.id(\"Datacenter-id\")));\r\n        List<WithTaskDatacenter> resp = datacenterApi.removeClustersFromDatacenter(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-datacenter": {
    "exampleValue": {
      "where": {
        "id": "Datacenter-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-datacenter \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Datacenter-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DatacenterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    datacenter_api = DatacenterApi(client)\r\n    resp = datacenter_api.delete_datacenter({\"where\":{\"id\":\"Datacenter-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/datacenter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        datacenter_api := client.Datacenter\r\n    params := datacenter.NewDeleteDatacenterParams()\r\n    params.RequestBody = &models.DatacenterDeletionParams{\nWhere: &models.DatacenterWhereInput{\nID: pointy.String(\"Datacenter-id\"),\n},\n}\r\n    rawResp, err := datacenter_api.DeleteDatacenter(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteDatacenter) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.DatacenterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DatacenterApi datacenterApi = new DatacenterApi(client);\r\n        DatacenterDeletionParams params = new DatacenterDeletionParams()\n.where(new DatacenterWhereInput()\n.id(\"Datacenter-id\"));\r\n        List<WithTaskDeleteDatacenter> resp = datacenterApi.deleteDatacenter(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/mount-disk": {
    "exampleValue": {
      "data": {
        "function": "CACHE"
      },
      "where": {
        "id": "Disk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/mount-disk \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"function\":\"CACHE\"},\"where\":{\"id\":\"Disk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DiskApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    disk_api = DiskApi(client)\r\n    resp = disk_api.mount_disk({\"data\":{\"function\":\"CACHE\"},\"where\":{\"id\":\"Disk-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/disk\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        disk_api := client.Disk\r\n    params := disk.NewMountDiskParams()\r\n    params.RequestBody = &models.DiskMountParams{\nData: &models.DiskMountParamsData{\nFunction: models.DiskFunctionCACHE.Pointer(),\n},\nWhere: &models.DiskWhereInput{\nID: pointy.String(\"Disk-id\"),\n},\n}\r\n    rawResp, err := disk_api.MountDisk(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDisk) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.DiskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DiskApi diskApi = new DiskApi(client);\r\n        DiskMountParams params = new DiskMountParams()\n.data(new DiskMountParamsData()\n.function(DiskFunction.fromValue(\"CACHE\")))\n.where(new DiskWhereInput()\n.id(\"Disk-id\"));\r\n        List<WithTaskDisk> resp = diskApi.mountDisk(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/unmount-disk": {
    "exampleValue": {
      "where": {
        "id": "Disk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/unmount-disk \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Disk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DiskApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    disk_api = DiskApi(client)\r\n    resp = disk_api.unmount_disk({\"where\":{\"id\":\"Disk-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/disk\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        disk_api := client.Disk\r\n    params := disk.NewUnmountDiskParams()\r\n    params.RequestBody = &models.DiskUnmountParams{\nWhere: &models.DiskWhereInput{\nID: pointy.String(\"Disk-id\"),\n},\n}\r\n    rawResp, err := disk_api.UnmountDisk(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDisk) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.DiskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DiskApi diskApi = new DiskApi(client);\r\n        DiskUnmountParams params = new DiskUnmountParams()\n.where(new DiskWhereInput()\n.id(\"Disk-id\"));\r\n        List<WithTaskDisk> resp = diskApi.unmountDisk(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-entity-filter": {
    "exampleValue": [
      {
        "rules": [
          {
            "threshold": 1,
            "quantile": 1,
            "op": "GT",
            "metric": "VM_CPU_USAGE",
            "duration": 1,
            "aggregation": "AVG"
          }
        ],
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-entity-filter \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"rules\":[{\"threshold\":1,\"quantile\":1,\"op\":\"GT\",\"metric\":\"VM_CPU_USAGE\",\"duration\":1,\"aggregation\":\"AVG\"}],\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, EntityFilterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    entity_filter_api = EntityFilterApi(client)\r\n    resp = entity_filter_api.create_entity_filter([{\"rules\":[{\"threshold\":1,\"quantile\":1,\"op\":\"GT\",\"metric\":\"VM_CPU_USAGE\",\"duration\":1,\"aggregation\":\"AVG\"}],\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/entity_filter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        entity_filter_api := client.EntityFilter\r\n    params := entity_filter.NewCreateEntityFilterParams()\r\n    params.RequestBody = []*models.EntityFilterCreationParams{\n{\nRules: []*models.FilterRuleInput{\n{\nThreshold: pointy.Float64(1),\nQuantile: pointy.Int32(1),\nOp: models.FilterRuleOpEnumGT.Pointer(),\nMetric: models.FilterRuleMetricEnumVM_CPU_USAGE.Pointer(),\nDuration: pointy.Int32(1),\nAggregation: models.FilterRuleAggregationEnumAVG.Pointer(),\n},\n},\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := entity_filter_api.CreateEntityFilter(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskEntityFilter) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.EntityFilterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EntityFilterApi entityFilterApi = new EntityFilterApi(client);\r\n        List<EntityFilterCreationParams> params = new ArrayList<>();\r\n        params.add(new EntityFilterCreationParams()\n.addRulesItem(new FilterRuleInput()\n.threshold(1D)\n.quantile(1)\n.op(FilterRuleOpEnum.fromValue(\"GT\"))\n.metric(FilterRuleMetricEnum.fromValue(\"VM_CPU_USAGE\"))\n.duration(1)\n.aggregation(FilterRuleAggregationEnum.fromValue(\"AVG\")))\n.name(\"name-string\"));\r\n        List<WithTaskEntityFilter> resp = entityFilterApi.createEntityFilter(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-entity-filter": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "EntityFilter-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-entity-filter \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"EntityFilter-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EntityFilterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    entity_filter_api = EntityFilterApi(client)\r\n    resp = entity_filter_api.update_entity_filter({\"data\":{},\"where\":{\"id\":\"EntityFilter-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/entity_filter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        entity_filter_api := client.EntityFilter\r\n    params := entity_filter.NewUpdateEntityFilterParams()\r\n    params.RequestBody = &models.EntityFilterUpdationParams{\nData: &models.EntityFilterUpdationParamsData{\n},\nWhere: &models.EntityFilterWhereInput{\nID: pointy.String(\"EntityFilter-id\"),\n},\n}\r\n    rawResp, err := entity_filter_api.UpdateEntityFilter(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskEntityFilter) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.EntityFilterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EntityFilterApi entityFilterApi = new EntityFilterApi(client);\r\n        EntityFilterUpdationParams params = new EntityFilterUpdationParams()\n.data(new EntityFilterUpdationParamsData())\n.where(new EntityFilterWhereInput()\n.id(\"EntityFilter-id\"));\r\n        List<WithTaskEntityFilter> resp = entityFilterApi.updateEntityFilter(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-entity-filter": {
    "exampleValue": {
      "where": {
        "id": "EntityFilter-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-entity-filter \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EntityFilter-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EntityFilterApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    entity_filter_api = EntityFilterApi(client)\r\n    resp = entity_filter_api.delete_entity_filter({\"where\":{\"id\":\"EntityFilter-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/entity_filter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        entity_filter_api := client.EntityFilter\r\n    params := entity_filter.NewDeleteEntityFilterParams()\r\n    params.RequestBody = &models.EntityFilterDeletionParams{\nWhere: &models.EntityFilterWhereInput{\nID: pointy.String(\"EntityFilter-id\"),\n},\n}\r\n    rawResp, err := entity_filter_api.DeleteEntityFilter(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteEntityFilter) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.EntityFilterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EntityFilterApi entityFilterApi = new EntityFilterApi(client);\r\n        EntityFilterDeletionParams params = new EntityFilterDeletionParams()\n.where(new EntityFilterWhereInput()\n.id(\"EntityFilter-id\"));\r\n        List<WithTaskDeleteEntityFilter> resp = entityFilterApi.deleteEntityFilter(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-gpu-device-usage": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "GpuDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-gpu-device-usage \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"GpuDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GpuDeviceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    gpu_device_api = GpuDeviceApi(client)\r\n    resp = gpu_device_api.update_gpu_device_usage({\"data\":{},\"where\":{\"id\":\"GpuDevice-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/gpu_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        gpu_device_api := client.GpuDevice\r\n    params := gpu_device.NewUpdateGpuDeviceUsageParams()\r\n    params.RequestBody = &models.GpuDeviceUsageUpdationParams{\nData: &models.GpuDeviceUsageUpdationParamsData{\n},\nWhere: &models.GpuDeviceWhereInput{\nID: pointy.String(\"GpuDevice-id\"),\n},\n}\r\n    rawResp, err := gpu_device_api.UpdateGpuDeviceUsage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskGpuDevice) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GpuDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GpuDeviceApi gpuDeviceApi = new GpuDeviceApi(client);\r\n        GpuDeviceUsageUpdationParams params = new GpuDeviceUsageUpdationParams()\n.data(new GpuDeviceUsageUpdationParamsData())\n.where(new GpuDeviceWhereInput()\n.id(\"GpuDevice-id\"));\r\n        List<WithTaskGpuDevice> resp = gpuDeviceApi.updateGpuDeviceUsage(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-gpu-device-description": {
    "exampleValue": {
      "data": {
        "description": "description-string"
      },
      "where": {
        "id": "GpuDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-gpu-device-description \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"description\":\"description-string\"},\"where\":{\"id\":\"GpuDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GpuDeviceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    gpu_device_api = GpuDeviceApi(client)\r\n    resp = gpu_device_api.update_gpu_device_description({\"data\":{\"description\":\"description-string\"},\"where\":{\"id\":\"GpuDevice-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/gpu_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        gpu_device_api := client.GpuDevice\r\n    params := gpu_device.NewUpdateGpuDeviceDescriptionParams()\r\n    params.RequestBody = &models.GpuDeviceDescriptionUpdationParams{\nData: &models.GpuDeviceDescriptionUpdationParamsData{\nDescription: pointy.String(\"description-string\"),\n},\nWhere: &models.GpuDeviceWhereInput{\nID: pointy.String(\"GpuDevice-id\"),\n},\n}\r\n    rawResp, err := gpu_device_api.UpdateGpuDeviceDescription(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskGpuDevice) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GpuDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GpuDeviceApi gpuDeviceApi = new GpuDeviceApi(client);\r\n        GpuDeviceDescriptionUpdationParams params = new GpuDeviceDescriptionUpdationParams()\n.data(new GpuDeviceDescriptionUpdationParamsData()\n.description(\"description-string\"))\n.where(new GpuDeviceWhereInput()\n.id(\"GpuDevice-id\"));\r\n        List<WithTaskGpuDevice> resp = gpuDeviceApi.updateGpuDeviceDescription(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/switch-gpu-device-sriov": {
    "exampleValue": {
      "data": {
        "enable": true
      },
      "where": {
        "id": "GpuDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/switch-gpu-device-sriov \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"enable\":true},\"where\":{\"id\":\"GpuDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GpuDeviceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    gpu_device_api = GpuDeviceApi(client)\r\n    resp = gpu_device_api.switch_gpu_device_sriov({\"data\":{\"enable\":True},\"where\":{\"id\":\"GpuDevice-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/gpu_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        gpu_device_api := client.GpuDevice\r\n    params := gpu_device.NewSwitchGpuDeviceSriovParams()\r\n    params.RequestBody = &models.GpuDeviceSriovSwitchParams{\nData: &models.GpuDeviceSriovSwitchParamsData{\nEnable: pointy.Bool(true),\n},\nWhere: &models.GpuDeviceWhereInput{\nID: pointy.String(\"GpuDevice-id\"),\n},\n}\r\n    rawResp, err := gpu_device_api.SwitchGpuDeviceSriov(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskGpuDevice) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GpuDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GpuDeviceApi gpuDeviceApi = new GpuDeviceApi(client);\r\n        GpuDeviceSriovSwitchParams params = new GpuDeviceSriovSwitchParams()\n.data(new GpuDeviceSriovSwitchParamsData()\n.enable(true))\n.where(new GpuDeviceWhereInput()\n.id(\"GpuDevice-id\"));\r\n        List<WithTaskGpuDevice> resp = gpuDeviceApi.switchGpuDeviceSriov(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-detail-vm-info-by-gpu-devices": {
    "exampleValue": {
      "where": {
        "id": "GpuDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-detail-vm-info-by-gpu-devices \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"GpuDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GpuDeviceApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    gpu_device_api = GpuDeviceApi(client)\r\n    resp = gpu_device_api.get_detail_vm_info_by_gpu_devices({\"where\":{\"id\":\"GpuDevice-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/gpu_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        gpu_device_api := client.GpuDevice\r\n    params := gpu_device.NewGetDetailVMInfoByGpuDevicesParams()\r\n    params.RequestBody = &models.GetGpuDevicesRequestBody{\nWhere: &models.GpuDeviceWhereInput{\nID: pointy.String(\"GpuDevice-id\"),\n},\n}\r\n    rawResp, err := gpu_device_api.GetDetailVMInfoByGpuDevices(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GpuDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GpuDeviceApi gpuDeviceApi = new GpuDeviceApi(client);\r\n        GetGpuDevicesRequestBody params = new GetGpuDevicesRequestBody()\n.where(new GpuDeviceWhereInput()\n.id(\"GpuDevice-id\"));\r\n        List<GpuVmInfo> resp = gpuDeviceApi.getDetailVmInfoByGpuDevices(params);\r\n    }\r\n}"
  },
  "/create-graph": {
    "exampleValue": [
      {
        "type": "AREA",
        "resource_type": "resource_type-string",
        "view_id": "ck74rk21wg5lz0786opdnzz5m",
        "title": "title-string",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "connect_id": [
          "-string"
        ],
        "metric_name": "metric_name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-graph \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"type\":\"AREA\",\"resource_type\":\"resource_type-string\",\"view_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"title\":\"title-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"connect_id\":[\"-string\"],\"metric_name\":\"metric_name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, GraphApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    graph_api = GraphApi(client)\r\n    resp = graph_api.create_graph([{\"type\":\"AREA\",\"resource_type\":\"resource_type-string\",\"view_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"title\":\"title-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"connect_id\":[\"-string\"],\"metric_name\":\"metric_name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/graph\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        graph_api := client.Graph\r\n    params := graph.NewCreateGraphParams()\r\n    params.RequestBody = []*models.GraphCreationParams{\n{\nType: models.GraphTypeAREA.Pointer(),\nResourceType: pointy.String(\"resource_type-string\"),\nViewID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nTitle: pointy.String(\"title-string\"),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nConnectID: []string{\"-string\",\n},\nMetricName: pointy.String(\"metric_name-string\"),\n},\n}\r\n    rawResp, err := graph_api.CreateGraph(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskGraph) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GraphApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GraphApi graphApi = new GraphApi(client);\r\n        List<GraphCreationParams> params = new ArrayList<>();\r\n        params.add(new GraphCreationParams()\n.type(GraphType.fromValue(\"AREA\"))\n.resourceType(\"resource_type-string\")\n.viewId(\"ck74rk21wg5lz0786opdnzz5m\")\n.title(\"title-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.addConnectIdItem(\"-string\")\n.metricName(\"metric_name-string\"));\r\n        List<WithTaskGraph> resp = graphApi.createGraph(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-graph": {
    "exampleValue": {
      "where": {
        "id": "Graph-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-graph \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Graph-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GraphApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    graph_api = GraphApi(client)\r\n    resp = graph_api.update_graph({\"where\":{\"id\":\"Graph-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/graph\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        graph_api := client.Graph\r\n    params := graph.NewUpdateGraphParams()\r\n    params.RequestBody = &models.GraphUpdationParams{\nWhere: &models.GraphWhereInput{\nID: pointy.String(\"Graph-id\"),\n},\n}\r\n    rawResp, err := graph_api.UpdateGraph(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskGraph) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GraphApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GraphApi graphApi = new GraphApi(client);\r\n        GraphUpdationParams params = new GraphUpdationParams()\n.where(new GraphWhereInput()\n.id(\"Graph-id\"));\r\n        List<WithTaskGraph> resp = graphApi.updateGraph(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-graph": {
    "exampleValue": {
      "where": {
        "id": "Graph-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-graph \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Graph-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GraphApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    graph_api = GraphApi(client)\r\n    resp = graph_api.delete_graph({\"where\":{\"id\":\"Graph-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/graph\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        graph_api := client.Graph\r\n    params := graph.NewDeleteGraphParams()\r\n    params.RequestBody = &models.GraphDeletionParams{\nWhere: &models.GraphWhereInput{\nID: pointy.String(\"Graph-id\"),\n},\n}\r\n    rawResp, err := graph_api.DeleteGraph(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteGraph) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GraphApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GraphApi graphApi = new GraphApi(client);\r\n        GraphDeletionParams params = new GraphDeletionParams()\n.where(new GraphWhereInput()\n.id(\"Graph-id\"));\r\n        List<WithTaskDeleteGraph> resp = graphApi.deleteGraph(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-host": {
    "exampleValue": [
      {
        "data": [
          {
            "ifaces": [
              {
                "netmask": "netmask-string",
                "name": [
                  "-string"
                ],
                "ip": "ip-string",
                "gateway_ip": "gateway_ip-string",
                "function": "ACCESS"
              }
            ],
            "disks": [
              {
                "drive": "drive-string"
              }
            ],
            "hostname": "hostname-string",
            "host_uuid": "ck74rk21wg5lz0786opdnzz5m",
            "host_ip": "host_ip-string"
          }
        ],
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-host \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"data\":[{\"ifaces\":[{\"netmask\":\"netmask-string\",\"name\":[\"-string\"],\"ip\":\"ip-string\",\"gateway_ip\":\"gateway_ip-string\",\"function\":\"ACCESS\"}],\"disks\":[{\"drive\":\"drive-string\"}],\"hostname\":\"hostname-string\",\"host_uuid\":\"ck74rk21wg5lz0786opdnzz5m\",\"host_ip\":\"host_ip-string\"}],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.create_host([{\"data\":[{\"ifaces\":[{\"netmask\":\"netmask-string\",\"name\":[\"-string\"],\"ip\":\"ip-string\",\"gateway_ip\":\"gateway_ip-string\",\"function\":\"ACCESS\"}],\"disks\":[{\"drive\":\"drive-string\"}],\"hostname\":\"hostname-string\",\"host_uuid\":\"ck74rk21wg5lz0786opdnzz5m\",\"host_ip\":\"host_ip-string\"}],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewCreateHostParams()\r\n    params.RequestBody = []*models.HostCreationParams{\n{\nData: []*models.HostCreationParamsData{\n{\nIfaces: []*models.HostBatchCreateIfaceInput{\n{\nNetmask: pointy.String(\"netmask-string\"),\nName: []string{\"-string\",\n},\nIP: pointy.String(\"ip-string\"),\nGatewayIP: pointy.String(\"gateway_ip-string\"),\nFunction: models.HostBatchCreateIfaceFunctionACCESS.Pointer(),\n},\n},\nDisks: []*models.HostBatchCreateDiskInput{\n{\nDrive: pointy.String(\"drive-string\"),\n},\n},\nHostname: pointy.String(\"hostname-string\"),\nHostUUID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nHostIP: pointy.String(\"host_ip-string\"),\n},\n},\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := host_api.CreateHost(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskBatchHosts) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        List<HostCreationParams> params = new ArrayList<>();\r\n        params.add(new HostCreationParams()\n.addDataItem(new HostCreationParamsData()\n.addIfacesItem(new HostBatchCreateIfaceInput()\n.netmask(\"netmask-string\")\n.addNameItem(\"-string\")\n.ip(\"ip-string\")\n.gatewayIp(\"gateway_ip-string\")\n.function(HostBatchCreateIfaceFunction.fromValue(\"ACCESS\")))\n.addDisksItem(new HostBatchCreateDiskInput()\n.drive(\"drive-string\"))\n.hostname(\"hostname-string\")\n.hostUuid(\"ck74rk21wg5lz0786opdnzz5m\")\n.hostIp(\"host_ip-string\"))\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskBatchHosts> resp = hostApi.createHost(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/trigger-disk-blink": {
    "exampleValue": [
      {
        "disk_name": "disk_name-string",
        "host_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/trigger-disk-blink \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"disk_name\":\"disk_name-string\",\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.trigger_disk_blink([{\"disk_name\":\"disk_name-string\",\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewTriggerDiskBlinkParams()\r\n    params.RequestBody = []*models.TriggerDiskBlinkParams{\n{\nDiskName: pointy.String(\"disk_name-string\"),\nHostID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := host_api.TriggerDiskBlink(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskHost) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        List<TriggerDiskBlinkParams> params = new ArrayList<>();\r\n        params.add(new TriggerDiskBlinkParams()\n.diskName(\"disk_name-string\")\n.hostId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskHost> resp = hostApi.triggerDiskBlink(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-host": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Host-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-host \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Host-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.update_host({\"data\":{},\"where\":{\"id\":\"Host-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewUpdateHostParams()\r\n    params.RequestBody = &models.HostUpdationParams{\nData: &models.HostUpdationParamsData{\n},\nWhere: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\n}\r\n    rawResp, err := host_api.UpdateHost(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskHost) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        HostUpdationParams params = new HostUpdationParams()\n.data(new HostUpdationParamsData())\n.where(new HostWhereInput()\n.id(\"Host-id\"));\r\n        List<WithTaskHost> resp = hostApi.updateHost(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/operate-host-power": {
    "exampleValue": {
      "data": {
        "force": true,
        "action": "poweroff"
      },
      "where": {
        "host_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/operate-host-power \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"force\":true,\"action\":\"poweroff\"},\"where\":{\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.power_off_host({\"data\":{\"force\":True,\"action\":\"poweroff\"},\"where\":{\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewPowerOffHostParams()\r\n    params.RequestBody = &models.OperateHostPowerParams{\nData: &models.OperateHostPowerData{\nForce: pointy.Bool(true),\nAction: models.OperateActionEnumpoweroff.Pointer(),\n},\nWhere: &models.OperateHostPowerParamsWhere{\nHostID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := host_api.PowerOffHost(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        OperateHostPowerParams params = new OperateHostPowerParams()\n.data(new OperateHostPowerData()\n.force(true)\n.action(OperateActionEnum.fromValue(\"poweroff\")))\n.where(new OperateHostPowerParamsWhere()\n.hostId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        WithTaskHost resp = hostApi.powerOffHost(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/enter-maintenance-mode-precheck": {
    "exampleValue": {
      "where": {
        "id": "Host-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/enter-maintenance-mode-precheck \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Host-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.enter_maintenance_mode_pre_check({\"where\":{\"id\":\"Host-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewEnterMaintenanceModePreCheckParams()\r\n    params.RequestBody = &models.EnterMaintenanceModeCheckParams{\nWhere: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\n}\r\n    rawResp, err := host_api.EnterMaintenanceModePreCheck(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        EnterMaintenanceModeCheckParams params = new EnterMaintenanceModeCheckParams()\n.where(new HostWhereInput()\n.id(\"Host-id\"));\r\n        EnterMaintenanceModeCheckResult resp = hostApi.enterMaintenanceModePreCheck(params);\r\n    }\r\n}"
  },
  "/enter-maintance-mode-precheck-result": {
    "exampleValue": {
      "where": {
        "task_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/enter-maintance-mode-precheck-result \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"task_id\":\"ck74rk21wg5lz0786opdnzz5m\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.enter_maintenance_mode_precheck_result({\"where\":{\"task_id\":\"ck74rk21wg5lz0786opdnzz5m\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewEnterMaintenanceModePrecheckResultParams()\r\n    params.RequestBody = &models.EnterMaintenanceModeResultParams{\nWhere: &models.EnterMaintenanceModeResultParamsWhere{\nTaskID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := host_api.EnterMaintenanceModePrecheckResult(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        EnterMaintenanceModeResultParams params = new EnterMaintenanceModeResultParams()\n.where(new EnterMaintenanceModeResultParamsWhere()\n.taskId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        EnterMaintenanceModeResult resp = hostApi.enterMaintenanceModePrecheckResult(params);\r\n    }\r\n}"
  },
  "/enter-maintance-mode": {
    "exampleValue": {
      "data": {},
      "where": {
        "host_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/enter-maintance-mode \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.enter_maintenance_mode({\"data\":{},\"where\":{\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewEnterMaintenanceModeParams()\r\n    params.RequestBody = &models.EnterMaintenanceModeParams{\nData: &models.EnterMaintenanceModeInput{\n},\nWhere: &models.EnterMaintenanceModeParamsWhere{\nHostID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := host_api.EnterMaintenanceMode(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        EnterMaintenanceModeParams params = new EnterMaintenanceModeParams()\n.data(new EnterMaintenanceModeInput())\n.where(new EnterMaintenanceModeParamsWhere()\n.hostId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        WithTaskHost resp = hostApi.enterMaintenanceMode(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/exit-maintance-mode-precheck-result": {
    "exampleValue": {
      "where": {
        "id": "Host-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/exit-maintance-mode-precheck-result \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Host-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.exit_maintenance_mode_precheck_result({\"where\":{\"id\":\"Host-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewExitMaintenanceModePrecheckResultParams()\r\n    params.RequestBody = &models.ExitMaintenanceModeResultParams{\nWhere: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\n}\r\n    rawResp, err := host_api.ExitMaintenanceModePrecheckResult(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        ExitMaintenanceModeResultParams params = new ExitMaintenanceModeResultParams()\n.where(new HostWhereInput()\n.id(\"Host-id\"));\r\n        ExitMaintenanceModeResult resp = hostApi.exitMaintenanceModePrecheckResult(params);\r\n    }\r\n}"
  },
  "/exit-maintance-mode": {
    "exampleValue": {
      "data": {},
      "where": {
        "host_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/exit-maintance-mode \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.exit_maintenance_mode({\"data\":{},\"where\":{\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewExitMaintenanceModeParams()\r\n    params.RequestBody = &models.ExitMaintenanceModeParams{\nData: &models.ExitMaintenanceModeInput{\n},\nWhere: &models.ExitMaintenanceModeParamsWhere{\nHostID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := host_api.ExitMaintenanceMode(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        ExitMaintenanceModeParams params = new ExitMaintenanceModeParams()\n.data(new ExitMaintenanceModeInput())\n.where(new ExitMaintenanceModeParamsWhere()\n.hostId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        WithTaskHost resp = hostApi.exitMaintenanceMode(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/create-iscsi-lun-snapshot": {
    "exampleValue": [
      {
        "iscsi_target_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "iscsi_lun_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-iscsi-lun-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"iscsi_target_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"iscsi_lun_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_snapshot_api = IscsiLunSnapshotApi(client)\r\n    resp = iscsi_lun_snapshot_api.create_iscsi_lun_snapshot([{\"iscsi_target_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"iscsi_lun_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_snapshot_api := client.IscsiLunSnapshot\r\n    params := iscsi_lun_snapshot.NewCreateIscsiLunSnapshotParams()\r\n    params.RequestBody = []*models.IscsiLunSnapshotCreationParams{\n{\nIscsiTargetID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nIscsiLunID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := iscsi_lun_snapshot_api.CreateIscsiLunSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskIscsiLunSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiLunSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunSnapshotApi iscsiLunSnapshotApi = new IscsiLunSnapshotApi(client);\r\n        List<IscsiLunSnapshotCreationParams> params = new ArrayList<>();\r\n        params.add(new IscsiLunSnapshotCreationParams()\n.iscsiTargetId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.iscsiLunId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskIscsiLunSnapshot> resp = iscsiLunSnapshotApi.createIscsiLunSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-iscsi-lun-snapshot": {
    "exampleValue": {
      "where": {
        "id": "IscsiLunSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-iscsi-lun-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiLunSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_snapshot_api = IscsiLunSnapshotApi(client)\r\n    resp = iscsi_lun_snapshot_api.delete_iscsi_lun_snapshot({\"where\":{\"id\":\"IscsiLunSnapshot-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_snapshot_api := client.IscsiLunSnapshot\r\n    params := iscsi_lun_snapshot.NewDeleteIscsiLunSnapshotParams()\r\n    params.RequestBody = &models.IscsiLunSnapshotDeletionParams{\nWhere: &models.IscsiLunSnapshotWhereInput{\nID: pointy.String(\"IscsiLunSnapshot-id\"),\n},\n}\r\n    rawResp, err := iscsi_lun_snapshot_api.DeleteIscsiLunSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteIscsiLunSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiLunSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunSnapshotApi iscsiLunSnapshotApi = new IscsiLunSnapshotApi(client);\r\n        IscsiLunSnapshotDeletionParams params = new IscsiLunSnapshotDeletionParams()\n.where(new IscsiLunSnapshotWhereInput()\n.id(\"IscsiLunSnapshot-id\"));\r\n        List<WithTaskDeleteIscsiLunSnapshot> resp = iscsiLunSnapshotApi.deleteIscsiLunSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-iscsi-lun": {
    "exampleValue": [
      {
        "assigned_size": 1,
        "replica_num": 1,
        "iscsi_target_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-iscsi-lun \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"assigned_size\":1,\"replica_num\":1,\"iscsi_target_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_api = IscsiLunApi(client)\r\n    resp = iscsi_lun_api.create_iscsi_lun([{\"assigned_size\":1,\"replica_num\":1,\"iscsi_target_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_api := client.IscsiLun\r\n    params := iscsi_lun.NewCreateIscsiLunParams()\r\n    params.RequestBody = []*models.IscsiLunCreationParams{\n{\nAssignedSize: pointy.Int64(1),\nReplicaNum: pointy.Int32(1),\nIscsiTargetID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := iscsi_lun_api.CreateIscsiLun(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskIscsiLun) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiLunApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunApi iscsiLunApi = new IscsiLunApi(client);\r\n        List<IscsiLunCreationParams> params = new ArrayList<>();\r\n        params.add(new IscsiLunCreationParams()\n.assignedSize(1L)\n.replicaNum(1)\n.iscsiTargetId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskIscsiLun> resp = iscsiLunApi.createIscsiLun(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-iscsi-lun": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "IscsiLun-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-iscsi-lun \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"IscsiLun-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_api = IscsiLunApi(client)\r\n    resp = iscsi_lun_api.update_iscsi_lun({\"data\":{},\"where\":{\"id\":\"IscsiLun-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_api := client.IscsiLun\r\n    params := iscsi_lun.NewUpdateIscsiLunParams()\r\n    params.RequestBody = &models.IscsiLunUpdationParams{\nData: &models.IscsiLunUpdationParamsData{\n},\nWhere: &models.IscsiLunWhereInput{\nID: pointy.String(\"IscsiLun-id\"),\n},\n}\r\n    rawResp, err := iscsi_lun_api.UpdateIscsiLun(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskIscsiLun) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiLunApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunApi iscsiLunApi = new IscsiLunApi(client);\r\n        IscsiLunUpdationParams params = new IscsiLunUpdationParams()\n.data(new IscsiLunUpdationParamsData())\n.where(new IscsiLunWhereInput()\n.id(\"IscsiLun-id\"));\r\n        List<WithTaskIscsiLun> resp = iscsiLunApi.updateIscsiLun(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-iscsi-lun": {
    "exampleValue": {
      "data": {
        "remove_snapshot": true
      },
      "where": {
        "id": "IscsiLun-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-iscsi-lun \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"remove_snapshot\":true},\"where\":{\"id\":\"IscsiLun-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_api = IscsiLunApi(client)\r\n    resp = iscsi_lun_api.delete_iscsi_lun({\"data\":{\"remove_snapshot\":True},\"where\":{\"id\":\"IscsiLun-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_api := client.IscsiLun\r\n    params := iscsi_lun.NewDeleteIscsiLunParams()\r\n    params.RequestBody = &models.IscsiLunDeletionParams{\nData: &models.IscsiLunDeletionParamsData{\nRemoveSnapshot: pointy.Bool(true),\n},\nWhere: &models.IscsiLunWhereInput{\nID: pointy.String(\"IscsiLun-id\"),\n},\n}\r\n    rawResp, err := iscsi_lun_api.DeleteIscsiLun(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteIscsiLun) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiLunApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunApi iscsiLunApi = new IscsiLunApi(client);\r\n        IscsiLunDeletionParams params = new IscsiLunDeletionParams()\n.data(new IscsiLunDeletionParamsData()\n.removeSnapshot(true))\n.where(new IscsiLunWhereInput()\n.id(\"IscsiLun-id\"));\r\n        List<WithTaskDeleteIscsiLun> resp = iscsiLunApi.deleteIscsiLun(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/clone-iscsi-lun-from-snapshot": {
    "exampleValue": [
      {
        "iscsi_target_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "snapshot_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/clone-iscsi-lun-from-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"iscsi_target_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_api = IscsiLunApi(client)\r\n    resp = iscsi_lun_api.clone_iscsi_lun_from_snapshot([{\"iscsi_target_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_api := client.IscsiLun\r\n    params := iscsi_lun.NewCloneIscsiLunFromSnapshotParams()\r\n    params.RequestBody = []*models.IscsiLunCloneParams{\n{\nIscsiTargetID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nSnapshotID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := iscsi_lun_api.CloneIscsiLunFromSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskIscsiLun) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiLunApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunApi iscsiLunApi = new IscsiLunApi(client);\r\n        List<IscsiLunCloneParams> params = new ArrayList<>();\r\n        params.add(new IscsiLunCloneParams()\n.iscsiTargetId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.snapshotId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskIscsiLun> resp = iscsiLunApi.cloneIscsiLunFromSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/rollback-iscsi-lun-from-snapshot": {
    "exampleValue": [
      {
        "lun_id": "ck74rk21wg5lz0786opdnzz5m",
        "snapshot_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/rollback-iscsi-lun-from-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"lun_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_api = IscsiLunApi(client)\r\n    resp = iscsi_lun_api.rollback_iscsi_lun_from_snapshot([{\"lun_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_api := client.IscsiLun\r\n    params := iscsi_lun.NewRollbackIscsiLunFromSnapshotParams()\r\n    params.RequestBody = []*models.IscsiLunRollbackParams{\n{\nLunID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nSnapshotID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := iscsi_lun_api.RollbackIscsiLunFromSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskIscsiLun) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiLunApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunApi iscsiLunApi = new IscsiLunApi(client);\r\n        List<IscsiLunRollbackParams> params = new ArrayList<>();\r\n        params.add(new IscsiLunRollbackParams()\n.lunId(\"ck74rk21wg5lz0786opdnzz5m\")\n.snapshotId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskIscsiLun> resp = iscsiLunApi.rollbackIscsiLunFromSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/copy-iscsi-lun": {
    "exampleValue": [
      {
        "name": "name-string",
        "src_lun_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/copy-iscsi-lun \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"name\":\"name-string\",\"src_lun_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_api = IscsiLunApi(client)\r\n    resp = iscsi_lun_api.copy_iscsi_lun([{\"name\":\"name-string\",\"src_lun_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_api := client.IscsiLun\r\n    params := iscsi_lun.NewCopyIscsiLunParams()\r\n    params.RequestBody = []*models.CopyIscsiLunParams{\n{\nName: pointy.String(\"name-string\"),\nSrcLunID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := iscsi_lun_api.CopyIscsiLun(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskIscsiLun) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiLunApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunApi iscsiLunApi = new IscsiLunApi(client);\r\n        List<CopyIscsiLunParams> params = new ArrayList<>();\r\n        params.add(new CopyIscsiLunParams()\n.name(\"name-string\")\n.srcLunId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskIscsiLun> resp = iscsiLunApi.copyIscsiLun(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-iscsi-target": {
    "exampleValue": [
      {
        "stripe_size": 1,
        "stripe_num": 1,
        "replica_num": 1,
        "thin_provision": true,
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-iscsi-target \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"stripe_size\":1,\"stripe_num\":1,\"replica_num\":1,\"thin_provision\":true,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiTargetApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_target_api = IscsiTargetApi(client)\r\n    resp = iscsi_target_api.create_iscsi_target([{\"stripe_size\":1,\"stripe_num\":1,\"replica_num\":1,\"thin_provision\":True,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_target\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_target_api := client.IscsiTarget\r\n    params := iscsi_target.NewCreateIscsiTargetParams()\r\n    params.RequestBody = []*models.IscsiTargetCreationParams{\n{\nStripeSize: pointy.Int64(1),\nStripeNum: pointy.Int32(1),\nReplicaNum: pointy.Int32(1),\nThinProvision: pointy.Bool(true),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := iscsi_target_api.CreateIscsiTarget(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskIscsiTarget) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiTargetApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiTargetApi iscsiTargetApi = new IscsiTargetApi(client);\r\n        List<IscsiTargetCreationParams> params = new ArrayList<>();\r\n        params.add(new IscsiTargetCreationParams()\n.stripeSize(1L)\n.stripeNum(1)\n.replicaNum(1)\n.thinProvision(true)\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskIscsiTarget> resp = iscsiTargetApi.createIscsiTarget(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-iscsi-target": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "IscsiTarget-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-iscsi-target \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"IscsiTarget-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiTargetApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_target_api = IscsiTargetApi(client)\r\n    resp = iscsi_target_api.update_iscsi_target({\"data\":{},\"where\":{\"id\":\"IscsiTarget-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_target\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_target_api := client.IscsiTarget\r\n    params := iscsi_target.NewUpdateIscsiTargetParams()\r\n    params.RequestBody = &models.IscsiTargetUpdationParams{\nData: &models.IscsiTargetCommonParams{\n},\nWhere: &models.IscsiTargetWhereInput{\nID: pointy.String(\"IscsiTarget-id\"),\n},\n}\r\n    rawResp, err := iscsi_target_api.UpdateIscsiTarget(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskIscsiTarget) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiTargetApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiTargetApi iscsiTargetApi = new IscsiTargetApi(client);\r\n        IscsiTargetUpdationParams params = new IscsiTargetUpdationParams()\n.data(new IscsiTargetCommonParams())\n.where(new IscsiTargetWhereInput()\n.id(\"IscsiTarget-id\"));\r\n        List<WithTaskIscsiTarget> resp = iscsiTargetApi.updateIscsiTarget(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-iscsi-target": {
    "exampleValue": {
      "where": {
        "id": "IscsiTarget-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-iscsi-target \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiTarget-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiTargetApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_target_api = IscsiTargetApi(client)\r\n    resp = iscsi_target_api.delete_iscsi_target({\"where\":{\"id\":\"IscsiTarget-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_target\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_target_api := client.IscsiTarget\r\n    params := iscsi_target.NewDeleteIscsiTargetParams()\r\n    params.RequestBody = &models.IscsiTargetDeletionParams{\nWhere: &models.IscsiTargetWhereInput{\nID: pointy.String(\"IscsiTarget-id\"),\n},\n}\r\n    rawResp, err := iscsi_target_api.DeleteIscsiTarget(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteIscsiTarget) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.IscsiTargetApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiTargetApi iscsiTargetApi = new IscsiTargetApi(client);\r\n        IscsiTargetDeletionParams params = new IscsiTargetDeletionParams()\n.where(new IscsiTargetWhereInput()\n.id(\"IscsiTarget-id\"));\r\n        List<WithTaskDeleteIscsiTarget> resp = iscsiTargetApi.deleteIscsiTarget(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/upload-elf-image": {
    "exampleValue": {
      "file": "file-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/upload-elf-image \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: multipart/form-data' \\\n\t-d '{\"file\":\"file-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_image_api = ElfImageApi(client)\r\n    with open(\"file-path\", \"rb\") as file:\r\n        resp = elf_image_api.create_elf_image(\r\n            file=file\r\n        )\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"bytes\"\r\n    \"fmt\"\r\n    \"io\"\r\n\r\n    \"github.com/go-openapi/runtime\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_image_api := client.ElfImage\r\n    params := elf_image.NewCreateElfImageParams()\r\n    params.File = runtime.NamedReader(\"file\",io.NopCloser(bytes.NewReader([]byte(\"file-string\"))))\r\n    resp, err := elf_image_api.CreateElfImage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ElfImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfImageApi elfImageApi = new ElfImageApi(client);\r\n        List<UploadTask> resp = elfImageApi.createElfImage(\r\n            Files.readAllBytes(Path.of(\"file-string\")),\r\n            \"cluster_id\",\r\n            \"name\",\r\n            \"size\",\r\n            \"size_unit\",\r\n            \"description\",\r\n            \"upload_task_id\"\r\n        );\r\n    }\r\n}"
  },
  "/update-elf-image": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "ElfImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-elf-image \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"ElfImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfImageApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_image_api = ElfImageApi(client)\r\n    resp = elf_image_api.update_elf_image({\"data\":{},\"where\":{\"id\":\"ElfImage-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_image_api := client.ElfImage\r\n    params := elf_image.NewUpdateElfImageParams()\r\n    params.RequestBody = &models.ElfImageUpdationParams{\nData: &models.ElfImageUpdationParamsData{\n},\nWhere: &models.ElfImageWhereInput{\nID: pointy.String(\"ElfImage-id\"),\n},\n}\r\n    rawResp, err := elf_image_api.UpdateElfImage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskElfImage) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ElfImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfImageApi elfImageApi = new ElfImageApi(client);\r\n        ElfImageUpdationParams params = new ElfImageUpdationParams()\n.data(new ElfImageUpdationParamsData())\n.where(new ElfImageWhereInput()\n.id(\"ElfImage-id\"));\r\n        List<WithTaskElfImage> resp = elfImageApi.updateElfImage(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-elf-image": {
    "exampleValue": {
      "where": {
        "id": "ElfImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-elf-image \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ElfImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfImageApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_image_api = ElfImageApi(client)\r\n    resp = elf_image_api.delete_elf_image({\"where\":{\"id\":\"ElfImage-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_image_api := client.ElfImage\r\n    params := elf_image.NewDeleteElfImageParams()\r\n    params.RequestBody = &models.ElfImageDeletionParams{\nWhere: &models.ElfImageWhereInput{\nID: pointy.String(\"ElfImage-id\"),\n},\n}\r\n    rawResp, err := elf_image_api.DeleteElfImage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteElfImage) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ElfImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfImageApi elfImageApi = new ElfImageApi(client);\r\n        ElfImageDeletionParams params = new ElfImageDeletionParams()\n.where(new ElfImageWhereInput()\n.id(\"ElfImage-id\"));\r\n        List<WithTaskDeleteElfImage> resp = elfImageApi.deleteElfImage(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-label": {
    "exampleValue": [
      {
        "key": "key-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-label \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"key\":\"key-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, LabelApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    label_api = LabelApi(client)\r\n    resp = label_api.create_label([{\"key\":\"key-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/label\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        label_api := client.Label\r\n    params := label.NewCreateLabelParams()\r\n    params.RequestBody = []*models.LabelCreationParams{\n{\nKey: pointy.String(\"key-string\"),\n},\n}\r\n    rawResp, err := label_api.CreateLabel(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskLabel) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LabelApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LabelApi labelApi = new LabelApi(client);\r\n        List<LabelCreationParams> params = new ArrayList<>();\r\n        params.add(new LabelCreationParams()\n.key(\"key-string\"));\r\n        List<WithTaskLabel> resp = labelApi.createLabel(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-label": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Label-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-label \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Label-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LabelApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    label_api = LabelApi(client)\r\n    resp = label_api.update_label({\"data\":{},\"where\":{\"id\":\"Label-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/label\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        label_api := client.Label\r\n    params := label.NewUpdateLabelParams()\r\n    params.RequestBody = &models.LabelUpdationParams{\nData: &models.LabelUpdationParamsData{\n},\nWhere: &models.LabelWhereInput{\nID: pointy.String(\"Label-id\"),\n},\n}\r\n    rawResp, err := label_api.UpdateLabel(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskLabel) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LabelApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LabelApi labelApi = new LabelApi(client);\r\n        LabelUpdationParams params = new LabelUpdationParams()\n.data(new LabelUpdationParamsData())\n.where(new LabelWhereInput()\n.id(\"Label-id\"));\r\n        List<WithTaskLabel> resp = labelApi.updateLabel(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/add-labels-to-resources": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Label-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/add-labels-to-resources \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Label-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LabelApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    label_api = LabelApi(client)\r\n    resp = label_api.add_labels_to_resources({\"data\":{},\"where\":{\"id\":\"Label-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/label\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        label_api := client.Label\r\n    params := label.NewAddLabelsToResourcesParams()\r\n    params.RequestBody = &models.AddLabelsToResourcesParams{\nData: &models.AddLabelsToResourcesParamsData{\n},\nWhere: &models.LabelWhereInput{\nID: pointy.String(\"Label-id\"),\n},\n}\r\n    rawResp, err := label_api.AddLabelsToResources(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskLabel) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LabelApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LabelApi labelApi = new LabelApi(client);\r\n        AddLabelsToResourcesParams params = new AddLabelsToResourcesParams()\n.data(new AddLabelsToResourcesParamsData())\n.where(new LabelWhereInput()\n.id(\"Label-id\"));\r\n        List<WithTaskLabel> resp = labelApi.addLabelsToResources(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/remove-labels-from-resources": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Label-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/remove-labels-from-resources \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Label-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LabelApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    label_api = LabelApi(client)\r\n    resp = label_api.remove_labels_from_resources({\"data\":{},\"where\":{\"id\":\"Label-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/label\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        label_api := client.Label\r\n    params := label.NewRemoveLabelsFromResourcesParams()\r\n    params.RequestBody = &models.RemoveLabelsFromResourcesParams{\nData: &models.RemoveLabelsFromResourcesParamsData{\n},\nWhere: &models.LabelWhereInput{\nID: pointy.String(\"Label-id\"),\n},\n}\r\n    rawResp, err := label_api.RemoveLabelsFromResources(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskLabel) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LabelApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LabelApi labelApi = new LabelApi(client);\r\n        RemoveLabelsFromResourcesParams params = new RemoveLabelsFromResourcesParams()\n.data(new RemoveLabelsFromResourcesParamsData())\n.where(new LabelWhereInput()\n.id(\"Label-id\"));\r\n        List<WithTaskLabel> resp = labelApi.removeLabelsFromResources(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-label": {
    "exampleValue": {
      "where": {
        "id": "Label-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-label \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Label-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LabelApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    label_api = LabelApi(client)\r\n    resp = label_api.delete_label({\"where\":{\"id\":\"Label-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/label\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        label_api := client.Label\r\n    params := label.NewDeleteLabelParams()\r\n    params.RequestBody = &models.LabelDeletionParams{\nWhere: &models.LabelWhereInput{\nID: pointy.String(\"Label-id\"),\n},\n}\r\n    rawResp, err := label_api.DeleteLabel(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteLabel) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LabelApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LabelApi labelApi = new LabelApi(client);\r\n        LabelDeletionParams params = new LabelDeletionParams()\n.where(new LabelWhereInput()\n.id(\"Label-id\"));\r\n        List<WithTaskDeleteLabel> resp = labelApi.deleteLabel(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-license": {
    "exampleValue": {
      "data": {
        "license": "license-string"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-license \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"license\":\"license-string\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LicenseApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    license_api = LicenseApi(client)\r\n    resp = license_api.update_deploy({\"data\":{\"license\":\"license-string\"}})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/license\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        license_api := client.License\r\n    params := license.NewUpdateDeployParams()\r\n    params.RequestBody = &models.LicenseUpdationParams{\nData: &models.LicenseUpdationParamsData{\nLicense: pointy.String(\"license-string\"),\n},\n}\r\n    rawResp, err := license_api.UpdateDeploy(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LicenseApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LicenseApi licenseApi = new LicenseApi(client);\r\n        LicenseUpdationParams params = new LicenseUpdationParams()\n.data(new LicenseUpdationParamsData()\n.license(\"license-string\"));\r\n        WithTaskLicense resp = licenseApi.updateDeploy(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/create-log-collection": {
    "exampleValue": [
      {
        "log_ended_at": "log_ended_at-string",
        "log_started_at": "log_started_at-string",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "hosts": {
          "id": "Host-id"
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-log-collection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"log_ended_at\":\"log_ended_at-string\",\"log_started_at\":\"log_started_at-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"hosts\":{\"id\":\"Host-id\"}}]'",
    "python": "from cloudtower import ApiClient, Configuration, LogCollectionApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    log_collection_api = LogCollectionApi(client)\r\n    resp = log_collection_api.create_log_collection([{\"log_ended_at\":\"log_ended_at-string\",\"log_started_at\":\"log_started_at-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"hosts\":{\"id\":\"Host-id\"}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/log_collection\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        log_collection_api := client.LogCollection\r\n    params := log_collection.NewCreateLogCollectionParams()\r\n    params.RequestBody = []*models.LogCollectionCreationParams{\n{\nLogEndedAt: pointy.String(\"log_ended_at-string\"),\nLogStartedAt: pointy.String(\"log_started_at-string\"),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nHosts: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\n},\n}\r\n    rawResp, err := log_collection_api.CreateLogCollection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskLogCollection) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LogCollectionApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LogCollectionApi logCollectionApi = new LogCollectionApi(client);\r\n        List<LogCollectionCreationParams> params = new ArrayList<>();\r\n        params.add(new LogCollectionCreationParams()\n.logEndedAt(\"log_ended_at-string\")\n.logStartedAt(\"log_started_at-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.hosts(new HostWhereInput()\n.id(\"Host-id\")));\r\n        List<WithTaskLogCollection> resp = logCollectionApi.createLogCollection(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/force-stop-log-collection": {
    "exampleValue": {
      "where": {
        "id": "LogCollection-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/force-stop-log-collection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"LogCollection-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LogCollectionApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    log_collection_api = LogCollectionApi(client)\r\n    resp = log_collection_api.force_stop_log_collection({\"where\":{\"id\":\"LogCollection-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/log_collection\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        log_collection_api := client.LogCollection\r\n    params := log_collection.NewForceStopLogCollectionParams()\r\n    params.RequestBody = &models.ForceStopLogCollectionParams{\nWhere: &models.LogCollectionWhereInput{\nID: pointy.String(\"LogCollection-id\"),\n},\n}\r\n    rawResp, err := log_collection_api.ForceStopLogCollection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskLogCollection) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LogCollectionApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LogCollectionApi logCollectionApi = new LogCollectionApi(client);\r\n        ForceStopLogCollectionParams params = new ForceStopLogCollectionParams()\n.where(new LogCollectionWhereInput()\n.id(\"LogCollection-id\"));\r\n        List<WithTaskLogCollection> resp = logCollectionApi.forceStopLogCollection(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-log-collection": {
    "exampleValue": {
      "where": {
        "id": "LogCollection-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-log-collection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"LogCollection-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LogCollectionApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    log_collection_api = LogCollectionApi(client)\r\n    resp = log_collection_api.delete_log_collection({\"where\":{\"id\":\"LogCollection-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/log_collection\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        log_collection_api := client.LogCollection\r\n    params := log_collection.NewDeleteLogCollectionParams()\r\n    params.RequestBody = &models.LogCollectionDeletionParams{\nWhere: &models.LogCollectionWhereInput{\nID: pointy.String(\"LogCollection-id\"),\n},\n}\r\n    rawResp, err := log_collection_api.DeleteLogCollection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteLogCollection) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.LogCollectionApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LogCollectionApi logCollectionApi = new LogCollectionApi(client);\r\n        LogCollectionDeletionParams params = new LogCollectionDeletionParams()\n.where(new LogCollectionWhereInput()\n.id(\"LogCollection-id\"));\r\n        List<WithTaskDeleteLogCollection> resp = logCollectionApi.deleteLogCollection(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-vm-metrics": {
    "exampleValue": {
      "range": "range-string",
      "metrics": [
        "-string"
      ],
      "vms": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"metrics\":[\"-string\"],\"vms\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_vm_metrics({\"range\":\"range-string\",\"metrics\":[\"-string\"],\"vms\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetVMMetricsParams()\r\n    params.RequestBody = &models.GetVMMetricInput{\nRange: pointy.String(\"range-string\"),\nMetrics: []string{\"-string\",\n},\nVms: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := metrics_api.GetVMMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetVmMetricInput params = new GetVmMetricInput()\n.range(\"range-string\")\n.addMetricsItem(\"-string\")\n.vms(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskMetric> resp = metricsApi.getVmMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-vm-network-metrics": {
    "exampleValue": {
      "range": "range-string",
      "metrics": [
        "-string"
      ],
      "vms": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-network-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"metrics\":[\"-string\"],\"vms\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_vm_net_work_metrics({\"range\":\"range-string\",\"metrics\":[\"-string\"],\"vms\":{\"id\":\"Vm-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetVMNetWorkMetricsParams()\r\n    params.RequestBody = &models.GetVMNetWorkMetricInput{\nRange: pointy.String(\"range-string\"),\nMetrics: []string{\"-string\",\n},\nVms: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := metrics_api.GetVMNetWorkMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetVmNetWorkMetricInput params = new GetVmNetWorkMetricInput()\n.range(\"range-string\")\n.addMetricsItem(\"-string\")\n.vms(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<WithTaskMetric> resp = metricsApi.getVmNetWorkMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-disk-metrics": {
    "exampleValue": {
      "range": "range-string",
      "disks": {
        "id": "Disk-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-disk-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"disks\":{\"id\":\"Disk-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_disk_metrics({\"range\":\"range-string\",\"disks\":{\"id\":\"Disk-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetDiskMetricsParams()\r\n    params.RequestBody = &models.GetDiskMetricInput{\nRange: pointy.String(\"range-string\"),\nDisks: &models.DiskWhereInput{\nID: pointy.String(\"Disk-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetDiskMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetDiskMetricInput params = new GetDiskMetricInput()\n.range(\"range-string\")\n.disks(new DiskWhereInput()\n.id(\"Disk-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getDiskMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-vm-volume-metrics": {
    "exampleValue": {
      "range": "range-string",
      "metrics": [
        "-string"
      ],
      "vmVolumes": {
        "id": "VmVolume-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-volume-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"metrics\":[\"-string\"],\"vmVolumes\":{\"id\":\"VmVolume-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_vm_volume_metrics({\"range\":\"range-string\",\"metrics\":[\"-string\"],\"vmVolumes\":{\"id\":\"VmVolume-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetVMVolumeMetricsParams()\r\n    params.RequestBody = &models.GetVMVolumeMetricInput{\nRange: pointy.String(\"range-string\"),\nMetrics: []string{\"-string\",\n},\nVMVolumes: &models.VMVolumeWhereInput{\nID: pointy.String(\"VmVolume-id\"),\n},\n}\r\n    rawResp, err := metrics_api.GetVMVolumeMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetVmVolumeMetricInput params = new GetVmVolumeMetricInput()\n.range(\"range-string\")\n.addMetricsItem(\"-string\")\n.vmVolumes(new VmVolumeWhereInput()\n.id(\"VmVolume-id\"));\r\n        List<WithTaskMetric> resp = metricsApi.getVmVolumeMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-lun-metrics": {
    "exampleValue": {
      "range": "range-string",
      "luns": {
        "id": "IscsiLun-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-lun-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"luns\":{\"id\":\"IscsiLun-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_lun_metrics({\"range\":\"range-string\",\"luns\":{\"id\":\"IscsiLun-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetLunMetricsParams()\r\n    params.RequestBody = &models.GetLunMetricInput{\nRange: pointy.String(\"range-string\"),\nLuns: &models.IscsiLunWhereInput{\nID: pointy.String(\"IscsiLun-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetLunMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetLunMetricInput params = new GetLunMetricInput()\n.range(\"range-string\")\n.luns(new IscsiLunWhereInput()\n.id(\"IscsiLun-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getLunMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-nvmf-namespace-metrics": {
    "exampleValue": {
      "nvmfNamespaces": {
        "id": "NvmfNamespace-id"
      },
      "metrics": [
        "-string"
      ],
      "range": "range-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nvmf-namespace-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"nvmfNamespaces\":{\"id\":\"NvmfNamespace-id\"},\"metrics\":[\"-string\"],\"range\":\"range-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_nvmf_namespace_metrics({\"nvmfNamespaces\":{\"id\":\"NvmfNamespace-id\"},\"metrics\":[\"-string\"],\"range\":\"range-string\"})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetNvmfNamespaceMetricsParams()\r\n    params.RequestBody = &models.GetNvmfNamespaceMetricInput{\nNvmfNamespaces: &models.NvmfNamespaceWhereInput{\nID: pointy.String(\"NvmfNamespace-id\"),\n},\nMetrics: []string{\"-string\",\n},\nRange: pointy.String(\"range-string\"),\n}\r\n    rawResp, err := metrics_api.GetNvmfNamespaceMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetNvmfNamespaceMetricInput params = new GetNvmfNamespaceMetricInput()\n.nvmfNamespaces(new NvmfNamespaceWhereInput()\n.id(\"NvmfNamespace-id\"))\n.addMetricsItem(\"-string\")\n.range(\"range-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getNvmfNamespaceMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-cluster-metrics": {
    "exampleValue": {
      "range": "range-string",
      "clusters": {
        "id": "Cluster-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"clusters\":{\"id\":\"Cluster-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_cluster_metrics({\"range\":\"range-string\",\"clusters\":{\"id\":\"Cluster-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetClusterMetricsParams()\r\n    params.RequestBody = &models.GetClusterMetricInput{\nRange: pointy.String(\"range-string\"),\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetClusterMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetClusterMetricInput params = new GetClusterMetricInput()\n.range(\"range-string\")\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getClusterMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-host-metrics": {
    "exampleValue": {
      "range": "range-string",
      "hosts": {
        "id": "Host-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-host-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_host_metrics({\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetHostMetricsParams()\r\n    params.RequestBody = &models.GetHostMetricInput{\nRange: pointy.String(\"range-string\"),\nHosts: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetHostMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetHostMetricInput params = new GetHostMetricInput()\n.range(\"range-string\")\n.hosts(new HostWhereInput()\n.id(\"Host-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getHostMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-host-network-metrics": {
    "exampleValue": {
      "hosts": {
        "id": "Host-id"
      },
      "range": "range-string",
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-host-network-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"hosts\":{\"id\":\"Host-id\"},\"range\":\"range-string\",\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_host_network_metrics({\"hosts\":{\"id\":\"Host-id\"},\"range\":\"range-string\",\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetHostNetworkMetricsParams()\r\n    params.RequestBody = &models.GetHostNetworkMetricInput{\nHosts: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\nRange: pointy.String(\"range-string\"),\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetHostNetworkMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetHostNetworkMetricInput params = new GetHostNetworkMetricInput()\n.hosts(new HostWhereInput()\n.id(\"Host-id\"))\n.range(\"range-string\")\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getHostNetworkMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-host-service-metrics": {
    "exampleValue": {
      "range": "range-string",
      "hosts": {
        "id": "Host-id"
      },
      "services": [
        "-string"
      ],
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-host-service-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"services\":[\"-string\"],\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_host_servicek_metrics({\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"services\":[\"-string\"],\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetHostServicekMetricsParams()\r\n    params.RequestBody = &models.GetHostServiceMetricInput{\nRange: pointy.String(\"range-string\"),\nHosts: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\nServices: []string{\"-string\",\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetHostServicekMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetHostServiceMetricInput params = new GetHostServiceMetricInput()\n.range(\"range-string\")\n.hosts(new HostWhereInput()\n.id(\"Host-id\"))\n.addServicesItem(\"-string\")\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getHostServicekMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-scvm-metrics": {
    "exampleValue": {
      "range": "range-string",
      "hosts": {
        "id": "Host-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-scvm-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_scvm_metrics({\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetScvmMetricsParams()\r\n    params.RequestBody = &models.GetScvmMetricInput{\nRange: pointy.String(\"range-string\"),\nHosts: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetScvmMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetScvmMetricInput params = new GetScvmMetricInput()\n.range(\"range-string\")\n.hosts(new HostWhereInput()\n.id(\"Host-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getScvmMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-scvm-network-metrics": {
    "exampleValue": {
      "range": "range-string",
      "hosts": {
        "id": "Host-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-scvm-network-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_scvm_network_metrics({\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetScvmNetworkMetricsParams()\r\n    params.RequestBody = &models.GetScvmNetworkInput{\nRange: pointy.String(\"range-string\"),\nHosts: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetScvmNetworkMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetScvmNetworkInput params = new GetScvmNetworkInput()\n.range(\"range-string\")\n.hosts(new HostWhereInput()\n.id(\"Host-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getScvmNetworkMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-scvm-service-metrics": {
    "exampleValue": {
      "range": "range-string",
      "hosts": {
        "id": "Host-id"
      },
      "services": [
        "-string"
      ],
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-scvm-service-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"services\":[\"-string\"],\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_scvm_servicek_metrics({\"range\":\"range-string\",\"hosts\":{\"id\":\"Host-id\"},\"services\":[\"-string\"],\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetScvmServicekMetricsParams()\r\n    params.RequestBody = &models.GetScvmServiceMetricInput{\nRange: pointy.String(\"range-string\"),\nHosts: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\nServices: []string{\"-string\",\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetScvmServicekMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetScvmServiceMetricInput params = new GetScvmServiceMetricInput()\n.range(\"range-string\")\n.hosts(new HostWhereInput()\n.id(\"Host-id\"))\n.addServicesItem(\"-string\")\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getScvmServicekMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-scvm-disk-metrics": {
    "exampleValue": {
      "range": "range-string",
      "disks": {
        "id": "Disk-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-scvm-disk-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"disks\":{\"id\":\"Disk-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_scvm_disk_metrics({\"range\":\"range-string\",\"disks\":{\"id\":\"Disk-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetScvmDiskMetricsParams()\r\n    params.RequestBody = &models.GetScvmDiskMetricInput{\nRange: pointy.String(\"range-string\"),\nDisks: &models.DiskWhereInput{\nID: pointy.String(\"Disk-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetScvmDiskMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetScvmDiskMetricInput params = new GetScvmDiskMetricInput()\n.range(\"range-string\")\n.disks(new DiskWhereInput()\n.id(\"Disk-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getScvmDiskMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-zone-metrics": {
    "exampleValue": {
      "range": "range-string",
      "type": "primary-to-secondary",
      "clusters": {
        "id": "Cluster-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-zone-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"type\":\"primary-to-secondary\",\"clusters\":{\"id\":\"Cluster-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_zone_metrics({\"range\":\"range-string\",\"type\":\"primary-to-secondary\",\"clusters\":{\"id\":\"Cluster-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetZoneMetricsParams()\r\n    params.RequestBody = &models.GetZoneMetricInput{\nRange: pointy.String(\"range-string\"),\nType: pointy.String(\"primary-to-secondary\"),\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetZoneMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetZoneMetricInput params = new GetZoneMetricInput()\n.range(\"range-string\")\n.type(\"primary-to-secondary\")\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getZoneMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-witness-metrics": {
    "exampleValue": {
      "range": "range-string",
      "clusters": {
        "id": "Cluster-id"
      },
      "metrics": [
        "-string"
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-witness-metrics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"range\":\"range-string\",\"clusters\":{\"id\":\"Cluster-id\"},\"metrics\":[\"-string\"]}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_witness_metrics({\"range\":\"range-string\",\"clusters\":{\"id\":\"Cluster-id\"},\"metrics\":[\"-string\"]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetWitnessMetricsParams()\r\n    params.RequestBody = &models.GetWitnessMetricInput{\nRange: pointy.String(\"range-string\"),\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\nMetrics: []string{\"-string\",\n},\n}\r\n    rawResp, err := metrics_api.GetWitnessMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetWitnessMetricInput params = new GetWitnessMetricInput()\n.range(\"range-string\")\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\"))\n.addMetricsItem(\"-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getWitnessMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-top-n-metrics-in-clusters": {
    "exampleValue": {
      "metrics": [
        "-string"
      ],
      "clusters": {
        "id": "Cluster-id"
      },
      "type": "top",
      "n": 1,
      "range": "range-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-top-n-metrics-in-clusters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"metrics\":[\"-string\"],\"clusters\":{\"id\":\"Cluster-id\"},\"type\":\"top\",\"n\":1,\"range\":\"range-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, MetricsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    metrics_api = MetricsApi(client)\r\n    resp = metrics_api.get_top_n_vm_volume_metrics({\"metrics\":[\"-string\"],\"clusters\":{\"id\":\"Cluster-id\"},\"type\":\"top\",\"n\":1,\"range\":\"range-string\"})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/metrics\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        metrics_api := client.Metrics\r\n    params := metrics.NewGetTopNVMVolumeMetricsParams()\r\n    params.RequestBody = &models.GetTopNMetricInput{\nMetrics: []string{\"-string\",\n},\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\nType: pointy.String(\"top\"),\nN: pointy.Int32(1),\nRange: pointy.String(\"range-string\"),\n}\r\n    rawResp, err := metrics_api.GetTopNVMVolumeMetrics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskMetric) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.MetricsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        MetricsApi metricsApi = new MetricsApi(client);\r\n        GetTopNMetricInput params = new GetTopNMetricInput()\n.addMetricsItem(\"-string\")\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\"))\n.type(\"top\")\n.n(1)\n.range(\"range-string\");\r\n        List<WithTaskMetric> resp = metricsApi.getTopNVmVolumeMetrics(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-namespace-group": {
    "exampleValue": [
      {
        "nvmf_subsystem_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-namespace-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"nvmf_subsystem_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, NamespaceGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    namespace_group_api = NamespaceGroupApi(client)\r\n    resp = namespace_group_api.create_namespace_group([{\"nvmf_subsystem_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/namespace_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        namespace_group_api := client.NamespaceGroup\r\n    params := namespace_group.NewCreateNamespaceGroupParams()\r\n    params.RequestBody = []*models.NamespaceGroupCreationParams{\n{\nNvmfSubsystemID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := namespace_group_api.CreateNamespaceGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNamespaceGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NamespaceGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NamespaceGroupApi namespaceGroupApi = new NamespaceGroupApi(client);\r\n        List<NamespaceGroupCreationParams> params = new ArrayList<>();\r\n        params.add(new NamespaceGroupCreationParams()\n.nvmfSubsystemId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskNamespaceGroup> resp = namespaceGroupApi.createNamespaceGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-namespace-group": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "NamespaceGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-namespace-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"NamespaceGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NamespaceGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    namespace_group_api = NamespaceGroupApi(client)\r\n    resp = namespace_group_api.update_namespace_group({\"data\":{},\"where\":{\"id\":\"NamespaceGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/namespace_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        namespace_group_api := client.NamespaceGroup\r\n    params := namespace_group.NewUpdateNamespaceGroupParams()\r\n    params.RequestBody = &models.NamespaceGroupUpdationParams{\nData: &models.NamespaceGroupUpdationParamsData{\n},\nWhere: &models.NamespaceGroupWhereInput{\nID: pointy.String(\"NamespaceGroup-id\"),\n},\n}\r\n    rawResp, err := namespace_group_api.UpdateNamespaceGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNamespaceGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NamespaceGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NamespaceGroupApi namespaceGroupApi = new NamespaceGroupApi(client);\r\n        NamespaceGroupUpdationParams params = new NamespaceGroupUpdationParams()\n.data(new NamespaceGroupUpdationParamsData())\n.where(new NamespaceGroupWhereInput()\n.id(\"NamespaceGroup-id\"));\r\n        List<WithTaskNamespaceGroup> resp = namespaceGroupApi.updateNamespaceGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-namespace-group": {
    "exampleValue": {
      "where": {
        "id": "NamespaceGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-namespace-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NamespaceGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NamespaceGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    namespace_group_api = NamespaceGroupApi(client)\r\n    resp = namespace_group_api.delete_namespace_group({\"where\":{\"id\":\"NamespaceGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/namespace_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        namespace_group_api := client.NamespaceGroup\r\n    params := namespace_group.NewDeleteNamespaceGroupParams()\r\n    params.RequestBody = &models.NamespaceGroupDeletionParams{\nWhere: &models.NamespaceGroupWhereInput{\nID: pointy.String(\"NamespaceGroup-id\"),\n},\n}\r\n    rawResp, err := namespace_group_api.DeleteNamespaceGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteNamespaceGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NamespaceGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NamespaceGroupApi namespaceGroupApi = new NamespaceGroupApi(client);\r\n        NamespaceGroupDeletionParams params = new NamespaceGroupDeletionParams()\n.where(new NamespaceGroupWhereInput()\n.id(\"NamespaceGroup-id\"));\r\n        List<WithTaskDeleteNamespaceGroup> resp = namespaceGroupApi.deleteNamespaceGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-nfs-export": {
    "exampleValue": [
      {
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "thin_provision": true,
        "replica_num": 1,
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-nfs-export \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"thin_provision\":true,\"replica_num\":1,\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, NfsExportApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nfs_export_api = NfsExportApi(client)\r\n    resp = nfs_export_api.create_nfs_export([{\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"thin_provision\":True,\"replica_num\":1,\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nfs_export\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nfs_export_api := client.NfsExport\r\n    params := nfs_export.NewCreateNfsExportParams()\r\n    params.RequestBody = []*models.NfsExportCreationParams{\n{\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nThinProvision: pointy.Bool(true),\nReplicaNum: pointy.Int32(1),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := nfs_export_api.CreateNfsExport(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNfsExport) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NfsExportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NfsExportApi nfsExportApi = new NfsExportApi(client);\r\n        List<NfsExportCreationParams> params = new ArrayList<>();\r\n        params.add(new NfsExportCreationParams()\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.thinProvision(true)\n.replicaNum(1)\n.name(\"name-string\"));\r\n        List<WithTaskNfsExport> resp = nfsExportApi.createNfsExport(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-nfs-export": {
    "exampleValue": {
      "where": {
        "id": "NfsExport-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-nfs-export \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NfsExport-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NfsExportApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nfs_export_api = NfsExportApi(client)\r\n    resp = nfs_export_api.update_nfs_export({\"where\":{\"id\":\"NfsExport-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nfs_export\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nfs_export_api := client.NfsExport\r\n    params := nfs_export.NewUpdateNfsExportParams()\r\n    params.RequestBody = &models.NfsExportUpdationParams{\nWhere: &models.NfsExportWhereInput{\nID: pointy.String(\"NfsExport-id\"),\n},\n}\r\n    rawResp, err := nfs_export_api.UpdateNfsExport(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNfsExport) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NfsExportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NfsExportApi nfsExportApi = new NfsExportApi(client);\r\n        NfsExportUpdationParams params = new NfsExportUpdationParams()\n.where(new NfsExportWhereInput()\n.id(\"NfsExport-id\"));\r\n        List<WithTaskNfsExport> resp = nfsExportApi.updateNfsExport(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-nfs-export": {
    "exampleValue": {
      "where": {
        "id": "NfsExport-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-nfs-export \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NfsExport-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NfsExportApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nfs_export_api = NfsExportApi(client)\r\n    resp = nfs_export_api.delete_nfs_export({\"where\":{\"id\":\"NfsExport-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nfs_export\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nfs_export_api := client.NfsExport\r\n    params := nfs_export.NewDeleteNfsExportParams()\r\n    params.RequestBody = &models.NfsExportDeletionParams{\nWhere: &models.NfsExportWhereInput{\nID: pointy.String(\"NfsExport-id\"),\n},\n}\r\n    rawResp, err := nfs_export_api.DeleteNfsExport(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteNfsExport) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NfsExportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NfsExportApi nfsExportApi = new NfsExportApi(client);\r\n        NfsExportDeletionParams params = new NfsExportDeletionParams()\n.where(new NfsExportWhereInput()\n.id(\"NfsExport-id\"));\r\n        List<WithTaskDeleteNfsExport> resp = nfsExportApi.deleteNfsExport(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-nic": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Nic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-nic \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Nic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NicApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nic_api = NicApi(client)\r\n    resp = nic_api.update_nic({\"data\":{},\"where\":{\"id\":\"Nic-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nic\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nic_api := client.Nic\r\n    params := nic.NewUpdateNicParams()\r\n    params.RequestBody = &models.NicUpdationParams{\nData: &models.NicUpdationParamsData{\n},\nWhere: &models.NicWhereInput{\nID: pointy.String(\"Nic-id\"),\n},\n}\r\n    rawResp, err := nic_api.UpdateNic(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNic) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NicApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NicApi nicApi = new NicApi(client);\r\n        NicUpdationParams params = new NicUpdationParams()\n.data(new NicUpdationParamsData())\n.where(new NicWhereInput()\n.id(\"Nic-id\"));\r\n        List<WithTaskNic> resp = nicApi.updateNic(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/move-node-topo": {
    "exampleValue": [
      {
        "data": {},
        "where": {
          "id": "NodeTopo-id"
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/move-node-topo \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"data\":{},\"where\":{\"id\":\"NodeTopo-id\"}}]'",
    "python": "from cloudtower import ApiClient, Configuration, NodeTopoApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    node_topo_api = NodeTopoApi(client)\r\n    resp = node_topo_api.update_node_topo([{\"data\":{},\"where\":{\"id\":\"NodeTopo-id\"}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/node_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        node_topo_api := client.NodeTopo\r\n    params := node_topo.NewUpdateNodeTopoParams()\r\n    params.RequestBody = []*models.NodeTopUpdationParam{\n{\nData: &models.NodeTopoUpdationParamsData{\n},\nWhere: &models.NodeTopoWhereUniqueInput{\nID: pointy.String(\"NodeTopo-id\"),\n},\n},\n}\r\n    rawResp, err := node_topo_api.UpdateNodeTopo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNodeTopo) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NodeTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NodeTopoApi nodeTopoApi = new NodeTopoApi(client);\r\n        List<NodeTopUpdationParam> params = new ArrayList<>();\r\n        params.add(new NodeTopUpdationParam()\n.data(new NodeTopoUpdationParamsData())\n.where(new NodeTopoWhereUniqueInput()\n.id(\"NodeTopo-id\")));\r\n        List<WithTaskNodeTopo> resp = nodeTopoApi.updateNodeTopo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-nvmf-namespace-snapshot": {
    "exampleValue": [
      {
        "nvmf_subsystem_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "nvmf_namespace_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-nvmf-namespace-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"nvmf_subsystem_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"nvmf_namespace_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_snapshot_api = NvmfNamespaceSnapshotApi(client)\r\n    resp = nvmf_namespace_snapshot_api.create_nvmf_namespace_snapshot([{\"nvmf_subsystem_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"nvmf_namespace_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_snapshot_api := client.NvmfNamespaceSnapshot\r\n    params := nvmf_namespace_snapshot.NewCreateNvmfNamespaceSnapshotParams()\r\n    params.RequestBody = []*models.NvmfNamespaceSnapshotCreationParams{\n{\nNvmfSubsystemID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nNvmfNamespaceID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_snapshot_api.CreateNvmfNamespaceSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNvmfNamespaceSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceSnapshotApi nvmfNamespaceSnapshotApi = new NvmfNamespaceSnapshotApi(client);\r\n        List<NvmfNamespaceSnapshotCreationParams> params = new ArrayList<>();\r\n        params.add(new NvmfNamespaceSnapshotCreationParams()\n.nvmfSubsystemId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.nvmfNamespaceId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskNvmfNamespaceSnapshot> resp = nvmfNamespaceSnapshotApi.createNvmfNamespaceSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-nvmf-namespace-snapshot": {
    "exampleValue": {
      "where": {
        "id": "NvmfNamespaceSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-nvmf-namespace-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NvmfNamespaceSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_snapshot_api = NvmfNamespaceSnapshotApi(client)\r\n    resp = nvmf_namespace_snapshot_api.delete_nvmf_namespace_snapshot({\"where\":{\"id\":\"NvmfNamespaceSnapshot-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_snapshot_api := client.NvmfNamespaceSnapshot\r\n    params := nvmf_namespace_snapshot.NewDeleteNvmfNamespaceSnapshotParams()\r\n    params.RequestBody = &models.NvmfNamespaceSnapshotDeletionParams{\nWhere: &models.NvmfNamespaceSnapshotWhereInput{\nID: pointy.String(\"NvmfNamespaceSnapshot-id\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_snapshot_api.DeleteNvmfNamespaceSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteNvmfNamespaceSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceSnapshotApi nvmfNamespaceSnapshotApi = new NvmfNamespaceSnapshotApi(client);\r\n        NvmfNamespaceSnapshotDeletionParams params = new NvmfNamespaceSnapshotDeletionParams()\n.where(new NvmfNamespaceSnapshotWhereInput()\n.id(\"NvmfNamespaceSnapshot-id\"));\r\n        List<WithTaskDeleteNvmfNamespaceSnapshot> resp = nvmfNamespaceSnapshotApi.deleteNvmfNamespaceSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-nvmf-namespace": {
    "exampleValue": [
      {
        "assigned_size": 1,
        "replica_num": 1,
        "nvmf_subsystem_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-nvmf-namespace \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"assigned_size\":1,\"replica_num\":1,\"nvmf_subsystem_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_api = NvmfNamespaceApi(client)\r\n    resp = nvmf_namespace_api.create_nvmf_namespace([{\"assigned_size\":1,\"replica_num\":1,\"nvmf_subsystem_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_api := client.NvmfNamespace\r\n    params := nvmf_namespace.NewCreateNvmfNamespaceParams()\r\n    params.RequestBody = []*models.NvmfNamespaceCreationParams{\n{\nAssignedSize: pointy.Int64(1),\nReplicaNum: pointy.Int32(1),\nNvmfSubsystemID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_api.CreateNvmfNamespace(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNvmfNamespace) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceApi nvmfNamespaceApi = new NvmfNamespaceApi(client);\r\n        List<NvmfNamespaceCreationParams> params = new ArrayList<>();\r\n        params.add(new NvmfNamespaceCreationParams()\n.assignedSize(1L)\n.replicaNum(1)\n.nvmfSubsystemId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskNvmfNamespace> resp = nvmfNamespaceApi.createNvmfNamespace(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-nvmf-namespace": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "NvmfNamespace-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-nvmf-namespace \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"NvmfNamespace-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_api = NvmfNamespaceApi(client)\r\n    resp = nvmf_namespace_api.update_nvmf_namespace({\"data\":{},\"where\":{\"id\":\"NvmfNamespace-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_api := client.NvmfNamespace\r\n    params := nvmf_namespace.NewUpdateNvmfNamespaceParams()\r\n    params.RequestBody = &models.NvmfNamespaceUpdationParams{\nData: &models.NvmfNamespaceUpdationParamsData{\n},\nWhere: &models.NvmfNamespaceWhereInput{\nID: pointy.String(\"NvmfNamespace-id\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_api.UpdateNvmfNamespace(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNvmfNamespace) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceApi nvmfNamespaceApi = new NvmfNamespaceApi(client);\r\n        NvmfNamespaceUpdationParams params = new NvmfNamespaceUpdationParams()\n.data(new NvmfNamespaceUpdationParamsData())\n.where(new NvmfNamespaceWhereInput()\n.id(\"NvmfNamespace-id\"));\r\n        List<WithTaskNvmfNamespace> resp = nvmfNamespaceApi.updateNvmfNamespace(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-nvmf-namespace": {
    "exampleValue": {
      "data": {
        "remove_snapshot": true
      },
      "where": {
        "id": "NvmfNamespace-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-nvmf-namespace \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"remove_snapshot\":true},\"where\":{\"id\":\"NvmfNamespace-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_api = NvmfNamespaceApi(client)\r\n    resp = nvmf_namespace_api.delete_nvmf_namespace({\"data\":{\"remove_snapshot\":True},\"where\":{\"id\":\"NvmfNamespace-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_api := client.NvmfNamespace\r\n    params := nvmf_namespace.NewDeleteNvmfNamespaceParams()\r\n    params.RequestBody = &models.NvmfNamespaceDeletionParams{\nData: &models.NvmfNamespaceDeletionParamsData{\nRemoveSnapshot: pointy.Bool(true),\n},\nWhere: &models.NvmfNamespaceWhereInput{\nID: pointy.String(\"NvmfNamespace-id\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_api.DeleteNvmfNamespace(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteNvmfNamespace) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceApi nvmfNamespaceApi = new NvmfNamespaceApi(client);\r\n        NvmfNamespaceDeletionParams params = new NvmfNamespaceDeletionParams()\n.data(new NvmfNamespaceDeletionParamsData()\n.removeSnapshot(true))\n.where(new NvmfNamespaceWhereInput()\n.id(\"NvmfNamespace-id\"));\r\n        List<WithTaskDeleteNvmfNamespace> resp = nvmfNamespaceApi.deleteNvmfNamespace(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/clone-nvmf-namespace-from-snapshot": {
    "exampleValue": [
      {
        "nvmf_subsystem_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "snapshot_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/clone-nvmf-namespace-from-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"nvmf_subsystem_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_api = NvmfNamespaceApi(client)\r\n    resp = nvmf_namespace_api.clone_nvmf_namespace_from_snapshot([{\"nvmf_subsystem_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_api := client.NvmfNamespace\r\n    params := nvmf_namespace.NewCloneNvmfNamespaceFromSnapshotParams()\r\n    params.RequestBody = []*models.NvmfNamespaceCloneParams{\n{\nNvmfSubsystemID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nSnapshotID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_api.CloneNvmfNamespaceFromSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNvmfNamespace) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceApi nvmfNamespaceApi = new NvmfNamespaceApi(client);\r\n        List<NvmfNamespaceCloneParams> params = new ArrayList<>();\r\n        params.add(new NvmfNamespaceCloneParams()\n.nvmfSubsystemId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.snapshotId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskNvmfNamespace> resp = nvmfNamespaceApi.cloneNvmfNamespaceFromSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/rollback-nvmf-namespace-from-snapshot": {
    "exampleValue": [
      {
        "namespace_id": "ck74rk21wg5lz0786opdnzz5m",
        "snapshot_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/rollback-nvmf-namespace-from-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"namespace_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_api = NvmfNamespaceApi(client)\r\n    resp = nvmf_namespace_api.rollback_nvmf_namespace_from_snapshot([{\"namespace_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_api := client.NvmfNamespace\r\n    params := nvmf_namespace.NewRollbackNvmfNamespaceFromSnapshotParams()\r\n    params.RequestBody = []*models.NvmfNamespaceRollbackParams{\n{\nNamespaceID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nSnapshotID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_api.RollbackNvmfNamespaceFromSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNvmfNamespace) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceApi nvmfNamespaceApi = new NvmfNamespaceApi(client);\r\n        List<NvmfNamespaceRollbackParams> params = new ArrayList<>();\r\n        params.add(new NvmfNamespaceRollbackParams()\n.namespaceId(\"ck74rk21wg5lz0786opdnzz5m\")\n.snapshotId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskNvmfNamespace> resp = nvmfNamespaceApi.rollbackNvmfNamespaceFromSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-nvmf-subsystem": {
    "exampleValue": [
      {
        "replica_num": 1,
        "thin_provision": true,
        "stripe_size": 1,
        "stripe_num": 1,
        "policy": "BALANCE",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-nvmf-subsystem \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"replica_num\":1,\"thin_provision\":true,\"stripe_size\":1,\"stripe_num\":1,\"policy\":\"BALANCE\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfSubsystemApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_subsystem_api = NvmfSubsystemApi(client)\r\n    resp = nvmf_subsystem_api.create_nvmf_subsystem([{\"replica_num\":1,\"thin_provision\":True,\"stripe_size\":1,\"stripe_num\":1,\"policy\":\"BALANCE\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_subsystem\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_subsystem_api := client.NvmfSubsystem\r\n    params := nvmf_subsystem.NewCreateNvmfSubsystemParams()\r\n    params.RequestBody = []*models.NvmfSubsystemCreationParams{\n{\nReplicaNum: pointy.Int32(1),\nThinProvision: pointy.Bool(true),\nStripeSize: pointy.Int64(1),\nStripeNum: pointy.Int32(1),\nPolicy: models.NvmfSubsystemPolicyTypeBALANCE.Pointer(),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := nvmf_subsystem_api.CreateNvmfSubsystem(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNvmfSubsystem) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfSubsystemApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfSubsystemApi nvmfSubsystemApi = new NvmfSubsystemApi(client);\r\n        List<NvmfSubsystemCreationParams> params = new ArrayList<>();\r\n        params.add(new NvmfSubsystemCreationParams()\n.replicaNum(1)\n.thinProvision(true)\n.stripeSize(1L)\n.stripeNum(1)\n.policy(NvmfSubsystemPolicyType.fromValue(\"BALANCE\"))\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskNvmfSubsystem> resp = nvmfSubsystemApi.createNvmfSubsystem(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-nvmf-subsystem": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "NvmfSubsystem-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-nvmf-subsystem \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"NvmfSubsystem-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfSubsystemApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_subsystem_api = NvmfSubsystemApi(client)\r\n    resp = nvmf_subsystem_api.update_nvmf_subsystem({\"data\":{},\"where\":{\"id\":\"NvmfSubsystem-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_subsystem\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_subsystem_api := client.NvmfSubsystem\r\n    params := nvmf_subsystem.NewUpdateNvmfSubsystemParams()\r\n    params.RequestBody = &models.NvmfSubsystemUpdationParams{\nData: &models.NvmfSubsystemCommonParams{\n},\nWhere: &models.NvmfSubsystemWhereInput{\nID: pointy.String(\"NvmfSubsystem-id\"),\n},\n}\r\n    rawResp, err := nvmf_subsystem_api.UpdateNvmfSubsystem(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskNvmfSubsystem) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfSubsystemApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfSubsystemApi nvmfSubsystemApi = new NvmfSubsystemApi(client);\r\n        NvmfSubsystemUpdationParams params = new NvmfSubsystemUpdationParams()\n.data(new NvmfSubsystemCommonParams())\n.where(new NvmfSubsystemWhereInput()\n.id(\"NvmfSubsystem-id\"));\r\n        List<WithTaskNvmfSubsystem> resp = nvmfSubsystemApi.updateNvmfSubsystem(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-nvmf-subsystem": {
    "exampleValue": {
      "where": {
        "id": "NvmfSubsystem-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-nvmf-subsystem \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NvmfSubsystem-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfSubsystemApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_subsystem_api = NvmfSubsystemApi(client)\r\n    resp = nvmf_subsystem_api.delete_nvmf_subsystem({\"where\":{\"id\":\"NvmfSubsystem-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_subsystem\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_subsystem_api := client.NvmfSubsystem\r\n    params := nvmf_subsystem.NewDeleteNvmfSubsystemParams()\r\n    params.RequestBody = &models.NvmfSubsystemDeletionParams{\nWhere: &models.NvmfSubsystemWhereInput{\nID: pointy.String(\"NvmfSubsystem-id\"),\n},\n}\r\n    rawResp, err := nvmf_subsystem_api.DeleteNvmfSubsystem(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteNvmfSubsystem) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.NvmfSubsystemApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfSubsystemApi nvmfSubsystemApi = new NvmfSubsystemApi(client);\r\n        NvmfSubsystemDeletionParams params = new NvmfSubsystemDeletionParams()\n.where(new NvmfSubsystemWhereInput()\n.id(\"NvmfSubsystem-id\"));\r\n        List<WithTaskDeleteNvmfSubsystem> resp = nvmfSubsystemApi.deleteNvmfSubsystem(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-organization": {
    "exampleValue": [
      {
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-organization \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, OrganizationApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    organization_api = OrganizationApi(client)\r\n    resp = organization_api.create_organization([{\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/organization\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        organization_api := client.Organization\r\n    params := organization.NewCreateOrganizationParams()\r\n    params.RequestBody = []*models.OrganizationCreationParams{\n{\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := organization_api.CreateOrganization(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskOrganization) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.OrganizationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        OrganizationApi organizationApi = new OrganizationApi(client);\r\n        List<OrganizationCreationParams> params = new ArrayList<>();\r\n        params.add(new OrganizationCreationParams()\n.name(\"name-string\"));\r\n        List<WithTaskOrganization> resp = organizationApi.createOrganization(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-organization": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Organization-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-organization \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Organization-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, OrganizationApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    organization_api = OrganizationApi(client)\r\n    resp = organization_api.update_organization({\"data\":{},\"where\":{\"id\":\"Organization-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/organization\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        organization_api := client.Organization\r\n    params := organization.NewUpdateOrganizationParams()\r\n    params.RequestBody = &models.OrganizationUpdationParams{\nData: &models.OrganizationUpdationParamsData{\n},\nWhere: &models.OrganizationWhereInput{\nID: pointy.String(\"Organization-id\"),\n},\n}\r\n    rawResp, err := organization_api.UpdateOrganization(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskOrganization) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.OrganizationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        OrganizationApi organizationApi = new OrganizationApi(client);\r\n        OrganizationUpdationParams params = new OrganizationUpdationParams()\n.data(new OrganizationUpdationParamsData())\n.where(new OrganizationWhereInput()\n.id(\"Organization-id\"));\r\n        List<WithTaskOrganization> resp = organizationApi.updateOrganization(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-organization": {
    "exampleValue": {
      "where": {
        "id": "Organization-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-organization \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Organization-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, OrganizationApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    organization_api = OrganizationApi(client)\r\n    resp = organization_api.delete_organization({\"where\":{\"id\":\"Organization-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/organization\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        organization_api := client.Organization\r\n    params := organization.NewDeleteOrganizationParams()\r\n    params.RequestBody = &models.OrganizationDeletionParams{\nWhere: &models.OrganizationWhereInput{\nID: pointy.String(\"Organization-id\"),\n},\n}\r\n    rawResp, err := organization_api.DeleteOrganization(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteOrganization) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.OrganizationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        OrganizationApi organizationApi = new OrganizationApi(client);\r\n        OrganizationDeletionParams params = new OrganizationDeletionParams()\n.where(new OrganizationWhereInput()\n.id(\"Organization-id\"));\r\n        List<WithTaskDeleteOrganization> resp = organizationApi.deleteOrganization(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-rack-topo": {
    "exampleValue": [
      {
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "zone_topo_id": "ck74rk21wg5lz0786opdnzz5m",
        "height": 1,
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-rack-topo \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"zone_topo_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"height\":1,\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, RackTopoApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    rack_topo_api = RackTopoApi(client)\r\n    resp = rack_topo_api.create_rack_topo([{\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"zone_topo_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"height\":1,\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/rack_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        rack_topo_api := client.RackTopo\r\n    params := rack_topo.NewCreateRackTopoParams()\r\n    params.RequestBody = []*models.RackTopoCreationParams{\n{\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nZoneTopoID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nHeight: pointy.Int32(1),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := rack_topo_api.CreateRackTopo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskRackTopo) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.RackTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        RackTopoApi rackTopoApi = new RackTopoApi(client);\r\n        List<RackTopoCreationParams> params = new ArrayList<>();\r\n        params.add(new RackTopoCreationParams()\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.zoneTopoId(\"ck74rk21wg5lz0786opdnzz5m\")\n.height(1)\n.name(\"name-string\"));\r\n        List<WithTaskRackTopo> resp = rackTopoApi.createRackTopo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-rack-topo": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "RackTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-rack-topo \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"RackTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, RackTopoApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    rack_topo_api = RackTopoApi(client)\r\n    resp = rack_topo_api.update_rack_topo({\"data\":{},\"where\":{\"id\":\"RackTopo-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/rack_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        rack_topo_api := client.RackTopo\r\n    params := rack_topo.NewUpdateRackTopoParams()\r\n    params.RequestBody = &models.RackTopoUpdationParams{\nData: &models.RackTopoUpdationParamsData{\n},\nWhere: &models.RackTopoWhereInput{\nID: pointy.String(\"RackTopo-id\"),\n},\n}\r\n    rawResp, err := rack_topo_api.UpdateRackTopo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskRackTopo) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.RackTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        RackTopoApi rackTopoApi = new RackTopoApi(client);\r\n        RackTopoUpdationParams params = new RackTopoUpdationParams()\n.data(new RackTopoUpdationParamsData())\n.where(new RackTopoWhereInput()\n.id(\"RackTopo-id\"));\r\n        List<WithTaskRackTopo> resp = rackTopoApi.updateRackTopo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-rack-topo": {
    "exampleValue": {
      "where": {
        "id": "RackTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-rack-topo \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"RackTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, RackTopoApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    rack_topo_api = RackTopoApi(client)\r\n    resp = rack_topo_api.delete_rack_topo({\"where\":{\"id\":\"RackTopo-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/rack_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        rack_topo_api := client.RackTopo\r\n    params := rack_topo.NewDeleteRackTopoParams()\r\n    params.RequestBody = &models.RackTopoDeletionParams{\nWhere: &models.RackTopoWhereInput{\nID: pointy.String(\"RackTopo-id\"),\n},\n}\r\n    rawResp, err := rack_topo_api.DeleteRackTopo(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteRackTopo) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.RackTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        RackTopoApi rackTopoApi = new RackTopoApi(client);\r\n        RackTopoDeletionParams params = new RackTopoDeletionParams()\n.where(new RackTopoWhereInput()\n.id(\"RackTopo-id\"));\r\n        List<WithTaskDeleteRackTopo> resp = rackTopoApi.deleteRackTopo(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-global-recycle-bin-setting": {
    "exampleValue": {
      "retain": 1,
      "enabled": true
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-global-recycle-bin-setting \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"retain\":1,\"enabled\":true}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.update_global_recycle_bin_setting({\"retain\":1,\"enabled\":True})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewUpdateGlobalRecycleBinSettingParams()\r\n    params.RequestBody = &models.GlobalRecycleBinUpdationParams{\nRetain: pointy.Int32(1),\nEnabled: pointy.Bool(true),\n}\r\n    rawResp, err := global_settings_api.UpdateGlobalRecycleBinSetting(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        GlobalRecycleBinUpdationParams params = new GlobalRecycleBinUpdationParams()\n.retain(1)\n.enabled(true);\r\n        WithTaskGlobalSettings resp = globalSettingsApi.updateGlobalRecycleBinSetting(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/create-cluster-recycle-bin-setting": {
    "exampleValue": {
      "data": {
        "retain": 1,
        "enabled": true
      },
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-cluster-recycle-bin-setting \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"retain\":1,\"enabled\":true},\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.create_cluster_recycle_bin_setting({\"data\":{\"retain\":1,\"enabled\":True},\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewCreateClusterRecycleBinSettingParams()\r\n    params.RequestBody = &models.ClusterRecycleBinCreationParams{\nData: &models.ClusterRecycleBinCreationParamsData{\nRetain: pointy.Int32(1),\nEnabled: pointy.Bool(true),\n},\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := global_settings_api.CreateClusterRecycleBinSetting(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskClusterSettings) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        ClusterRecycleBinCreationParams params = new ClusterRecycleBinCreationParams()\n.data(new ClusterRecycleBinCreationParamsData()\n.retain(1)\n.enabled(true))\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskClusterSettings> resp = globalSettingsApi.createClusterRecycleBinSetting(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-cluster-recycle-bin-setting": {
    "exampleValue": {
      "data": {
        "retain": 1,
        "enabled": true
      },
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-cluster-recycle-bin-setting \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"retain\":1,\"enabled\":true},\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.update_cluster_recycle_bin_setting({\"data\":{\"retain\":1,\"enabled\":True},\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewUpdateClusterRecycleBinSettingParams()\r\n    params.RequestBody = &models.ClusterRecycleBinUpdationParams{\nData: &models.ClusterRecycleBinUpdationParamsData{\nRetain: pointy.Int32(1),\nEnabled: pointy.Bool(true),\n},\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := global_settings_api.UpdateClusterRecycleBinSetting(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskClusterSettings) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        ClusterRecycleBinUpdationParams params = new ClusterRecycleBinUpdationParams()\n.data(new ClusterRecycleBinUpdationParamsData()\n.retain(1)\n.enabled(true))\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskClusterSettings> resp = globalSettingsApi.updateClusterRecycleBinSetting(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-cluster-recycle-bin-setting": {
    "exampleValue": {
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-cluster-recycle-bin-setting \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.delete_cluster_recycle_bin_setting({\"where\":{\"id\":\"Cluster-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewDeleteClusterRecycleBinSettingParams()\r\n    params.RequestBody = &models.ClusterRecycleBinDeletionParams{\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := global_settings_api.DeleteClusterRecycleBinSetting(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteClusterRecycleBin) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        ClusterRecycleBinDeletionParams params = new ClusterRecycleBinDeletionParams()\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<WithTaskDeleteClusterRecycleBin> resp = globalSettingsApi.deleteClusterRecycleBinSetting(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-report-template": {
    "exampleValue": [
      {
        "resource_meta": [
          {
            "type": "ALERT",
            "name": "name-string",
            "filter": "",
            "fields": [
              "-string"
            ]
          }
        ],
        "execute_plan": [
          {
            "start_at": "start_at-string",
            "retain": 1,
            "period": "period-string",
            "id": "ck74rk21wg5lz0786opdnzz5m",
            "enabled": true
          }
        ],
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-report-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"resource_meta\":[{\"type\":\"ALERT\",\"name\":\"name-string\",\"filter\":\"\",\"fields\":[\"-string\"]}],\"execute_plan\":[{\"start_at\":\"start_at-string\",\"retain\":1,\"period\":\"period-string\",\"id\":\"ck74rk21wg5lz0786opdnzz5m\",\"enabled\":true}],\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, ReportTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    report_template_api = ReportTemplateApi(client)\r\n    resp = report_template_api.create_report_template([{\"resource_meta\":[{\"type\":\"ALERT\",\"name\":\"name-string\",\"filter\":\"\",\"fields\":[\"-string\"]}],\"execute_plan\":[{\"start_at\":\"start_at-string\",\"retain\":1,\"period\":\"period-string\",\"id\":\"ck74rk21wg5lz0786opdnzz5m\",\"enabled\":True}],\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/report_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        report_template_api := client.ReportTemplate\r\n    params := report_template.NewCreateReportTemplateParams()\r\n    params.RequestBody = []*models.ReportTemplateCreationParams{\n{\nResourceMeta: []*models.ResourceMeta{\n{\nType: models.ReportResourceInputEnumALERT.Pointer(),\nName: pointy.String(\"name-string\"),\nFilter: interface{}(\"\"),\nFields: []string{\"-string\",\n},\n},\n},\nExecutePlan: []*models.ExecutePlan{\n{\nStartAt: pointy.String(\"start_at-string\"),\nRetain: pointy.Int32(1),\nPeriod: pointy.String(\"period-string\"),\nID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nEnabled: pointy.Bool(true),\n},\n},\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := report_template_api.CreateReportTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskReportTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ReportTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ReportTemplateApi reportTemplateApi = new ReportTemplateApi(client);\r\n        List<ReportTemplateCreationParams> params = new ArrayList<>();\r\n        params.add(new ReportTemplateCreationParams()\n.addResourceMetaItem(new ResourceMeta()\n.type(ReportResourceInputEnum.fromValue(\"ALERT\"))\n.name(\"name-string\")\n.filter(new Object())\n.addFieldsItem(\"-string\"))\n.addExecutePlanItem(new ExecutePlan()\n.startAt(\"start_at-string\")\n.retain(1)\n.period(\"period-string\")\n.id(\"ck74rk21wg5lz0786opdnzz5m\")\n.enabled(true))\n.name(\"name-string\"));\r\n        List<WithTaskReportTemplate> resp = reportTemplateApi.createReportTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-report-template": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "ReportTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-report-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"ReportTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ReportTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    report_template_api = ReportTemplateApi(client)\r\n    resp = report_template_api.update_report_template({\"data\":{},\"where\":{\"id\":\"ReportTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/report_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        report_template_api := client.ReportTemplate\r\n    params := report_template.NewUpdateReportTemplateParams()\r\n    params.RequestBody = &models.ReportTemplateUpdationParams{\nData: &models.ReportTemplateUpdationParamsData{\n},\nWhere: &models.ReportTemplateWhereInput{\nID: pointy.String(\"ReportTemplate-id\"),\n},\n}\r\n    rawResp, err := report_template_api.UpdateReportTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskReportTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ReportTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ReportTemplateApi reportTemplateApi = new ReportTemplateApi(client);\r\n        ReportTemplateUpdationParams params = new ReportTemplateUpdationParams()\n.data(new ReportTemplateUpdationParamsData())\n.where(new ReportTemplateWhereInput()\n.id(\"ReportTemplate-id\"));\r\n        List<WithTaskReportTemplate> resp = reportTemplateApi.updateReportTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/generate-from-report-template": {
    "exampleValue": {
      "where": {
        "id": "ReportTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/generate-from-report-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ReportTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ReportTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    report_template_api = ReportTemplateApi(client)\r\n    resp = report_template_api.generate_from_report_template({\"where\":{\"id\":\"ReportTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/report_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        report_template_api := client.ReportTemplate\r\n    params := report_template.NewGenerateFromReportTemplateParams()\r\n    params.RequestBody = &models.ReporteTemplateGenerationParams{\nWhere: &models.ReportTemplateWhereInput{\nID: pointy.String(\"ReportTemplate-id\"),\n},\n}\r\n    rawResp, err := report_template_api.GenerateFromReportTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskReportTask) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ReportTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ReportTemplateApi reportTemplateApi = new ReportTemplateApi(client);\r\n        ReporteTemplateGenerationParams params = new ReporteTemplateGenerationParams()\n.where(new ReportTemplateWhereInput()\n.id(\"ReportTemplate-id\"));\r\n        List<WithTaskReportTask> resp = reportTemplateApi.generateFromReportTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-report-template": {
    "exampleValue": {
      "where": {
        "id": "ReportTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-report-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ReportTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ReportTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    report_template_api = ReportTemplateApi(client)\r\n    resp = report_template_api.delete_report_template({\"where\":{\"id\":\"ReportTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/report_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        report_template_api := client.ReportTemplate\r\n    params := report_template.NewDeleteReportTemplateParams()\r\n    params.RequestBody = &models.ReportTemplateDeletionParams{\nWhere: &models.ReportTemplateWhereInput{\nID: pointy.String(\"ReportTemplate-id\"),\n},\n}\r\n    rawResp, err := report_template_api.DeleteReportTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteReportTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ReportTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ReportTemplateApi reportTemplateApi = new ReportTemplateApi(client);\r\n        ReportTemplateDeletionParams params = new ReportTemplateDeletionParams()\n.where(new ReportTemplateWhereInput()\n.id(\"ReportTemplate-id\"));\r\n        List<WithTaskDeleteReportTemplate> resp = reportTemplateApi.deleteReportTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-role": {
    "exampleValue": [
      {
        "actions": [
          "*"
        ],
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-role \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"actions\":[\"*\"],\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, UserRoleNextApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_role_next_api = UserRoleNextApi(client)\r\n    resp = user_role_next_api.create_role([{\"actions\":[\"*\"],\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user_role_next\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_role_next_api := client.UserRoleNext\r\n    params := user_role_next.NewCreateRoleParams()\r\n    params.RequestBody = []*models.RoleCreationParams{\n{\nActions: []*models.RoleAction{\nmodels.RoleAction*.Pointer(),\n},\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := user_role_next_api.CreateRole(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskUserRoleNext) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserRoleNextApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserRoleNextApi userRoleNextApi = new UserRoleNextApi(client);\r\n        List<RoleCreationParams> params = new ArrayList<>();\r\n        params.add(new RoleCreationParams()\n.addActionsItem(RoleAction.fromValue(\"*\"))\n.name(\"name-string\"));\r\n        List<WithTaskUserRoleNext> resp = userRoleNextApi.createRole(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-role": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "UserRoleNext-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-role \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"UserRoleNext-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserRoleNextApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_role_next_api = UserRoleNextApi(client)\r\n    resp = user_role_next_api.update_role({\"data\":{},\"where\":{\"id\":\"UserRoleNext-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user_role_next\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_role_next_api := client.UserRoleNext\r\n    params := user_role_next.NewUpdateRoleParams()\r\n    params.RequestBody = &models.RoleUpdationParams{\nData: &models.RoleUpdationParamsData{\n},\nWhere: &models.UserRoleNextWhereInput{\nID: pointy.String(\"UserRoleNext-id\"),\n},\n}\r\n    rawResp, err := user_role_next_api.UpdateRole(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskUserRoleNext) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserRoleNextApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserRoleNextApi userRoleNextApi = new UserRoleNextApi(client);\r\n        RoleUpdationParams params = new RoleUpdationParams()\n.data(new RoleUpdationParamsData())\n.where(new UserRoleNextWhereInput()\n.id(\"UserRoleNext-id\"));\r\n        List<WithTaskUserRoleNext> resp = userRoleNextApi.updateRole(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-role": {
    "exampleValue": {
      "where": {
        "id": "UserRoleNext-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-role \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UserRoleNext-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserRoleNextApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_role_next_api = UserRoleNextApi(client)\r\n    resp = user_role_next_api.delete_role({\"where\":{\"id\":\"UserRoleNext-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user_role_next\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_role_next_api := client.UserRoleNext\r\n    params := user_role_next.NewDeleteRoleParams()\r\n    params.RequestBody = &models.RoleDeletionParams{\nWhere: &models.UserRoleNextWhereInput{\nID: pointy.String(\"UserRoleNext-id\"),\n},\n}\r\n    rawResp, err := user_role_next_api.DeleteRole(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteRole) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserRoleNextApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserRoleNextApi userRoleNextApi = new UserRoleNextApi(client);\r\n        RoleDeletionParams params = new RoleDeletionParams()\n.where(new UserRoleNextWhereInput()\n.id(\"UserRoleNext-id\"));\r\n        List<WithTaskDeleteRole> resp = userRoleNextApi.deleteRole(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-security-group": {
    "exampleValue": {
      "everoute_cluster_id": "ck74rk21wg5lz0786opdnzz5m",
      "name": "name-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-security-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"everoute_cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityGroupApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_group_api = SecurityGroupApi(client)\r\n    resp = security_group_api.create_security_group({\"everoute_cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_group_api := client.SecurityGroup\r\n    params := security_group.NewCreateSecurityGroupParams()\r\n    params.RequestBody = &models.SecurityGroupCreateParams{\nEverouteClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n}\r\n    rawResp, err := security_group_api.CreateSecurityGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SecurityGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityGroupApi securityGroupApi = new SecurityGroupApi(client);\r\n        SecurityGroupCreateParams params = new SecurityGroupCreateParams()\n.everouteClusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\");\r\n        WithTaskSecurityGroup resp = securityGroupApi.createSecurityGroup(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/delete-security-group": {
    "exampleValue": {
      "where": {
        "id": "SecurityGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-security-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SecurityGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_group_api = SecurityGroupApi(client)\r\n    resp = security_group_api.delete_security_group({\"where\":{\"id\":\"SecurityGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_group_api := client.SecurityGroup\r\n    params := security_group.NewDeleteSecurityGroupParams()\r\n    params.RequestBody = &models.SecurityGroupDeleteParams{\nWhere: &models.SecurityGroupWhereInput{\nID: pointy.String(\"SecurityGroup-id\"),\n},\n}\r\n    rawResp, err := security_group_api.DeleteSecurityGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteSecurityGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SecurityGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityGroupApi securityGroupApi = new SecurityGroupApi(client);\r\n        SecurityGroupDeleteParams params = new SecurityGroupDeleteParams()\n.where(new SecurityGroupWhereInput()\n.id(\"SecurityGroup-id\"));\r\n        List<WithTaskDeleteSecurityGroup> resp = securityGroupApi.deleteSecurityGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-security-group": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "SecurityGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-security-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"SecurityGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_group_api = SecurityGroupApi(client)\r\n    resp = security_group_api.update_security_group({\"data\":{},\"where\":{\"id\":\"SecurityGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_group_api := client.SecurityGroup\r\n    params := security_group.NewUpdateSecurityGroupParams()\r\n    params.RequestBody = &models.SecurityGroupUpdateBody{\nData: &models.SecurityGroupUpdateParams{\n},\nWhere: &models.SecurityGroupWhereInput{\nID: pointy.String(\"SecurityGroup-id\"),\n},\n}\r\n    rawResp, err := security_group_api.UpdateSecurityGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSecurityGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SecurityGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityGroupApi securityGroupApi = new SecurityGroupApi(client);\r\n        SecurityGroupUpdateBody params = new SecurityGroupUpdateBody()\n.data(new SecurityGroupUpdateParams())\n.where(new SecurityGroupWhereInput()\n.id(\"SecurityGroup-id\"));\r\n        List<WithTaskSecurityGroup> resp = securityGroupApi.updateSecurityGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-security-policy": {
    "exampleValue": {
      "everoute_cluster_id": "ck74rk21wg5lz0786opdnzz5m",
      "name": "name-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-security-policy \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"everoute_cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityPolicyApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_policy_api = SecurityPolicyApi(client)\r\n    resp = security_policy_api.create_security_policy({\"everoute_cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_policy_api := client.SecurityPolicy\r\n    params := security_policy.NewCreateSecurityPolicyParams()\r\n    params.RequestBody = &models.SecurityPolicyCreateParams{\nEverouteClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n}\r\n    rawResp, err := security_policy_api.CreateSecurityPolicy(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SecurityPolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityPolicyApi securityPolicyApi = new SecurityPolicyApi(client);\r\n        SecurityPolicyCreateParams params = new SecurityPolicyCreateParams()\n.everouteClusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\");\r\n        WithTaskSecurityPolicy resp = securityPolicyApi.createSecurityPolicy(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/delete-security-policy": {
    "exampleValue": {
      "where": {
        "id": "SecurityPolicy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-security-policy \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SecurityPolicy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityPolicyApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_policy_api = SecurityPolicyApi(client)\r\n    resp = security_policy_api.delete_security_policy({\"where\":{\"id\":\"SecurityPolicy-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_policy_api := client.SecurityPolicy\r\n    params := security_policy.NewDeleteSecurityPolicyParams()\r\n    params.RequestBody = &models.SecurityPolicyDeleteParams{\nWhere: &models.SecurityPolicyWhereInput{\nID: pointy.String(\"SecurityPolicy-id\"),\n},\n}\r\n    rawResp, err := security_policy_api.DeleteSecurityPolicy(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteSecurityPolicy) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SecurityPolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityPolicyApi securityPolicyApi = new SecurityPolicyApi(client);\r\n        SecurityPolicyDeleteParams params = new SecurityPolicyDeleteParams()\n.where(new SecurityPolicyWhereInput()\n.id(\"SecurityPolicy-id\"));\r\n        List<WithTaskDeleteSecurityPolicy> resp = securityPolicyApi.deleteSecurityPolicy(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-security-policy": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "SecurityPolicy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-security-policy \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"SecurityPolicy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityPolicyApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_policy_api = SecurityPolicyApi(client)\r\n    resp = security_policy_api.update_security_policy({\"data\":{},\"where\":{\"id\":\"SecurityPolicy-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_policy_api := client.SecurityPolicy\r\n    params := security_policy.NewUpdateSecurityPolicyParams()\r\n    params.RequestBody = &models.SecurityPolicyUpdateBody{\nData: &models.SecurityPolicyUpdateParams{\n},\nWhere: &models.SecurityPolicyWhereInput{\nID: pointy.String(\"SecurityPolicy-id\"),\n},\n}\r\n    rawResp, err := security_policy_api.UpdateSecurityPolicy(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSecurityPolicy) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SecurityPolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityPolicyApi securityPolicyApi = new SecurityPolicyApi(client);\r\n        SecurityPolicyUpdateBody params = new SecurityPolicyUpdateBody()\n.data(new SecurityPolicyUpdateParams())\n.where(new SecurityPolicyWhereInput()\n.id(\"SecurityPolicy-id\"));\r\n        List<WithTaskSecurityPolicy> resp = securityPolicyApi.updateSecurityPolicy(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-password-security": {
    "exampleValue": {},
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-password-security \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.update_password_security({})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewUpdatePasswordSecurityParams()\r\n    params.RequestBody = &models.UpdatePassrodSecurityParams{\n}\r\n    rawResp, err := global_settings_api.UpdatePasswordSecurity(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        UpdatePassrodSecurityParams params = new UpdatePassrodSecurityParams();\r\n        WithTaskGlobalSettings resp = globalSettingsApi.updatePasswordSecurity(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/update-access-restriction": {
    "exampleValue": {
      "access_list": [
        "-string"
      ],
      "access_mode": "ALLOW"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-access-restriction \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"access_list\":[\"-string\"],\"access_mode\":\"ALLOW\"}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.update_access_restriction({\"access_list\":[\"-string\"],\"access_mode\":\"ALLOW\"})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewUpdateAccessRestrictionParams()\r\n    params.RequestBody = &models.UpdateAccessRestrictionParams{\nAccessList: []string{\"-string\",\n},\nAccessMode: models.AccessModeALLOW.Pointer(),\n}\r\n    rawResp, err := global_settings_api.UpdateAccessRestriction(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        UpdateAccessRestrictionParams params = new UpdateAccessRestrictionParams()\n.addAccessListItem(\"-string\")\n.accessMode(AccessMode.fromValue(\"ALLOW\"));\r\n        WithTaskGlobalSettings resp = globalSettingsApi.updateAccessRestriction(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/update-session-timeout": {
    "exampleValue": {
      "session_max_age": 1
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-session-timeout \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"session_max_age\":1}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.update_session_timeout({\"session_max_age\":1})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewUpdateSessionTimeoutParams()\r\n    params.RequestBody = &models.UpdateSessionTimeoutParams{\nSessionMaxAge: pointy.Int32(1),\n}\r\n    rawResp, err := global_settings_api.UpdateSessionTimeout(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        UpdateSessionTimeoutParams params = new UpdateSessionTimeoutParams()\n.sessionMaxAge(1);\r\n        WithTaskGlobalSettings resp = globalSettingsApi.updateSessionTimeout(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/rollback-snapshot-group": {
    "exampleValue": {
      "where": {
        "id": "SnapshotGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/rollback-snapshot-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_group_api = SnapshotGroupApi(client)\r\n    resp = snapshot_group_api.rollback_snapshot_group({\"where\":{\"id\":\"SnapshotGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_group_api := client.SnapshotGroup\r\n    params := snapshot_group.NewRollbackSnapshotGroupParams()\r\n    params.RequestBody = &models.SnapshotGroupRollbackParams{\nWhere: &models.SnapshotGroupWhereInput{\nID: pointy.String(\"SnapshotGroup-id\"),\n},\n}\r\n    rawResp, err := snapshot_group_api.RollbackSnapshotGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnapshotGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotGroupApi snapshotGroupApi = new SnapshotGroupApi(client);\r\n        SnapshotGroupRollbackParams params = new SnapshotGroupRollbackParams()\n.where(new SnapshotGroupWhereInput()\n.id(\"SnapshotGroup-id\"));\r\n        List<WithTaskSnapshotGroup> resp = snapshotGroupApi.rollbackSnapshotGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/clone-snapshot-group": {
    "exampleValue": [
      {
        "clone": [
          {
            "from_source_vm_id": "ck74rk21wg5lz0786opdnzz5m",
            "to_cloned_vm_name": "to_cloned_vm_name-string"
          }
        ],
        "id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/clone-snapshot-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"clone\":[{\"from_source_vm_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"to_cloned_vm_name\":\"to_cloned_vm_name-string\"}],\"id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_group_api = SnapshotGroupApi(client)\r\n    resp = snapshot_group_api.clone_snapshot_group([{\"clone\":[{\"from_source_vm_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"to_cloned_vm_name\":\"to_cloned_vm_name-string\"}],\"id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_group_api := client.SnapshotGroup\r\n    params := snapshot_group.NewCloneSnapshotGroupParams()\r\n    params.RequestBody = []*models.SnapshotGroupCloneParams{\n{\nClone: []*models.SnapshotGroupCloneParam{\n{\nFromSourceVMID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nToClonedVMName: pointy.String(\"to_cloned_vm_name-string\"),\n},\n},\nID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := snapshot_group_api.CloneSnapshotGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnapshotGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotGroupApi snapshotGroupApi = new SnapshotGroupApi(client);\r\n        List<SnapshotGroupCloneParams> params = new ArrayList<>();\r\n        params.add(new SnapshotGroupCloneParams()\n.addCloneItem(new SnapshotGroupCloneParam()\n.fromSourceVmId(\"ck74rk21wg5lz0786opdnzz5m\")\n.toClonedVmName(\"to_cloned_vm_name-string\"))\n.id(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskSnapshotGroup> resp = snapshotGroupApi.cloneSnapshotGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/keep-snapshot-group": {
    "exampleValue": {
      "where": {
        "id": "SnapshotGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/keep-snapshot-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_group_api = SnapshotGroupApi(client)\r\n    resp = snapshot_group_api.keep_snapshot_group({\"where\":{\"id\":\"SnapshotGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_group_api := client.SnapshotGroup\r\n    params := snapshot_group.NewKeepSnapshotGroupParams()\r\n    params.RequestBody = &models.SnapshotGroupKeepParams{\nWhere: &models.SnapshotGroupWhereInput{\nID: pointy.String(\"SnapshotGroup-id\"),\n},\n}\r\n    rawResp, err := snapshot_group_api.KeepSnapshotGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnapshotGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotGroupApi snapshotGroupApi = new SnapshotGroupApi(client);\r\n        SnapshotGroupKeepParams params = new SnapshotGroupKeepParams()\n.where(new SnapshotGroupWhereInput()\n.id(\"SnapshotGroup-id\"));\r\n        List<WithTaskSnapshotGroup> resp = snapshotGroupApi.keepSnapshotGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-snapshot-group": {
    "exampleValue": {
      "where": {
        "id": "SnapshotGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-snapshot-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_group_api = SnapshotGroupApi(client)\r\n    resp = snapshot_group_api.delete_snapshot_group({\"where\":{\"id\":\"SnapshotGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_group_api := client.SnapshotGroup\r\n    params := snapshot_group.NewDeleteSnapshotGroupParams()\r\n    params.RequestBody = &models.SnapshotGroupDeletionParams{\nWhere: &models.SnapshotGroupWhereInput{\nID: pointy.String(\"SnapshotGroup-id\"),\n},\n}\r\n    rawResp, err := snapshot_group_api.DeleteSnapshotGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteSnapshotGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotGroupApi snapshotGroupApi = new SnapshotGroupApi(client);\r\n        SnapshotGroupDeletionParams params = new SnapshotGroupDeletionParams()\n.where(new SnapshotGroupWhereInput()\n.id(\"SnapshotGroup-id\"));\r\n        List<WithTaskDeleteSnapshotGroup> resp = snapshotGroupApi.deleteSnapshotGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-snapshot-plan": {
    "exampleValue": [
      {
        "vm_ids": [
          "-string"
        ],
        "execute_intervals": [
          1
        ],
        "execute_plan_type": "DAY",
        "start_time": "start_time-string",
        "remain_snapshot_num": 1,
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-snapshot-plan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"vm_ids\":[\"-string\"],\"execute_intervals\":[1],\"execute_plan_type\":\"DAY\",\"start_time\":\"start_time-string\",\"remain_snapshot_num\":1,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_api = SnapshotPlanApi(client)\r\n    resp = snapshot_plan_api.create_snapshot_plan([{\"vm_ids\":[\"-string\"],\"execute_intervals\":[1],\"execute_plan_type\":\"DAY\",\"start_time\":\"start_time-string\",\"remain_snapshot_num\":1,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_api := client.SnapshotPlan\r\n    params := snapshot_plan.NewCreateSnapshotPlanParams()\r\n    params.RequestBody = []*models.SnapshotPlanCreationParams{\n{\nVMIds: []string{\"-string\",\n},\nExecuteIntervals: []int{1\n},\nExecutePlanType: models.SnapshotPlanExecuteTypeDAY.Pointer(),\nStartTime: pointy.String(\"start_time-string\"),\nRemainSnapshotNum: pointy.Int32(1),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := snapshot_plan_api.CreateSnapshotPlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnapshotPlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotPlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanApi snapshotPlanApi = new SnapshotPlanApi(client);\r\n        List<SnapshotPlanCreationParams> params = new ArrayList<>();\r\n        params.add(new SnapshotPlanCreationParams()\n.addVmIdsItem(\"-string\")\n.addExecuteIntervalsItem(1)\n.executePlanType(SnapshotPlanExecuteType.fromValue(\"DAY\"))\n.startTime(\"start_time-string\")\n.remainSnapshotNum(1)\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskSnapshotPlan> resp = snapshotPlanApi.createSnapshotPlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-snapshot-plan": {
    "exampleValue": {
      "where": {
        "id": "SnapshotPlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-snapshot-plan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotPlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_api = SnapshotPlanApi(client)\r\n    resp = snapshot_plan_api.update_snapshot_plan({\"where\":{\"id\":\"SnapshotPlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_api := client.SnapshotPlan\r\n    params := snapshot_plan.NewUpdateSnapshotPlanParams()\r\n    params.RequestBody = &models.SnapshotPlanUpdationParams{\nWhere: &models.SnapshotPlanWhereInput{\nID: pointy.String(\"SnapshotPlan-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_api.UpdateSnapshotPlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnapshotPlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotPlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanApi snapshotPlanApi = new SnapshotPlanApi(client);\r\n        SnapshotPlanUpdationParams params = new SnapshotPlanUpdationParams()\n.where(new SnapshotPlanWhereInput()\n.id(\"SnapshotPlan-id\"));\r\n        List<WithTaskSnapshotPlan> resp = snapshotPlanApi.updateSnapshotPlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-snapshot-plan": {
    "exampleValue": {
      "where": {
        "id": "SnapshotPlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-snapshot-plan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotPlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_api = SnapshotPlanApi(client)\r\n    resp = snapshot_plan_api.delete_snapshot_plan({\"where\":{\"id\":\"SnapshotPlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_api := client.SnapshotPlan\r\n    params := snapshot_plan.NewDeleteSnapshotPlanParams()\r\n    params.RequestBody = &models.SnapshotPlanDeletionParams{\nWhere: &models.SnapshotPlanWhereInput{\nID: pointy.String(\"SnapshotPlan-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_api.DeleteSnapshotPlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteSnapshotPlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotPlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanApi snapshotPlanApi = new SnapshotPlanApi(client);\r\n        SnapshotPlanDeletionParams params = new SnapshotPlanDeletionParams()\n.where(new SnapshotPlanWhereInput()\n.id(\"SnapshotPlan-id\"));\r\n        List<WithTaskDeleteSnapshotPlan> resp = snapshotPlanApi.deleteSnapshotPlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/execute-snapshot-plan": {
    "exampleValue": {
      "data": {
        "task_name": "task_name-string"
      },
      "where": {
        "id": "SnapshotPlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/execute-snapshot-plan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"task_name\":\"task_name-string\"},\"where\":{\"id\":\"SnapshotPlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_api = SnapshotPlanApi(client)\r\n    resp = snapshot_plan_api.execute_snapshot_plan({\"data\":{\"task_name\":\"task_name-string\"},\"where\":{\"id\":\"SnapshotPlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_api := client.SnapshotPlan\r\n    params := snapshot_plan.NewExecuteSnapshotPlanParams()\r\n    params.RequestBody = &models.SnapshotPlanExecutionParams{\nData: &models.SnapshotPlanExecutionParamsData{\nTaskName: pointy.String(\"task_name-string\"),\n},\nWhere: &models.SnapshotPlanWhereInput{\nID: pointy.String(\"SnapshotPlan-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_api.ExecuteSnapshotPlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnapshotPlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotPlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanApi snapshotPlanApi = new SnapshotPlanApi(client);\r\n        SnapshotPlanExecutionParams params = new SnapshotPlanExecutionParams()\n.data(new SnapshotPlanExecutionParamsData()\n.taskName(\"task_name-string\"))\n.where(new SnapshotPlanWhereInput()\n.id(\"SnapshotPlan-id\"));\r\n        List<WithTaskSnapshotPlan> resp = snapshotPlanApi.executeSnapshotPlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/suspend-snapshot-plan": {
    "exampleValue": {
      "where": {
        "id": "SnapshotPlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/suspend-snapshot-plan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotPlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_api = SnapshotPlanApi(client)\r\n    resp = snapshot_plan_api.suspend_snapshot_plan({\"where\":{\"id\":\"SnapshotPlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_api := client.SnapshotPlan\r\n    params := snapshot_plan.NewSuspendSnapshotPlanParams()\r\n    params.RequestBody = &models.SnapshotPlanSuspendedParams{\nWhere: &models.SnapshotPlanWhereInput{\nID: pointy.String(\"SnapshotPlan-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_api.SuspendSnapshotPlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnapshotPlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotPlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanApi snapshotPlanApi = new SnapshotPlanApi(client);\r\n        SnapshotPlanSuspendedParams params = new SnapshotPlanSuspendedParams()\n.where(new SnapshotPlanWhereInput()\n.id(\"SnapshotPlan-id\"));\r\n        List<WithTaskSnapshotPlan> resp = snapshotPlanApi.suspendSnapshotPlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/resume-snapshot-plan": {
    "exampleValue": {
      "where": {
        "id": "SnapshotPlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/resume-snapshot-plan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotPlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_api = SnapshotPlanApi(client)\r\n    resp = snapshot_plan_api.resume_snapshot_plan({\"where\":{\"id\":\"SnapshotPlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_api := client.SnapshotPlan\r\n    params := snapshot_plan.NewResumeSnapshotPlanParams()\r\n    params.RequestBody = &models.SnapshotPlanResumeParams{\nWhere: &models.SnapshotPlanWhereInput{\nID: pointy.String(\"SnapshotPlan-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_api.ResumeSnapshotPlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnapshotPlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnapshotPlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanApi snapshotPlanApi = new SnapshotPlanApi(client);\r\n        SnapshotPlanResumeParams params = new SnapshotPlanResumeParams()\n.where(new SnapshotPlanWhereInput()\n.id(\"SnapshotPlan-id\"));\r\n        List<WithTaskSnapshotPlan> resp = snapshotPlanApi.resumeSnapshotPlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-snmp-transport": {
    "exampleValue": [
      {
        "port": 1,
        "protocol": "TCP",
        "version": "V2C",
        "name": "name-string",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-snmp-transport \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"port\":1,\"protocol\":\"TCP\",\"version\":\"V2C\",\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTransportApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_transport_api = SnmpTransportApi(client)\r\n    resp = snmp_transport_api.create_snmp_transport([{\"port\":1,\"protocol\":\"TCP\",\"version\":\"V2C\",\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_transport\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_transport_api := client.SnmpTransport\r\n    params := snmp_transport.NewCreateSnmpTransportParams()\r\n    params.RequestBody = []*models.SnmpTransportCreationParams{\n{\nPort: pointy.Int32(1),\nProtocol: models.SnmpProtocolTCP.Pointer(),\nVersion: models.SnmpVersionV2C.Pointer(),\nName: pointy.String(\"name-string\"),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := snmp_transport_api.CreateSnmpTransport(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnmpTransport) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnmpTransportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTransportApi snmpTransportApi = new SnmpTransportApi(client);\r\n        List<SnmpTransportCreationParams> params = new ArrayList<>();\r\n        params.add(new SnmpTransportCreationParams()\n.port(1)\n.protocol(SnmpProtocol.fromValue(\"TCP\"))\n.version(SnmpVersion.fromValue(\"V2C\"))\n.name(\"name-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskSnmpTransport> resp = snmpTransportApi.createSnmpTransport(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-snmp-transport": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "SnmpTransport-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-snmp-transport \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"SnmpTransport-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTransportApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_transport_api = SnmpTransportApi(client)\r\n    resp = snmp_transport_api.update_snmp_transport({\"data\":{},\"where\":{\"id\":\"SnmpTransport-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_transport\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_transport_api := client.SnmpTransport\r\n    params := snmp_transport.NewUpdateSnmpTransportParams()\r\n    params.RequestBody = &models.SnmpTransportUpdationParams{\nData: &models.SnmpTransportUpdationParamsData{\n},\nWhere: &models.SnmpTransportWhereInput{\nID: pointy.String(\"SnmpTransport-id\"),\n},\n}\r\n    rawResp, err := snmp_transport_api.UpdateSnmpTransport(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnmpTransport) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnmpTransportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTransportApi snmpTransportApi = new SnmpTransportApi(client);\r\n        SnmpTransportUpdationParams params = new SnmpTransportUpdationParams()\n.data(new SnmpTransportUpdationParamsData())\n.where(new SnmpTransportWhereInput()\n.id(\"SnmpTransport-id\"));\r\n        List<WithTaskSnmpTransport> resp = snmpTransportApi.updateSnmpTransport(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-snmp-transport": {
    "exampleValue": {
      "where": {
        "id": "SnmpTransport-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-snmp-transport \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnmpTransport-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTransportApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_transport_api = SnmpTransportApi(client)\r\n    resp = snmp_transport_api.delete_snmp_transport({\"where\":{\"id\":\"SnmpTransport-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_transport\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_transport_api := client.SnmpTransport\r\n    params := snmp_transport.NewDeleteSnmpTransportParams()\r\n    params.RequestBody = &models.SnmpTransportDeletionParams{\nWhere: &models.SnmpTransportWhereInput{\nID: pointy.String(\"SnmpTransport-id\"),\n},\n}\r\n    rawResp, err := snmp_transport_api.DeleteSnmpTransport(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteSnmpTransport) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnmpTransportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTransportApi snmpTransportApi = new SnmpTransportApi(client);\r\n        SnmpTransportDeletionParams params = new SnmpTransportDeletionParams()\n.where(new SnmpTransportWhereInput()\n.id(\"SnmpTransport-id\"));\r\n        List<WithTaskDeleteSnmpTransport> resp = snmpTransportApi.deleteSnmpTransport(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-snmp-trap-receiver": {
    "exampleValue": [
      {
        "language_code": "EN_US",
        "port": 1,
        "host": "host-string",
        "protocol": "TCP",
        "version": "V2C",
        "name": "name-string",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-snmp-trap-receiver \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"language_code\":\"EN_US\",\"port\":1,\"host\":\"host-string\",\"protocol\":\"TCP\",\"version\":\"V2C\",\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTrapReceiverApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_trap_receiver_api = SnmpTrapReceiverApi(client)\r\n    resp = snmp_trap_receiver_api.create_snmp_trap_receiver([{\"language_code\":\"EN_US\",\"port\":1,\"host\":\"host-string\",\"protocol\":\"TCP\",\"version\":\"V2C\",\"name\":\"name-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_trap_receiver\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_trap_receiver_api := client.SnmpTrapReceiver\r\n    params := snmp_trap_receiver.NewCreateSnmpTrapReceiverParams()\r\n    params.RequestBody = []*models.SnmpTrapReceiverCreationParams{\n{\nLanguageCode: models.SnmpLanguageCodeEN_US.Pointer(),\nPort: pointy.Int32(1),\nHost: pointy.String(\"host-string\"),\nProtocol: models.SnmpProtocolTCP.Pointer(),\nVersion: models.SnmpVersionV2C.Pointer(),\nName: pointy.String(\"name-string\"),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := snmp_trap_receiver_api.CreateSnmpTrapReceiver(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnmpTrapReceiver) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnmpTrapReceiverApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTrapReceiverApi snmpTrapReceiverApi = new SnmpTrapReceiverApi(client);\r\n        List<SnmpTrapReceiverCreationParams> params = new ArrayList<>();\r\n        params.add(new SnmpTrapReceiverCreationParams()\n.languageCode(SnmpLanguageCode.fromValue(\"EN_US\"))\n.port(1)\n.host(\"host-string\")\n.protocol(SnmpProtocol.fromValue(\"TCP\"))\n.version(SnmpVersion.fromValue(\"V2C\"))\n.name(\"name-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskSnmpTrapReceiver> resp = snmpTrapReceiverApi.createSnmpTrapReceiver(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-snmp-trap-receiver": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "SnmpTrapReceiver-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-snmp-trap-receiver \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"SnmpTrapReceiver-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTrapReceiverApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_trap_receiver_api = SnmpTrapReceiverApi(client)\r\n    resp = snmp_trap_receiver_api.update_snmp_trap_receiver({\"data\":{},\"where\":{\"id\":\"SnmpTrapReceiver-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_trap_receiver\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_trap_receiver_api := client.SnmpTrapReceiver\r\n    params := snmp_trap_receiver.NewUpdateSnmpTrapReceiverParams()\r\n    params.RequestBody = &models.SnmpTrapReceiverUpdationParams{\nData: &models.SnmpTrapReceiverUpdationParamsData{\n},\nWhere: &models.SnmpTrapReceiverWhereInput{\nID: pointy.String(\"SnmpTrapReceiver-id\"),\n},\n}\r\n    rawResp, err := snmp_trap_receiver_api.UpdateSnmpTrapReceiver(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskSnmpTrapReceiver) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnmpTrapReceiverApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTrapReceiverApi snmpTrapReceiverApi = new SnmpTrapReceiverApi(client);\r\n        SnmpTrapReceiverUpdationParams params = new SnmpTrapReceiverUpdationParams()\n.data(new SnmpTrapReceiverUpdationParamsData())\n.where(new SnmpTrapReceiverWhereInput()\n.id(\"SnmpTrapReceiver-id\"));\r\n        List<WithTaskSnmpTrapReceiver> resp = snmpTrapReceiverApi.updateSnmpTrapReceiver(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-snmp-trap-receiver": {
    "exampleValue": {
      "where": {
        "id": "SnmpTrapReceiver-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-snmp-trap-receiver \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnmpTrapReceiver-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTrapReceiverApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_trap_receiver_api = SnmpTrapReceiverApi(client)\r\n    resp = snmp_trap_receiver_api.delete_snmp_trap_receiver({\"where\":{\"id\":\"SnmpTrapReceiver-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_trap_receiver\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_trap_receiver_api := client.SnmpTrapReceiver\r\n    params := snmp_trap_receiver.NewDeleteSnmpTrapReceiverParams()\r\n    params.RequestBody = &models.SnmpTrapReceiverDeletionParams{\nWhere: &models.SnmpTrapReceiverWhereInput{\nID: pointy.String(\"SnmpTrapReceiver-id\"),\n},\n}\r\n    rawResp, err := snmp_trap_receiver_api.DeleteSnmpTrapReceiver(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteSnmpTrapReceiver) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.SnmpTrapReceiverApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTrapReceiverApi snmpTrapReceiverApi = new SnmpTrapReceiverApi(client);\r\n        SnmpTrapReceiverDeletionParams params = new SnmpTrapReceiverDeletionParams()\n.where(new SnmpTrapReceiverWhereInput()\n.id(\"SnmpTrapReceiver-id\"));\r\n        List<WithTaskDeleteSnmpTrapReceiver> resp = snmpTrapReceiverApi.deleteSnmpTrapReceiver(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/upload-svt-image": {
    "exampleValue": {
      "file": "file-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/upload-svt-image \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: multipart/form-data' \\\n\t-d '{\"file\":\"file-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, SvtImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    svt_image_api = SvtImageApi(client)\r\n    with open(\"file-path\", \"rb\") as file:\r\n        resp = svt_image_api.upload_svt_image(\r\n            file=file\r\n        )\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"bytes\"\r\n    \"fmt\"\r\n    \"io\"\r\n\r\n    \"github.com/go-openapi/runtime\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/svt_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        svt_image_api := client.SvtImage\r\n    params := svt_image.NewUploadSvtImageParams()\r\n    params.File = runtime.NamedReader(\"file\",io.NopCloser(bytes.NewReader([]byte(\"file-string\"))))\r\n    resp, err := svt_image_api.UploadSvtImage(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SvtImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SvtImageApi svtImageApi = new SvtImageApi(client);\r\n        List<UploadTask> resp = svtImageApi.uploadSvtImage(\r\n            Files.readAllBytes(Path.of(\"file-string\")),\r\n            \"cluster_id\",\r\n            \"name\",\r\n            \"size\",\r\n            \"size_unit\",\r\n            \"version\",\r\n            \"upload_task_id\"\r\n        );\r\n    }\r\n}"
  },
  "/export-csv": {
    "exampleValue": {
      "filter": {},
      "columns": [
        {
          "name": "name-string",
          "path": "path-string"
        }
      ],
      "name": "name-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/export-csv \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"filter\":{},\"columns\":[{\"name\":\"name-string\",\"path\":\"path-string\"}],\"name\":\"name-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, TableReporterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    table_reporter_api = TableReporterApi(client)\r\n    resp = table_reporter_api.export_csv({\"filter\":{},\"columns\":[{\"name\":\"name-string\",\"path\":\"path-string\"}],\"name\":\"name-string\"})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/table_reporter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        table_reporter_api := client.TableReporter\r\n    params := table_reporter.NewExportCsvParams()\r\n    params.RequestBody = &models.TableReporterParams{\nFilter: &models.TableReporterParamsFilter{\n},\nColumns: []*models.ColumnConfig{\n{\nName: pointy.String(\"name-string\"),\nPath: pointy.String(\"path-string\"),\n},\n},\nName: pointy.String(\"name-string\"),\n}\r\n    rawResp, err := table_reporter_api.ExportCsv(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.TableReporterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        TableReporterApi tableReporterApi = new TableReporterApi(client);\r\n        TableReporterParams params = new TableReporterParams()\n.filter(new TableReporterParamsFilter())\n.addColumnsItem(new ColumnConfig()\n.name(\"name-string\")\n.path(\"path-string\"))\n.name(\"name-string\");\r\n        String resp = tableReporterApi.exportCsv(params);\r\n    }\r\n}"
  },
  "/create-task": {
    "exampleValue": [
      {
        "user_id": "ck74rk21wg5lz0786opdnzz5m",
        "description": {
          "en-US": "en-US-string",
          "zh-CN": "zh-CN-string"
        },
        "resource_mutation": "resource_mutation-string",
        "resource_type": "resource_type-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-task \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"user_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"description\":{\"en-US\":\"en-US-string\",\"zh-CN\":\"zh-CN-string\"},\"resource_mutation\":\"resource_mutation-string\",\"resource_type\":\"resource_type-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, TaskApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    task_api = TaskApi(client)\r\n    resp = task_api.create_task([{\"user_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"description\":{\"en-US\":\"en-US-string\",\"zh-CN\":\"zh-CN-string\"},\"resource_mutation\":\"resource_mutation-string\",\"resource_type\":\"resource_type-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        task_api := client.Task\r\n    params := task.NewCreateTaskParams()\r\n    params.RequestBody = []*models.TaskCreationParams{\n{\nUserID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nDescription: &models.TaskDescription{\nEnUs: pointy.String(\"en-US-string\"),\nZhCn: pointy.String(\"zh-CN-string\"),\n},\nResourceMutation: pointy.String(\"resource_mutation-string\"),\nResourceType: pointy.String(\"resource_type-string\"),\n},\n}\r\n    rawResp, err := task_api.CreateTask(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskTask) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.TaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        TaskApi taskApi = new TaskApi(client);\r\n        List<TaskCreationParams> params = new ArrayList<>();\r\n        params.add(new TaskCreationParams()\n.userId(\"ck74rk21wg5lz0786opdnzz5m\")\n.description(new TaskDescription()\n.enUs(\"en-US-string\")\n.zhCn(\"zh-CN-string\"))\n.resourceMutation(\"resource_mutation-string\")\n.resourceType(\"resource_type-string\"));\r\n        List<WithTaskTask> resp = taskApi.createTask(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-task": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Task-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-task \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Task-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, TaskApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    task_api = TaskApi(client)\r\n    resp = task_api.update_task({\"data\":{},\"where\":{\"id\":\"Task-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        task_api := client.Task\r\n    params := task.NewUpdateTaskParams()\r\n    params.RequestBody = &models.TaskUpdateParams{\nData: &models.TaskUpdateParamsData{\n},\nWhere: &models.TaskWhereInput{\nID: pointy.String(\"Task-id\"),\n},\n}\r\n    rawResp, err := task_api.UpdateTask(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskTask) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.TaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        TaskApi taskApi = new TaskApi(client);\r\n        TaskUpdateParams params = new TaskUpdateParams()\n.data(new TaskUpdateParamsData())\n.where(new TaskWhereInput()\n.id(\"Task-id\"));\r\n        List<WithTaskTask> resp = taskApi.updateTask(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/cancel-upload-task": {
    "exampleValue": {
      "where": {
        "id": "UploadTask-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/cancel-upload-task \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UploadTask-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UploadTaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    upload_task_api = UploadTaskApi(client)\r\n    resp = upload_task_api.cancel_upload_task({\"where\":{\"id\":\"UploadTask-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/upload_task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        upload_task_api := client.UploadTask\r\n    params := upload_task.NewCancelUploadTaskParams()\r\n    params.RequestBody = &models.CancelUploadTaskParams{\nWhere: &models.UploadTaskWhereInput{\nID: pointy.String(\"UploadTask-id\"),\n},\n}\r\n    rawResp, err := upload_task_api.CancelUploadTask(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UploadTaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UploadTaskApi uploadTaskApi = new UploadTaskApi(client);\r\n        CancelUploadTaskParams params = new CancelUploadTaskParams()\n.where(new UploadTaskWhereInput()\n.id(\"UploadTask-id\"));\r\n        List<String> resp = uploadTaskApi.cancelUploadTask(params);\r\n    }\r\n}"
  },
  "/mount-usb-device": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "UsbDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/mount-usb-device \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"UsbDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UsbDeviceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    usb_device_api = UsbDeviceApi(client)\r\n    resp = usb_device_api.mount_usb_device({\"data\":{},\"where\":{\"id\":\"UsbDevice-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/usb_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        usb_device_api := client.UsbDevice\r\n    params := usb_device.NewMountUsbDeviceParams()\r\n    params.RequestBody = &models.UsbDeviceMountParams{\nData: &models.UsbDeviceMountParamsData{\n},\nWhere: &models.UsbDeviceWhereInput{\nID: pointy.String(\"UsbDevice-id\"),\n},\n}\r\n    rawResp, err := usb_device_api.MountUsbDevice(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskUsbDevice) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UsbDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UsbDeviceApi usbDeviceApi = new UsbDeviceApi(client);\r\n        UsbDeviceMountParams params = new UsbDeviceMountParams()\n.data(new UsbDeviceMountParamsData())\n.where(new UsbDeviceWhereInput()\n.id(\"UsbDevice-id\"));\r\n        List<WithTaskUsbDevice> resp = usbDeviceApi.mountUsbDevice(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/unmount-usb-device": {
    "exampleValue": {
      "where": {
        "id": "UsbDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/unmount-usb-device \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UsbDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UsbDeviceApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    usb_device_api = UsbDeviceApi(client)\r\n    resp = usb_device_api.unmount_usb_device({\"where\":{\"id\":\"UsbDevice-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/usb_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        usb_device_api := client.UsbDevice\r\n    params := usb_device.NewUnmountUsbDeviceParams()\r\n    params.RequestBody = &models.UsbDeviceUnmountParams{\nWhere: &models.UsbDeviceWhereInput{\nID: pointy.String(\"UsbDevice-id\"),\n},\n}\r\n    rawResp, err := usb_device_api.UnmountUsbDevice(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskUsbDevice) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UsbDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UsbDeviceApi usbDeviceApi = new UsbDeviceApi(client);\r\n        UsbDeviceUnmountParams params = new UsbDeviceUnmountParams()\n.where(new UsbDeviceWhereInput()\n.id(\"UsbDevice-id\"));\r\n        List<WithTaskUsbDevice> resp = usbDeviceApi.unmountUsbDevice(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-usb-devices": {
    "exampleValue": {
      "where": {
        "id": "UsbDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-usb-devices \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UsbDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UsbDeviceApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    usb_device_api = UsbDeviceApi(client)\r\n    resp = usb_device_api.get_usb_devices({\"where\":{\"id\":\"UsbDevice-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/usb_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        usb_device_api := client.UsbDevice\r\n    params := usb_device.NewGetUsbDevicesParams()\r\n    params.RequestBody = &models.GetUsbDevicesRequestBody{\nWhere: &models.UsbDeviceWhereInput{\nID: pointy.String(\"UsbDevice-id\"),\n},\n}\r\n    rawResp, err := usb_device_api.GetUsbDevices(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UsbDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UsbDeviceApi usbDeviceApi = new UsbDeviceApi(client);\r\n        GetUsbDevicesRequestBody params = new GetUsbDevicesRequestBody()\n.where(new UsbDeviceWhereInput()\n.id(\"UsbDevice-id\"));\r\n        List<UsbDevice> resp = usbDeviceApi.getUsbDevices(params);\r\n    }\r\n}"
  },
  "/login": {
    "exampleValue": {
      "username": "username-string",
      "password": "password-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/login \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"username\":\"username-string\",\"password\":\"password-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, UserApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_api = UserApi(client)\r\n    resp = user_api.login({\"username\":\"username-string\",\"password\":\"password-string\"})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_api := client.User\r\n    params := user.NewLoginParams()\r\n    params.RequestBody = &models.LoginInput{\nUsername: pointy.String(\"username-string\"),\nPassword: pointy.String(\"password-string\"),\n}\r\n    rawResp, err := user_api.Login(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserApi userApi = new UserApi(client);\r\n        LoginInput params = new LoginInput()\n.username(\"username-string\")\n.password(\"password-string\");\r\n        WithTaskLoginResponse resp = userApi.login(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/create-user": {
    "exampleValue": [
      {
        "role_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "username": "username-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-user \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"role_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"username\":\"username-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, UserApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_api = UserApi(client)\r\n    resp = user_api.create_user([{\"role_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"username\":\"username-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_api := client.User\r\n    params := user.NewCreateUserParams()\r\n    params.RequestBody = []*models.UserCreationParams{\n{\nRoleID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nUsername: pointy.String(\"username-string\"),\n},\n}\r\n    rawResp, err := user_api.CreateUser(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskUser) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserApi userApi = new UserApi(client);\r\n        List<UserCreationParams> params = new ArrayList<>();\r\n        params.add(new UserCreationParams()\n.roleId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.username(\"username-string\"));\r\n        List<WithTaskUser> resp = userApi.createUser(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-user": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "User-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-user \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"User-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_api = UserApi(client)\r\n    resp = user_api.update_user({\"data\":{},\"where\":{\"id\":\"User-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_api := client.User\r\n    params := user.NewUpdateUserParams()\r\n    params.RequestBody = &models.UserUpdationParams{\nData: &models.UserUpdationParamsData{\n},\nWhere: &models.UserWhereInput{\nID: pointy.String(\"User-id\"),\n},\n}\r\n    rawResp, err := user_api.UpdateUser(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskUser) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserApi userApi = new UserApi(client);\r\n        UserUpdationParams params = new UserUpdationParams()\n.data(new UserUpdationParamsData())\n.where(new UserWhereInput()\n.id(\"User-id\"));\r\n        List<WithTaskUser> resp = userApi.updateUser(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-user": {
    "exampleValue": {
      "where": {
        "id": "User-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-user \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"User-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_api = UserApi(client)\r\n    resp = user_api.delete_user({\"where\":{\"id\":\"User-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_api := client.User\r\n    params := user.NewDeleteUserParams()\r\n    params.RequestBody = &models.UserDeletionParams{\nWhere: &models.UserWhereInput{\nID: pointy.String(\"User-id\"),\n},\n}\r\n    rawResp, err := user_api.DeleteUser(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteUser) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserApi userApi = new UserApi(client);\r\n        UserDeletionParams params = new UserDeletionParams()\n.where(new UserWhereInput()\n.id(\"User-id\"));\r\n        List<WithTaskDeleteUser> resp = userApi.deleteUser(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-root-user": {
    "exampleValue": {
      "password": "password-string"
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-root-user \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"password\":\"password-string\"}'",
    "python": "from cloudtower import ApiClient, Configuration, UserApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_api = UserApi(client)\r\n    resp = user_api.create_root_user({\"password\":\"password-string\"})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_api := client.User\r\n    params := user.NewCreateRootUserParams()\r\n    params.RequestBody = &models.RootUserCreationParams{\nPassword: pointy.String(\"password-string\"),\n}\r\n    rawResp, err := user_api.CreateRootUser(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.UserApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserApi userApi = new UserApi(client);\r\n        RootUserCreationParams params = new RootUserCreationParams()\n.password(\"password-string\");\r\n        WithTaskUser resp = userApi.createRootUser(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/create-vcenter-account": {
    "exampleValue": {
      "data": {
        "port": 1,
        "password": "password-string",
        "username": "username-string",
        "ip": "ip-string",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vcenter-account \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"port\":1,\"password\":\"password-string\",\"username\":\"username-string\",\"ip\":\"ip-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VcenterAccountApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vcenter_account_api = VcenterAccountApi(client)\r\n    resp = vcenter_account_api.create_vcenter_account({\"data\":{\"port\":1,\"password\":\"password-string\",\"username\":\"username-string\",\"ip\":\"ip-string\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vcenter_account\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vcenter_account_api := client.VcenterAccount\r\n    params := vcenter_account.NewCreateVcenterAccountParams()\r\n    params.RequestBody = &models.CreateVcenterAccountParams{\nData: &models.CreateVcenterAccountParamsData{\nPort: pointy.Int32(1),\nPassword: pointy.String(\"password-string\"),\nUsername: pointy.String(\"username-string\"),\nIP: pointy.String(\"ip-string\"),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := vcenter_account_api.CreateVcenterAccount(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VcenterAccountApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VcenterAccountApi vcenterAccountApi = new VcenterAccountApi(client);\r\n        CreateVcenterAccountParams params = new CreateVcenterAccountParams()\n.data(new CreateVcenterAccountParamsData()\n.port(1)\n.password(\"password-string\")\n.username(\"username-string\")\n.ip(\"ip-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        WithTaskVcenterAccount resp = vcenterAccountApi.createVcenterAccount(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/update-vcenter-account": {
    "exampleValue": {
      "data": {
        "port": 1,
        "password": "password-string",
        "username": "username-string",
        "ip": "ip-string"
      },
      "where": {
        "id": "VcenterAccount-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vcenter-account \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"port\":1,\"password\":\"password-string\",\"username\":\"username-string\",\"ip\":\"ip-string\"},\"where\":{\"id\":\"VcenterAccount-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VcenterAccountApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vcenter_account_api = VcenterAccountApi(client)\r\n    resp = vcenter_account_api.update_vcenter_account({\"data\":{\"port\":1,\"password\":\"password-string\",\"username\":\"username-string\",\"ip\":\"ip-string\"},\"where\":{\"id\":\"VcenterAccount-id\"}})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vcenter_account\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vcenter_account_api := client.VcenterAccount\r\n    params := vcenter_account.NewUpdateVcenterAccountParams()\r\n    params.RequestBody = &models.UpdateVcenterAccountParams{\nData: &models.UpdateVcenterAccountParamsData{\nPort: pointy.Int32(1),\nPassword: pointy.String(\"password-string\"),\nUsername: pointy.String(\"username-string\"),\nIP: pointy.String(\"ip-string\"),\n},\nWhere: &models.VcenterAccountWhereUniqueInput{\nID: pointy.String(\"VcenterAccount-id\"),\n},\n}\r\n    rawResp, err := vcenter_account_api.UpdateVcenterAccount(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VcenterAccountApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VcenterAccountApi vcenterAccountApi = new VcenterAccountApi(client);\r\n        UpdateVcenterAccountParams params = new UpdateVcenterAccountParams()\n.data(new UpdateVcenterAccountParamsData()\n.port(1)\n.password(\"password-string\")\n.username(\"username-string\")\n.ip(\"ip-string\"))\n.where(new VcenterAccountWhereUniqueInput()\n.id(\"VcenterAccount-id\"));\r\n        WithTaskVcenterAccount resp = vcenterAccountApi.updateVcenterAccount(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/create-vds-with-migrate-vlan": {
    "exampleValue": [
      {
        "nic_ids": [
          "-string"
        ],
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "vlan": {
          "extra_ip": [
            {
              "management_ip": "management_ip-string",
              "host_id": "ck74rk21wg5lz0786opdnzz5m"
            }
          ],
          "subnetmask": "subnetmask-string",
          "vlan_id": 1
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vds-with-migrate-vlan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"nic_ids\":[\"-string\"],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"vlan\":{\"extra_ip\":[{\"management_ip\":\"management_ip-string\",\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"subnetmask\":\"subnetmask-string\",\"vlan_id\":1}}]'",
    "python": "from cloudtower import ApiClient, Configuration, VdsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vds_api = VdsApi(client)\r\n    resp = vds_api.create_vds_with_migrate_vlan([{\"nic_ids\":[\"-string\"],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"vlan\":{\"extra_ip\":[{\"management_ip\":\"management_ip-string\",\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"subnetmask\":\"subnetmask-string\",\"vlan_id\":1}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vds\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vds_api := client.Vds\r\n    params := vds.NewCreateVdsWithMigrateVlanParams()\r\n    params.RequestBody = []*models.VdsCreationWithMigrateVlanParams{\n{\nNicIds: []string{\"-string\",\n},\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nVlan: &models.VdsCreationWithMigrateVlanParamsVlan{\nExtraIP: []*models.VdsCreationWithMigrateVlanParamsVlanExtraip{\n{\nManagementIP: pointy.String(\"management_ip-string\"),\nHostID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\nSubnetmask: pointy.String(\"subnetmask-string\"),\nVlanID: pointy.Int32(1),\n},\n},\n}\r\n    rawResp, err := vds_api.CreateVdsWithMigrateVlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVds) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VdsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VdsApi vdsApi = new VdsApi(client);\r\n        List<VdsCreationWithMigrateVlanParams> params = new ArrayList<>();\r\n        params.add(new VdsCreationWithMigrateVlanParams()\n.addNicIdsItem(\"-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.vlan(new VdsCreationWithMigrateVlanParamsVlan()\n.addExtraIpItem(new VdsCreationWithMigrateVlanParamsVlanExtraip()\n.managementIp(\"management_ip-string\")\n.hostId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.subnetmask(\"subnetmask-string\")\n.vlanId(1)));\r\n        List<WithTaskVds> resp = vdsApi.createVdsWithMigrateVlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vds-with-access-vlan": {
    "exampleValue": [
      {
        "nic_ids": [
          "-string"
        ],
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "vlan": {
          "extra_ip": [
            {
              "management_ip": "management_ip-string",
              "host_id": "ck74rk21wg5lz0786opdnzz5m"
            }
          ],
          "subnetmask": "subnetmask-string",
          "vlan_id": 1
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vds-with-access-vlan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"nic_ids\":[\"-string\"],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"vlan\":{\"extra_ip\":[{\"management_ip\":\"management_ip-string\",\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"subnetmask\":\"subnetmask-string\",\"vlan_id\":1}}]'",
    "python": "from cloudtower import ApiClient, Configuration, VdsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vds_api = VdsApi(client)\r\n    resp = vds_api.create_vds_with_access_vlan([{\"nic_ids\":[\"-string\"],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"vlan\":{\"extra_ip\":[{\"management_ip\":\"management_ip-string\",\"host_id\":\"ck74rk21wg5lz0786opdnzz5m\"}],\"subnetmask\":\"subnetmask-string\",\"vlan_id\":1}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vds\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vds_api := client.Vds\r\n    params := vds.NewCreateVdsWithAccessVlanParams()\r\n    params.RequestBody = []*models.VdsCreationWithMAccessVlanParams{\n{\nNicIds: []string{\"-string\",\n},\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nVlan: &models.VdsCreationWithMAccessVlanParamsVlan{\nExtraIP: []*models.VdsCreationWithMAccessVlanParamsVlanExtraip{\n{\nManagementIP: pointy.String(\"management_ip-string\"),\nHostID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\nSubnetmask: pointy.String(\"subnetmask-string\"),\nVlanID: pointy.Int32(1),\n},\n},\n}\r\n    rawResp, err := vds_api.CreateVdsWithAccessVlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVds) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VdsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VdsApi vdsApi = new VdsApi(client);\r\n        List<VdsCreationWithMAccessVlanParams> params = new ArrayList<>();\r\n        params.add(new VdsCreationWithMAccessVlanParams()\n.addNicIdsItem(\"-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.vlan(new VdsCreationWithMAccessVlanParamsVlan()\n.addExtraIpItem(new VdsCreationWithMAccessVlanParamsVlanExtraip()\n.managementIp(\"management_ip-string\")\n.hostId(\"ck74rk21wg5lz0786opdnzz5m\"))\n.subnetmask(\"subnetmask-string\")\n.vlanId(1)));\r\n        List<WithTaskVds> resp = vdsApi.createVdsWithAccessVlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vds": {
    "exampleValue": [
      {
        "nic_ids": [
          "-string"
        ],
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vds \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"nic_ids\":[\"-string\"],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VdsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vds_api = VdsApi(client)\r\n    resp = vds_api.create_vds([{\"nic_ids\":[\"-string\"],\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vds\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vds_api := client.Vds\r\n    params := vds.NewCreateVdsParams()\r\n    params.RequestBody = []*models.VdsCreationParams{\n{\nNicIds: []string{\"-string\",\n},\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vds_api.CreateVds(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVds) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VdsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VdsApi vdsApi = new VdsApi(client);\r\n        List<VdsCreationParams> params = new ArrayList<>();\r\n        params.add(new VdsCreationParams()\n.addNicIdsItem(\"-string\")\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVds> resp = vdsApi.createVds(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vds": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vds-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vds \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vds-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VdsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vds_api = VdsApi(client)\r\n    resp = vds_api.update_vds({\"data\":{},\"where\":{\"id\":\"Vds-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vds\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vds_api := client.Vds\r\n    params := vds.NewUpdateVdsParams()\r\n    params.RequestBody = &models.VdsUpdationParams{\nData: &models.VdsUpdationParamsData{\n},\nWhere: &models.VdsWhereInput{\nID: pointy.String(\"Vds-id\"),\n},\n}\r\n    rawResp, err := vds_api.UpdateVds(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVds) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VdsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VdsApi vdsApi = new VdsApi(client);\r\n        VdsUpdationParams params = new VdsUpdationParams()\n.data(new VdsUpdationParamsData())\n.where(new VdsWhereInput()\n.id(\"Vds-id\"));\r\n        List<WithTaskVds> resp = vdsApi.updateVds(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vds": {
    "exampleValue": {
      "where": {
        "id": "Vds-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vds \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vds-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VdsApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vds_api = VdsApi(client)\r\n    resp = vds_api.delete_vds({\"where\":{\"id\":\"Vds-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vds\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vds_api := client.Vds\r\n    params := vds.NewDeleteVdsParams()\r\n    params.RequestBody = &models.VdsDeletionParams{\nWhere: &models.VdsWhereInput{\nID: pointy.String(\"Vds-id\"),\n},\n}\r\n    rawResp, err := vds_api.DeleteVds(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVds) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VdsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VdsApi vdsApi = new VdsApi(client);\r\n        VdsDeletionParams params = new VdsDeletionParams()\n.where(new VdsWhereInput()\n.id(\"Vds-id\"));\r\n        List<WithTaskDeleteVds> resp = vdsApi.deleteVds(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-view": {
    "exampleValue": [
      {
        "time_unit": "DAY",
        "time_span": 1,
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-view \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"time_unit\":\"DAY\",\"time_span\":1,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, ViewApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    view_api = ViewApi(client)\r\n    resp = view_api.create_view([{\"time_unit\":\"DAY\",\"time_span\":1,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/view\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        view_api := client.View\r\n    params := view.NewCreateViewParams()\r\n    params.RequestBody = []*models.ViewCreationParams{\n{\nTimeUnit: models.TimeUnitDAY.Pointer(),\nTimeSpan: pointy.Int32(1),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := view_api.CreateView(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskView) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ViewApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ViewApi viewApi = new ViewApi(client);\r\n        List<ViewCreationParams> params = new ArrayList<>();\r\n        params.add(new ViewCreationParams()\n.timeUnit(TimeUnit.fromValue(\"DAY\"))\n.timeSpan(1)\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskView> resp = viewApi.createView(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-view": {
    "exampleValue": {
      "where": {
        "id": "View-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-view \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"View-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ViewApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    view_api = ViewApi(client)\r\n    resp = view_api.update_view({\"where\":{\"id\":\"View-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/view\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        view_api := client.View\r\n    params := view.NewUpdateViewParams()\r\n    params.RequestBody = &models.ViewUpdationParams{\nWhere: &models.ViewWhereInput{\nID: pointy.String(\"View-id\"),\n},\n}\r\n    rawResp, err := view_api.UpdateView(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskView) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ViewApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ViewApi viewApi = new ViewApi(client);\r\n        ViewUpdationParams params = new ViewUpdationParams()\n.where(new ViewWhereInput()\n.id(\"View-id\"));\r\n        List<WithTaskView> resp = viewApi.updateView(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-view": {
    "exampleValue": {
      "where": {
        "id": "View-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-view \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"View-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ViewApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    view_api = ViewApi(client)\r\n    resp = view_api.delete_view({\"where\":{\"id\":\"View-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/view\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        view_api := client.View\r\n    params := view.NewDeleteViewParams()\r\n    params.RequestBody = &models.ViewDeletionParams{\nWhere: &models.ViewWhereInput{\nID: pointy.String(\"View-id\"),\n},\n}\r\n    rawResp, err := view_api.DeleteView(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteView) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.ViewApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ViewApi viewApi = new ViewApi(client);\r\n        ViewDeletionParams params = new ViewDeletionParams()\n.where(new ViewWhereInput()\n.id(\"View-id\"));\r\n        List<WithTaskDeleteView> resp = viewApi.deleteView(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vm-vlan": {
    "exampleValue": [
      {
        "vds_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm-vlan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"vds_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vlan_api = VlanApi(client)\r\n    resp = vlan_api.create_vm_vlan([{\"vds_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vlan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vlan_api := client.Vlan\r\n    params := vlan.NewCreateVMVlanParams()\r\n    params.RequestBody = []*models.VMVlanCreationParams{\n{\nVdsID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vlan_api.CreateVMVlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VlanApi vlanApi = new VlanApi(client);\r\n        List<VmVlanCreationParams> params = new ArrayList<>();\r\n        params.add(new VmVlanCreationParams()\n.vdsId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVlan> resp = vlanApi.createVmVlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-vlan": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-vlan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vlan_api = VlanApi(client)\r\n    resp = vlan_api.update_vlan({\"data\":{},\"where\":{\"id\":\"Vlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vlan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vlan_api := client.Vlan\r\n    params := vlan.NewUpdateVlanParams()\r\n    params.RequestBody = &models.VMVlanUpdationParams{\nData: &models.VMVlanUpdationParamsData{\n},\nWhere: &models.VlanWhereInput{\nID: pointy.String(\"Vlan-id\"),\n},\n}\r\n    rawResp, err := vlan_api.UpdateVlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VlanApi vlanApi = new VlanApi(client);\r\n        VmVlanUpdationParams params = new VmVlanUpdationParams()\n.data(new VmVlanUpdationParamsData())\n.where(new VlanWhereInput()\n.id(\"Vlan-id\"));\r\n        List<WithTaskVlan> resp = vlanApi.updateVlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-management-vlan": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "Vlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-management-vlan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"Vlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vlan_api = VlanApi(client)\r\n    resp = vlan_api.update_management_vlan({\"data\":{},\"where\":{\"id\":\"Vlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vlan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vlan_api := client.Vlan\r\n    params := vlan.NewUpdateManagementVlanParams()\r\n    params.RequestBody = &models.ManagementVlanUpdationParams{\nData: &models.ManagementVlanUpdationParamsData{\n},\nWhere: &models.VlanWhereInput{\nID: pointy.String(\"Vlan-id\"),\n},\n}\r\n    rawResp, err := vlan_api.UpdateManagementVlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VlanApi vlanApi = new VlanApi(client);\r\n        ManagementVlanUpdationParams params = new ManagementVlanUpdationParams()\n.data(new ManagementVlanUpdationParamsData())\n.where(new VlanWhereInput()\n.id(\"Vlan-id\"));\r\n        List<WithTaskVlan> resp = vlanApi.updateManagementVlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-migration-vlan": {
    "exampleValue": {
      "where": {
        "id": "Vlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-migration-vlan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vlan_api = VlanApi(client)\r\n    resp = vlan_api.update_migration_vlan({\"where\":{\"id\":\"Vlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vlan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vlan_api := client.Vlan\r\n    params := vlan.NewUpdateMigrationVlanParams()\r\n    params.RequestBody = &models.MigrationVlanUpdationParams{\nWhere: &models.VlanWhereInput{\nID: pointy.String(\"Vlan-id\"),\n},\n}\r\n    rawResp, err := vlan_api.UpdateMigrationVlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VlanApi vlanApi = new VlanApi(client);\r\n        MigrationVlanUpdationParams params = new MigrationVlanUpdationParams()\n.where(new VlanWhereInput()\n.id(\"Vlan-id\"));\r\n        List<WithTaskVlan> resp = vlanApi.updateMigrationVlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vm-vlan": {
    "exampleValue": {
      "where": {
        "id": "Vlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vm-vlan \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VlanApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vlan_api = VlanApi(client)\r\n    resp = vlan_api.delete_vlan({\"where\":{\"id\":\"Vlan-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vlan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vlan_api := client.Vlan\r\n    params := vlan.NewDeleteVlanParams()\r\n    params.RequestBody = &models.VlanDeletionParams{\nWhere: &models.VlanWhereInput{\nID: pointy.String(\"Vlan-id\"),\n},\n}\r\n    rawResp, err := vlan_api.DeleteVlan(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVlan) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VlanApi vlanApi = new VlanApi(client);\r\n        VlanDeletionParams params = new VlanDeletionParams()\n.where(new VlanWhereInput()\n.id(\"Vlan-id\"));\r\n        List<WithTaskDeleteVlan> resp = vlanApi.deleteVlan(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vm-folder": {
    "exampleValue": [
      {
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm-folder \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmFolderApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_folder_api = VmFolderApi(client)\r\n    resp = vm_folder_api.create_vm_folder([{\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_folder\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_folder_api := client.VMFolder\r\n    params := vm_folder.NewCreateVMFolderParams()\r\n    params.RequestBody = []*models.VMFolderCreationParams{\n{\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vm_folder_api.CreateVMFolder(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMFolder) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmFolderApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmFolderApi vmFolderApi = new VmFolderApi(client);\r\n        List<VmFolderCreationParams> params = new ArrayList<>();\r\n        params.add(new VmFolderCreationParams()\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVmFolder> resp = vmFolderApi.createVmFolder(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-folder": {
    "exampleValue": {
      "data": {
        "name": "name-string"
      },
      "where": {
        "id": "VmFolder-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-folder \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"name\":\"name-string\"},\"where\":{\"id\":\"VmFolder-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmFolderApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_folder_api = VmFolderApi(client)\r\n    resp = vm_folder_api.update_vm_folder({\"data\":{\"name\":\"name-string\"},\"where\":{\"id\":\"VmFolder-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_folder\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_folder_api := client.VMFolder\r\n    params := vm_folder.NewUpdateVMFolderParams()\r\n    params.RequestBody = &models.VMFolderUpdationParams{\nData: &models.VMFolderUpdationParamsData{\nName: pointy.String(\"name-string\"),\n},\nWhere: &models.VMFolderWhereInput{\nID: pointy.String(\"VmFolder-id\"),\n},\n}\r\n    rawResp, err := vm_folder_api.UpdateVMFolder(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMFolder) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmFolderApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmFolderApi vmFolderApi = new VmFolderApi(client);\r\n        VmFolderUpdationParams params = new VmFolderUpdationParams()\n.data(new VmFolderUpdationParamsData()\n.name(\"name-string\"))\n.where(new VmFolderWhereInput()\n.id(\"VmFolder-id\"));\r\n        List<WithTaskVmFolder> resp = vmFolderApi.updateVmFolder(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vm-folder": {
    "exampleValue": {
      "where": {
        "id": "VmFolder-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vm-folder \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmFolder-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmFolderApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_folder_api = VmFolderApi(client)\r\n    resp = vm_folder_api.delete_vm_folder({\"where\":{\"id\":\"VmFolder-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_folder\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_folder_api := client.VMFolder\r\n    params := vm_folder.NewDeleteVMFolderParams()\r\n    params.RequestBody = &models.VMFolderDeletionParams{\nWhere: &models.VMFolderWhereInput{\nID: pointy.String(\"VmFolder-id\"),\n},\n}\r\n    rawResp, err := vm_folder_api.DeleteVMFolder(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVMFolder) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmFolderApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmFolderApi vmFolderApi = new VmFolderApi(client);\r\n        VmFolderDeletionParams params = new VmFolderDeletionParams()\n.where(new VmFolderWhereInput()\n.id(\"VmFolder-id\"));\r\n        List<WithTaskDeleteVmFolder> resp = vmFolderApi.deleteVmFolder(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vm-placement-group": {
    "exampleValue": [
      {
        "name": "name-string",
        "enabled": true,
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm-placement-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"name\":\"name-string\",\"enabled\":true,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmPlacementGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_placement_group_api = VmPlacementGroupApi(client)\r\n    resp = vm_placement_group_api.create_vm_placement_group([{\"name\":\"name-string\",\"enabled\":True,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_placement_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_placement_group_api := client.VMPlacementGroup\r\n    params := vm_placement_group.NewCreateVMPlacementGroupParams()\r\n    params.RequestBody = []*models.VMPlacementGroupCreationParams{\n{\nName: pointy.String(\"name-string\"),\nEnabled: pointy.Bool(true),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := vm_placement_group_api.CreateVMPlacementGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMPlacementGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmPlacementGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmPlacementGroupApi vmPlacementGroupApi = new VmPlacementGroupApi(client);\r\n        List<VmPlacementGroupCreationParams> params = new ArrayList<>();\r\n        params.add(new VmPlacementGroupCreationParams()\n.name(\"name-string\")\n.enabled(true)\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVmPlacementGroup> resp = vmPlacementGroupApi.createVmPlacementGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-placement-group": {
    "exampleValue": {
      "data": {},
      "where": {
        "id": "VmPlacementGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-placement-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{},\"where\":{\"id\":\"VmPlacementGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmPlacementGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_placement_group_api = VmPlacementGroupApi(client)\r\n    resp = vm_placement_group_api.update_vm_placement_group({\"data\":{},\"where\":{\"id\":\"VmPlacementGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_placement_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_placement_group_api := client.VMPlacementGroup\r\n    params := vm_placement_group.NewUpdateVMPlacementGroupParams()\r\n    params.RequestBody = &models.VMPlacementGroupUpdationParams{\nData: &models.VMPlacementGroupUpdationParamsData{\n},\nWhere: &models.VMPlacementGroupWhereInput{\nID: pointy.String(\"VmPlacementGroup-id\"),\n},\n}\r\n    rawResp, err := vm_placement_group_api.UpdateVMPlacementGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMPlacementGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmPlacementGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmPlacementGroupApi vmPlacementGroupApi = new VmPlacementGroupApi(client);\r\n        VmPlacementGroupUpdationParams params = new VmPlacementGroupUpdationParams()\n.data(new VmPlacementGroupUpdationParamsData())\n.where(new VmPlacementGroupWhereInput()\n.id(\"VmPlacementGroup-id\"));\r\n        List<WithTaskVmPlacementGroup> resp = vmPlacementGroupApi.updateVmPlacementGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vm-placement-group": {
    "exampleValue": {
      "where": {
        "id": "VmPlacementGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vm-placement-group \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmPlacementGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmPlacementGroupApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_placement_group_api = VmPlacementGroupApi(client)\r\n    resp = vm_placement_group_api.delete_vm_placement_group({\"where\":{\"id\":\"VmPlacementGroup-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_placement_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_placement_group_api := client.VMPlacementGroup\r\n    params := vm_placement_group.NewDeleteVMPlacementGroupParams()\r\n    params.RequestBody = &models.VMPlacementGroupDeletionParams{\nWhere: &models.VMPlacementGroupWhereInput{\nID: pointy.String(\"VmPlacementGroup-id\"),\n},\n}\r\n    rawResp, err := vm_placement_group_api.DeleteVMPlacementGroup(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVMPlacementGroup) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmPlacementGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmPlacementGroupApi vmPlacementGroupApi = new VmPlacementGroupApi(client);\r\n        VmPlacementGroupDeletionParams params = new VmPlacementGroupDeletionParams()\n.where(new VmPlacementGroupWhereInput()\n.id(\"VmPlacementGroup-id\"));\r\n        List<WithTaskDeleteVmPlacementGroup> resp = vmPlacementGroupApi.deleteVmPlacementGroup(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vm-snapshot": {
    "exampleValue": {
      "data": [
        {
          "name": "name-string",
          "vm_id": "ck74rk21wg5lz0786opdnzz5m"
        }
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":[{\"name\":\"name-string\",\"vm_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]}'",
    "python": "from cloudtower import ApiClient, Configuration, VmSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_snapshot_api = VmSnapshotApi(client)\r\n    resp = vm_snapshot_api.create_vm_snapshot({\"data\":[{\"name\":\"name-string\",\"vm_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_snapshot_api := client.VMSnapshot\r\n    params := vm_snapshot.NewCreateVMSnapshotParams()\r\n    params.RequestBody = &models.VMSnapshotCreationParams{\nData: []*models.VMSnapshotCreationParamsData{\n{\nName: pointy.String(\"name-string\"),\nVMID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\n}\r\n    rawResp, err := vm_snapshot_api.CreateVMSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmSnapshotApi vmSnapshotApi = new VmSnapshotApi(client);\r\n        VmSnapshotCreationParams params = new VmSnapshotCreationParams()\n.addDataItem(new VmSnapshotCreationParamsData()\n.name(\"name-string\")\n.vmId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVmSnapshot> resp = vmSnapshotApi.createVmSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vm-snapshot": {
    "exampleValue": {
      "where": {
        "id": "VmSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vm-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_snapshot_api = VmSnapshotApi(client)\r\n    resp = vm_snapshot_api.delete_vm_snapshot({\"where\":{\"id\":\"VmSnapshot-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_snapshot_api := client.VMSnapshot\r\n    params := vm_snapshot.NewDeleteVMSnapshotParams()\r\n    params.RequestBody = &models.VMSnapshotDeletionParams{\nWhere: &models.VMSnapshotWhereInput{\nID: pointy.String(\"VmSnapshot-id\"),\n},\n}\r\n    rawResp, err := vm_snapshot_api.DeleteVMSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVMSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmSnapshotApi vmSnapshotApi = new VmSnapshotApi(client);\r\n        VmSnapshotDeletionParams params = new VmSnapshotDeletionParams()\n.where(new VmSnapshotWhereInput()\n.id(\"VmSnapshot-id\"));\r\n        List<WithTaskDeleteVmSnapshot> resp = vmSnapshotApi.deleteVmSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/clone-vm-template-from-vm": {
    "exampleValue": [
      {
        "cloud_init_supported": true,
        "vm_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/clone-vm-template-from-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"cloud_init_supported\":true,\"vm_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_template_api = VmTemplateApi(client)\r\n    resp = vm_template_api.clone_vm_template_from_vm([{\"cloud_init_supported\":True,\"vm_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_template_api := client.VMTemplate\r\n    params := vm_template.NewCloneVMTemplateFromVMParams()\r\n    params.RequestBody = []*models.VMTemplateCreationParams{\n{\nCloudInitSupported: pointy.Bool(true),\nVMID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vm_template_api.CloneVMTemplateFromVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmTemplateApi vmTemplateApi = new VmTemplateApi(client);\r\n        List<VmTemplateCreationParams> params = new ArrayList<>();\r\n        params.add(new VmTemplateCreationParams()\n.cloudInitSupported(true)\n.vmId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVmTemplate> resp = vmTemplateApi.cloneVmTemplateFromVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/convert-vm-template-from-vm": {
    "exampleValue": [
      {
        "cloud_init_supported": true,
        "vm_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/convert-vm-template-from-vm \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"cloud_init_supported\":true,\"vm_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_template_api = VmTemplateApi(client)\r\n    resp = vm_template_api.convert_vm_template_from_vm([{\"cloud_init_supported\":True,\"vm_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_template_api := client.VMTemplate\r\n    params := vm_template.NewConvertVMTemplateFromVMParams()\r\n    params.RequestBody = []*models.VMTemplateCreationParams{\n{\nCloudInitSupported: pointy.Bool(true),\nVMID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vm_template_api.ConvertVMTemplateFromVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmTemplateApi vmTemplateApi = new VmTemplateApi(client);\r\n        List<VmTemplateCreationParams> params = new ArrayList<>();\r\n        params.add(new VmTemplateCreationParams()\n.cloudInitSupported(true)\n.vmId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVmTemplate> resp = vmTemplateApi.convertVmTemplateFromVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-template": {
    "exampleValue": {
      "where": {
        "id": "VmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_template_api = VmTemplateApi(client)\r\n    resp = vm_template_api.update_vm_template({\"where\":{\"id\":\"VmTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_template_api := client.VMTemplate\r\n    params := vm_template.NewUpdateVMTemplateParams()\r\n    params.RequestBody = &models.VMTemplateUpdationParams{\nWhere: &models.VMTemplateWhereInput{\nID: pointy.String(\"VmTemplate-id\"),\n},\n}\r\n    rawResp, err := vm_template_api.UpdateVMTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmTemplateApi vmTemplateApi = new VmTemplateApi(client);\r\n        VmTemplateUpdationParams params = new VmTemplateUpdationParams()\n.where(new VmTemplateWhereInput()\n.id(\"VmTemplate-id\"));\r\n        List<WithTaskVmTemplate> resp = vmTemplateApi.updateVmTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vm-template": {
    "exampleValue": {
      "where": {
        "id": "VmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vm-template \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmTemplateApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_template_api = VmTemplateApi(client)\r\n    resp = vm_template_api.delete_vm_template({\"where\":{\"id\":\"VmTemplate-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_template_api := client.VMTemplate\r\n    params := vm_template.NewDeleteVMTemplateParams()\r\n    params.RequestBody = &models.VMTemplateDeletionParams{\nWhere: &models.VMTemplateWhereInput{\nID: pointy.String(\"VmTemplate-id\"),\n},\n}\r\n    rawResp, err := vm_template_api.DeleteVMTemplate(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVMTemplate) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmTemplateApi vmTemplateApi = new VmTemplateApi(client);\r\n        VmTemplateDeletionParams params = new VmTemplateDeletionParams()\n.where(new VmTemplateWhereInput()\n.id(\"VmTemplate-id\"));\r\n        List<WithTaskDeleteVmTemplate> resp = vmTemplateApi.deleteVmTemplate(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vm-volume-snapshot": {
    "exampleValue": [
      {
        "volume_id": "ck74rk21wg5lz0786opdnzz5m",
        "description": "description-string",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm-volume-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"volume_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"description\":\"description-string\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_snapshot_api = VmVolumeSnapshotApi(client)\r\n    resp = vm_volume_snapshot_api.create_vm_volume_snapshot([{\"volume_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"description\":\"description-string\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_snapshot_api := client.VMVolumeSnapshot\r\n    params := vm_volume_snapshot.NewCreateVMVolumeSnapshotParams()\r\n    params.RequestBody = []*models.VMVolumeSnapshotCreationParams{\n{\nVolumeID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nDescription: pointy.String(\"description-string\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vm_volume_snapshot_api.CreateVMVolumeSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMVolumeSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeSnapshotApi vmVolumeSnapshotApi = new VmVolumeSnapshotApi(client);\r\n        List<VmVolumeSnapshotCreationParams> params = new ArrayList<>();\r\n        params.add(new VmVolumeSnapshotCreationParams()\n.volumeId(\"ck74rk21wg5lz0786opdnzz5m\")\n.description(\"description-string\")\n.name(\"name-string\"));\r\n        List<WithTaskVmVolumeSnapshot> resp = vmVolumeSnapshotApi.createVmVolumeSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vm-volume-snapshot": {
    "exampleValue": {
      "where": {
        "id": "VmVolumeSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vm-volume-snapshot \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmVolumeSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeSnapshotApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_snapshot_api = VmVolumeSnapshotApi(client)\r\n    resp = vm_volume_snapshot_api.delete_vm_volume_snapshot({\"where\":{\"id\":\"VmVolumeSnapshot-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_snapshot_api := client.VMVolumeSnapshot\r\n    params := vm_volume_snapshot.NewDeleteVMVolumeSnapshotParams()\r\n    params.RequestBody = &models.VMVolumeSnapshotDeletionParams{\nWhere: &models.VMVolumeSnapshotWhereInput{\nID: pointy.String(\"VmVolumeSnapshot-id\"),\n},\n}\r\n    rawResp, err := vm_volume_snapshot_api.DeleteVMVolumeSnapshot(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVMVolumeSnapshot) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeSnapshotApi vmVolumeSnapshotApi = new VmVolumeSnapshotApi(client);\r\n        VmVolumeSnapshotDeletionParams params = new VmVolumeSnapshotDeletionParams()\n.where(new VmVolumeSnapshotWhereInput()\n.id(\"VmVolumeSnapshot-id\"));\r\n        List<WithTaskDeleteVmVolumeSnapshot> resp = vmVolumeSnapshotApi.deleteVmVolumeSnapshot(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/create-vm-volume": {
    "exampleValue": [
      {
        "elf_storage_policy": "ELF_CP_REPLICA_2_THICK_PROVISION",
        "size": 1,
        "sharing": true,
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-vm-volume \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"elf_storage_policy\":\"ELF_CP_REPLICA_2_THICK_PROVISION\",\"size\":1,\"sharing\":true,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.create_vm_volume([{\"elf_storage_policy\":\"ELF_CP_REPLICA_2_THICK_PROVISION\",\"size\":1,\"sharing\":True,\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewCreateVMVolumeParams()\r\n    params.RequestBody = []*models.VMVolumeCreationParams{\n{\nElfStoragePolicy: models.VMVolumeElfStoragePolicyTypeELF_CP_REPLICA_2_THICK_PROVISION.Pointer(),\nSize: pointy.Int64(1),\nSharing: pointy.Bool(true),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\n},\n}\r\n    rawResp, err := vm_volume_api.CreateVMVolume(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMVolume) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        List<VmVolumeCreationParams> params = new ArrayList<>();\r\n        params.add(new VmVolumeCreationParams()\n.elfStoragePolicy(VmVolumeElfStoragePolicyType.fromValue(\"ELF_CP_REPLICA_2_THICK_PROVISION\"))\n.size(1L)\n.sharing(true)\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\"));\r\n        List<WithTaskVmVolume> resp = vmVolumeApi.createVmVolume(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-vm-volume": {
    "exampleValue": {
      "where": {
        "id": "VmVolume-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-vm-volume \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmVolume-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.delete_vm_volume_from_vm({\"where\":{\"id\":\"VmVolume-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewDeleteVMVolumeFromVMParams()\r\n    params.RequestBody = &models.VMVolumeDeletionParams{\nWhere: &models.VMVolumeWhereInput{\nID: pointy.String(\"VmVolume-id\"),\n},\n}\r\n    rawResp, err := vm_volume_api.DeleteVMVolumeFromVM(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteVMVolume) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        VmVolumeDeletionParams params = new VmVolumeDeletionParams()\n.where(new VmVolumeWhereInput()\n.id(\"VmVolume-id\"));\r\n        List<WithTaskDeleteVmVolume> resp = vmVolumeApi.deleteVmVolumeFromVm(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/rebuild-vm-volume": {
    "exampleValue": [
      {
        "name": "name-string",
        "description": "description-string",
        "volume_snapshot_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/rebuild-vm-volume \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"name\":\"name-string\",\"description\":\"description-string\",\"volume_snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.rebuild_vm_volume([{\"name\":\"name-string\",\"description\":\"description-string\",\"volume_snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewRebuildVMVolumeParams()\r\n    params.RequestBody = []*models.VMVolumeRebuildParams{\n{\nName: pointy.String(\"name-string\"),\nDescription: pointy.String(\"description-string\"),\nVolumeSnapshotID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := vm_volume_api.RebuildVMVolume(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMVolume) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        List<VmVolumeRebuildParams> params = new ArrayList<>();\r\n        params.add(new VmVolumeRebuildParams()\n.name(\"name-string\")\n.description(\"description-string\")\n.volumeSnapshotId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVmVolume> resp = vmVolumeApi.rebuildVmVolume(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/rollback-vm-volume": {
    "exampleValue": [
      {
        "volume_snapshot_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/rollback-vm-volume \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"volume_snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.rollback_vm_volume([{\"volume_snapshot_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewRollbackVMVolumeParams()\r\n    params.RequestBody = []*models.VMVolumeRollbackParams{\n{\nVolumeSnapshotID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := vm_volume_api.RollbackVMVolume(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMVolume) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        List<VmVolumeRollbackParams> params = new ArrayList<>();\r\n        params.add(new VmVolumeRollbackParams()\n.volumeSnapshotId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVmVolume> resp = vmVolumeApi.rollbackVmVolume(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/clone-vm-volume": {
    "exampleValue": [
      {
        "where": {
          "id": "VmVolume-id"
        },
        "data": {
          "name": "name-string"
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/clone-vm-volume \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"where\":{\"id\":\"VmVolume-id\"},\"data\":{\"name\":\"name-string\"}}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.clone_vm_volume([{\"where\":{\"id\":\"VmVolume-id\"},\"data\":{\"name\":\"name-string\"}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewCloneVMVolumeParams()\r\n    params.RequestBody = []*models.CloneVMVolumeParams{\n{\nWhere: &models.VMVolumeWhereUniqueInput{\nID: pointy.String(\"VmVolume-id\"),\n},\nData: &models.CloneVMVolumeParamsData{\nName: pointy.String(\"name-string\"),\n},\n},\n}\r\n    rawResp, err := vm_volume_api.CloneVMVolume(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMVolume) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        List<CloneVmVolumeParams> params = new ArrayList<>();\r\n        params.add(new CloneVmVolumeParams()\n.where(new VmVolumeWhereUniqueInput()\n.id(\"VmVolume-id\"))\n.data(new CloneVmVolumeParamsData()\n.name(\"name-string\")));\r\n        List<WithTaskVmVolume> resp = vmVolumeApi.cloneVmVolume(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vm-volume": {
    "exampleValue": {
      "where": {
        "id": "VmVolume-id"
      },
      "data": {}
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vm-volume \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmVolume-id\"},\"data\":{}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.update_vm_volume({\"where\":{\"id\":\"VmVolume-id\"},\"data\":{}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewUpdateVMVolumeParams()\r\n    params.RequestBody = &models.UpdateVMVolumeParams{\nWhere: &models.VMVolumeWhereInput{\nID: pointy.String(\"VmVolume-id\"),\n},\nData: &models.UpdateVMVolumeParamsData{\n},\n}\r\n    rawResp, err := vm_volume_api.UpdateVMVolume(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMVolume) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        UpdateVmVolumeParams params = new UpdateVmVolumeParams()\n.where(new VmVolumeWhereInput()\n.id(\"VmVolume-id\"))\n.data(new UpdateVmVolumeParamsData());\r\n        List<WithTaskVmVolume> resp = vmVolumeApi.updateVmVolume(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/export-vm-volume": {
    "exampleValue": {
      "data": {
        "type": "QCOW2"
      },
      "where": {
        "id": "VmVolume-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/export-vm-volume \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":{\"type\":\"QCOW2\"},\"where\":{\"id\":\"VmVolume-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.export_vm_volume({\"data\":{\"type\":\"QCOW2\"},\"where\":{\"id\":\"VmVolume-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewExportVMVolumeParams()\r\n    params.RequestBody = &models.ExportVMVolumeParams{\nData: &models.ExportVMVolumeParamsData{\nType: models.VMVolumeExportFileTypeQCOW2.Pointer(),\n},\nWhere: &models.VMVolumeWhereInput{\nID: pointy.String(\"VmVolume-id\"),\n},\n}\r\n    rawResp, err := vm_volume_api.ExportVMVolume(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMExportFile) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        ExportVmVolumeParams params = new ExportVmVolumeParams()\n.data(new ExportVmVolumeParamsData()\n.type(VmVolumeExportFileType.fromValue(\"QCOW2\")))\n.where(new VmVolumeWhereInput()\n.id(\"VmVolume-id\"));\r\n        List<WithTaskVmExportFile> resp = vmVolumeApi.exportVmVolume(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/import-vm-volume": {
    "exampleValue": [
      {
        "upload_task_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "storage_policy": "ELF_CP_REPLICA_2_THICK_PROVISION",
        "cluster_id": "ck74rk21wg5lz0786opdnzz5m"
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/import-vm-volume \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"upload_task_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"storage_policy\":\"ELF_CP_REPLICA_2_THICK_PROVISION\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.import_vm_volume([{\"upload_task_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"storage_policy\":\"ELF_CP_REPLICA_2_THICK_PROVISION\",\"cluster_id\":\"ck74rk21wg5lz0786opdnzz5m\"}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewImportVMVolumeParams()\r\n    params.RequestBody = []*models.ImportVMVolumeParams{\n{\nUploadTaskID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nStoragePolicy: models.VMVolumeElfStoragePolicyTypeELF_CP_REPLICA_2_THICK_PROVISION.Pointer(),\nClusterID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n}\r\n    rawResp, err := vm_volume_api.ImportVMVolume(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVMVolume) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        List<ImportVmVolumeParams> params = new ArrayList<>();\r\n        params.add(new ImportVmVolumeParams()\n.uploadTaskId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.storagePolicy(VmVolumeElfStoragePolicyType.fromValue(\"ELF_CP_REPLICA_2_THICK_PROVISION\"))\n.clusterId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVmVolume> resp = vmVolumeApi.importVmVolume(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-vsphere-esxi-account": {
    "exampleValue": {
      "data": [
        {
          "username": "username-string",
          "ip": "ip-string",
          "esxi_account_id": "ck74rk21wg5lz0786opdnzz5m"
        }
      ]
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-vsphere-esxi-account \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"data\":[{\"username\":\"username-string\",\"ip\":\"ip-string\",\"esxi_account_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]}'",
    "python": "from cloudtower import ApiClient, Configuration, VsphereEsxiAccountApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vsphere_esxi_account_api = VsphereEsxiAccountApi(client)\r\n    resp = vsphere_esxi_account_api.update_vsphere_esxi_account({\"data\":[{\"username\":\"username-string\",\"ip\":\"ip-string\",\"esxi_account_id\":\"ck74rk21wg5lz0786opdnzz5m\"}]})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vsphere_esxi_account\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vsphere_esxi_account_api := client.VsphereEsxiAccount\r\n    params := vsphere_esxi_account.NewUpdateVsphereEsxiAccountParams()\r\n    params.RequestBody = &models.UpdateVsphereEsxiAccountParams{\nData: []*models.UpdateVsphereEsxiAccountParamsData{\n{\nUsername: pointy.String(\"username-string\"),\nIP: pointy.String(\"ip-string\"),\nEsxiAccountID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\n},\n},\n}\r\n    rawResp, err := vsphere_esxi_account_api.UpdateVsphereEsxiAccount(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskVsphereEsxiAccountArray) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.VsphereEsxiAccountApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VsphereEsxiAccountApi vsphereEsxiAccountApi = new VsphereEsxiAccountApi(client);\r\n        UpdateVsphereEsxiAccountParams params = new UpdateVsphereEsxiAccountParams()\n.addDataItem(new UpdateVsphereEsxiAccountParamsData()\n.username(\"username-string\")\n.ip(\"ip-string\")\n.esxiAccountId(\"ck74rk21wg5lz0786opdnzz5m\"));\r\n        List<WithTaskVsphereEsxiAccountArray> resp = vsphereEsxiAccountApi.updateVsphereEsxiAccount(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/get-alert-notifiers": {
    "exampleValue": {
      "where": {
        "id": "AlertNotifier-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-alert-notifiers \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"AlertNotifier-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertNotifierApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_notifier_api = AlertNotifierApi(client)\r\n    resp = alert_notifier_api.get_alert_notifiers({\"where\":{\"id\":\"AlertNotifier-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert_notifier\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_notifier_api := client.AlertNotifier\r\n    params := alert_notifier.NewGetAlertNotifiersParams()\r\n    params.RequestBody = &models.GetAlertNotifiersRequestBody{\nWhere: &models.AlertNotifierWhereInput{\nID: pointy.String(\"AlertNotifier-id\"),\n},\n}\r\n    rawResp, err := alert_notifier_api.GetAlertNotifiers(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.AlertNotifierApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertNotifierApi alertNotifierApi = new AlertNotifierApi(client);\r\n        GetAlertNotifiersRequestBody params = new GetAlertNotifiersRequestBody()\n.where(new AlertNotifierWhereInput()\n.id(\"AlertNotifier-id\"));\r\n        List<AlertNotifier> resp = alertNotifierApi.getAlertNotifiers(params);\r\n    }\r\n}"
  },
  "/get-alert-notifiers-connection": {
    "exampleValue": {
      "where": {
        "id": "AlertNotifier-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-alert-notifiers-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"AlertNotifier-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertNotifierApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_notifier_api = AlertNotifierApi(client)\r\n    resp = alert_notifier_api.get_alert_notifiers_connection({\"where\":{\"id\":\"AlertNotifier-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert_notifier\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_notifier_api := client.AlertNotifier\r\n    params := alert_notifier.NewGetAlertNotifiersConnectionParams()\r\n    params.RequestBody = &models.GetAlertNotifiersConnectionRequestBody{\nWhere: &models.AlertNotifierWhereInput{\nID: pointy.String(\"AlertNotifier-id\"),\n},\n}\r\n    rawResp, err := alert_notifier_api.GetAlertNotifiersConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.AlertNotifierApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertNotifierApi alertNotifierApi = new AlertNotifierApi(client);\r\n        GetAlertNotifiersConnectionRequestBody params = new GetAlertNotifiersConnectionRequestBody()\n.where(new AlertNotifierWhereInput()\n.id(\"AlertNotifier-id\"));\r\n        AlertNotifierConnection resp = alertNotifierApi.getAlertNotifiersConnection(params);\r\n    }\r\n}"
  },
  "/get-alert-rules": {
    "exampleValue": {
      "where": {
        "id": "AlertRule-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-alert-rules \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"AlertRule-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertRuleApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_rule_api = AlertRuleApi(client)\r\n    resp = alert_rule_api.get_alert_rules({\"where\":{\"id\":\"AlertRule-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert_rule\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_rule_api := client.AlertRule\r\n    params := alert_rule.NewGetAlertRulesParams()\r\n    params.RequestBody = &models.GetAlertRulesRequestBody{\nWhere: &models.AlertRuleWhereInput{\nID: pointy.String(\"AlertRule-id\"),\n},\n}\r\n    rawResp, err := alert_rule_api.GetAlertRules(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.AlertRuleApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertRuleApi alertRuleApi = new AlertRuleApi(client);\r\n        GetAlertRulesRequestBody params = new GetAlertRulesRequestBody()\n.where(new AlertRuleWhereInput()\n.id(\"AlertRule-id\"));\r\n        List<AlertRule> resp = alertRuleApi.getAlertRules(params);\r\n    }\r\n}"
  },
  "/get-alert-rules-connection": {
    "exampleValue": {
      "where": {
        "id": "AlertRule-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-alert-rules-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"AlertRule-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertRuleApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_rule_api = AlertRuleApi(client)\r\n    resp = alert_rule_api.get_alert_rules_connection({\"where\":{\"id\":\"AlertRule-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert_rule\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_rule_api := client.AlertRule\r\n    params := alert_rule.NewGetAlertRulesConnectionParams()\r\n    params.RequestBody = &models.GetAlertRulesConnectionRequestBody{\nWhere: &models.AlertRuleWhereInput{\nID: pointy.String(\"AlertRule-id\"),\n},\n}\r\n    rawResp, err := alert_rule_api.GetAlertRulesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.AlertRuleApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertRuleApi alertRuleApi = new AlertRuleApi(client);\r\n        GetAlertRulesConnectionRequestBody params = new GetAlertRulesConnectionRequestBody()\n.where(new AlertRuleWhereInput()\n.id(\"AlertRule-id\"));\r\n        AlertRuleConnection resp = alertRuleApi.getAlertRulesConnection(params);\r\n    }\r\n}"
  },
  "/get-alerts": {
    "exampleValue": {
      "where": {
        "id": "Alert-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-alerts \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Alert-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_api = AlertApi(client)\r\n    resp = alert_api.get_alerts({\"where\":{\"id\":\"Alert-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_api := client.Alert\r\n    params := alert.NewGetAlertsParams()\r\n    params.RequestBody = &models.GetAlertsRequestBody{\nWhere: &models.AlertWhereInput{\nID: pointy.String(\"Alert-id\"),\n},\n}\r\n    rawResp, err := alert_api.GetAlerts(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.AlertApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertApi alertApi = new AlertApi(client);\r\n        GetAlertsRequestBody params = new GetAlertsRequestBody()\n.where(new AlertWhereInput()\n.id(\"Alert-id\"));\r\n        List<Alert> resp = alertApi.getAlerts(params);\r\n    }\r\n}"
  },
  "/get-alerts-connection": {
    "exampleValue": {
      "where": {
        "id": "Alert-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-alerts-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Alert-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_api = AlertApi(client)\r\n    resp = alert_api.get_alerts_connection({\"where\":{\"id\":\"Alert-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_api := client.Alert\r\n    params := alert.NewGetAlertsConnectionParams()\r\n    params.RequestBody = &models.GetAlertsConnectionRequestBody{\nWhere: &models.AlertWhereInput{\nID: pointy.String(\"Alert-id\"),\n},\n}\r\n    rawResp, err := alert_api.GetAlertsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.AlertApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertApi alertApi = new AlertApi(client);\r\n        GetAlertsConnectionRequestBody params = new GetAlertsConnectionRequestBody()\n.where(new AlertWhereInput()\n.id(\"Alert-id\"));\r\n        AlertConnection resp = alertApi.getAlertsConnection(params);\r\n    }\r\n}"
  },
  "/get-applications": {
    "exampleValue": {
      "where": {
        "id": "Application-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-applications \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Application-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    application_api = ApplicationApi(client)\r\n    resp = application_api.get_applications({\"where\":{\"id\":\"Application-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        application_api := client.Application\r\n    params := application.NewGetApplicationsParams()\r\n    params.RequestBody = &models.GetApplicationsRequestBody{\nWhere: &models.ApplicationWhereInput{\nID: pointy.String(\"Application-id\"),\n},\n}\r\n    rawResp, err := application_api.GetApplications(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ApplicationApi applicationApi = new ApplicationApi(client);\r\n        GetApplicationsRequestBody params = new GetApplicationsRequestBody()\n.where(new ApplicationWhereInput()\n.id(\"Application-id\"));\r\n        List<Application> resp = applicationApi.getApplications(params);\r\n    }\r\n}"
  },
  "/get-applications-connection": {
    "exampleValue": {
      "where": {
        "id": "Application-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-applications-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Application-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    application_api = ApplicationApi(client)\r\n    resp = application_api.get_applications_connection({\"where\":{\"id\":\"Application-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        application_api := client.Application\r\n    params := application.NewGetApplicationsConnectionParams()\r\n    params.RequestBody = &models.GetApplicationsConnectionRequestBody{\nWhere: &models.ApplicationWhereInput{\nID: pointy.String(\"Application-id\"),\n},\n}\r\n    rawResp, err := application_api.GetApplicationsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ApplicationApi applicationApi = new ApplicationApi(client);\r\n        GetApplicationsConnectionRequestBody params = new GetApplicationsConnectionRequestBody()\n.where(new ApplicationWhereInput()\n.id(\"Application-id\"));\r\n        ApplicationConnection resp = applicationApi.getApplicationsConnection(params);\r\n    }\r\n}"
  },
  "/get-brick-topoes": {
    "exampleValue": {
      "where": {
        "id": "BrickTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-brick-topoes \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"BrickTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, BrickTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    brick_topo_api = BrickTopoApi(client)\r\n    resp = brick_topo_api.get_brick_topoes({\"where\":{\"id\":\"BrickTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/brick_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        brick_topo_api := client.BrickTopo\r\n    params := brick_topo.NewGetBrickTopoesParams()\r\n    params.RequestBody = &models.GetBrickTopoesRequestBody{\nWhere: &models.BrickTopoWhereInput{\nID: pointy.String(\"BrickTopo-id\"),\n},\n}\r\n    rawResp, err := brick_topo_api.GetBrickTopoes(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.BrickTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        BrickTopoApi brickTopoApi = new BrickTopoApi(client);\r\n        GetBrickTopoesRequestBody params = new GetBrickTopoesRequestBody()\n.where(new BrickTopoWhereInput()\n.id(\"BrickTopo-id\"));\r\n        List<BrickTopo> resp = brickTopoApi.getBrickTopoes(params);\r\n    }\r\n}"
  },
  "/get-brick-topoes-connection": {
    "exampleValue": {
      "where": {
        "id": "BrickTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-brick-topoes-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"BrickTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, BrickTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    brick_topo_api = BrickTopoApi(client)\r\n    resp = brick_topo_api.get_brick_topoes_connection({\"where\":{\"id\":\"BrickTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/brick_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        brick_topo_api := client.BrickTopo\r\n    params := brick_topo.NewGetBrickTopoesConnectionParams()\r\n    params.RequestBody = &models.GetBrickTopoesConnectionRequestBody{\nWhere: &models.BrickTopoWhereInput{\nID: pointy.String(\"BrickTopo-id\"),\n},\n}\r\n    rawResp, err := brick_topo_api.GetBrickTopoesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.BrickTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        BrickTopoApi brickTopoApi = new BrickTopoApi(client);\r\n        GetBrickTopoesConnectionRequestBody params = new GetBrickTopoesConnectionRequestBody()\n.where(new BrickTopoWhereInput()\n.id(\"BrickTopo-id\"));\r\n        BrickTopoConnection resp = brickTopoApi.getBrickTopoesConnection(params);\r\n    }\r\n}"
  },
  "/get-cloudtower-application-packages": {
    "exampleValue": {
      "where": {
        "id": "CloudTowerApplicationPackage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cloudtower-application-packages \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"CloudTowerApplicationPackage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationPackageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_package_api = CloudTowerApplicationPackageApi(client)\r\n    resp = cloud_tower_application_package_api.get_cloud_tower_application_packages({\"where\":{\"id\":\"CloudTowerApplicationPackage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application_package\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_package_api := client.CloudTowerApplicationPackage\r\n    params := cloud_tower_application_package.NewGetCloudTowerApplicationPackagesParams()\r\n    params.RequestBody = &models.GetCloudTowerApplicationPackagesRequestBody{\nWhere: &models.CloudTowerApplicationPackageWhereInput{\nID: pointy.String(\"CloudTowerApplicationPackage-id\"),\n},\n}\r\n    rawResp, err := cloud_tower_application_package_api.GetCloudTowerApplicationPackages(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationPackageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationPackageApi cloudTowerApplicationPackageApi = new CloudTowerApplicationPackageApi(client);\r\n        GetCloudTowerApplicationPackagesRequestBody params = new GetCloudTowerApplicationPackagesRequestBody()\n.where(new CloudTowerApplicationPackageWhereInput()\n.id(\"CloudTowerApplicationPackage-id\"));\r\n        List<CloudTowerApplicationPackage> resp = cloudTowerApplicationPackageApi.getCloudTowerApplicationPackages(params);\r\n    }\r\n}"
  },
  "/get-cloud-tower-application-packages-connection": {
    "exampleValue": {
      "where": {
        "id": "CloudTowerApplicationPackage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cloud-tower-application-packages-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"CloudTowerApplicationPackage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationPackageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_package_api = CloudTowerApplicationPackageApi(client)\r\n    resp = cloud_tower_application_package_api.get_cloud_tower_application_packages_connection({\"where\":{\"id\":\"CloudTowerApplicationPackage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application_package\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_package_api := client.CloudTowerApplicationPackage\r\n    params := cloud_tower_application_package.NewGetCloudTowerApplicationPackagesConnectionParams()\r\n    params.RequestBody = &models.GetCloudTowerApplicationPackagesConnectionRequestBody{\nWhere: &models.CloudTowerApplicationPackageWhereInput{\nID: pointy.String(\"CloudTowerApplicationPackage-id\"),\n},\n}\r\n    rawResp, err := cloud_tower_application_package_api.GetCloudTowerApplicationPackagesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationPackageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationPackageApi cloudTowerApplicationPackageApi = new CloudTowerApplicationPackageApi(client);\r\n        GetCloudTowerApplicationPackagesConnectionRequestBody params = new GetCloudTowerApplicationPackagesConnectionRequestBody()\n.where(new CloudTowerApplicationPackageWhereInput()\n.id(\"CloudTowerApplicationPackage-id\"));\r\n        CloudTowerApplicationPackageConnection resp = cloudTowerApplicationPackageApi.getCloudTowerApplicationPackagesConnection(params);\r\n    }\r\n}"
  },
  "/get-cloudtower-applications": {
    "exampleValue": {
      "where": {
        "id": "CloudTowerApplication-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cloudtower-applications \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"CloudTowerApplication-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_api = CloudTowerApplicationApi(client)\r\n    resp = cloud_tower_application_api.get_cloud_tower_applications({\"where\":{\"id\":\"CloudTowerApplication-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_api := client.CloudTowerApplication\r\n    params := cloud_tower_application.NewGetCloudTowerApplicationsParams()\r\n    params.RequestBody = &models.GetCloudTowerApplicationsRequestBody{\nWhere: &models.CloudTowerApplicationWhereInput{\nID: pointy.String(\"CloudTowerApplication-id\"),\n},\n}\r\n    rawResp, err := cloud_tower_application_api.GetCloudTowerApplications(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationApi cloudTowerApplicationApi = new CloudTowerApplicationApi(client);\r\n        GetCloudTowerApplicationsRequestBody params = new GetCloudTowerApplicationsRequestBody()\n.where(new CloudTowerApplicationWhereInput()\n.id(\"CloudTowerApplication-id\"));\r\n        List<CloudTowerApplication> resp = cloudTowerApplicationApi.getCloudTowerApplications(params);\r\n    }\r\n}"
  },
  "/get-cloud-tower-applications-connection": {
    "exampleValue": {
      "where": {
        "id": "CloudTowerApplication-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cloud-tower-applications-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"CloudTowerApplication-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, CloudTowerApplicationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cloud_tower_application_api = CloudTowerApplicationApi(client)\r\n    resp = cloud_tower_application_api.get_cloud_tower_applications_connection({\"where\":{\"id\":\"CloudTowerApplication-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cloud_tower_application\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cloud_tower_application_api := client.CloudTowerApplication\r\n    params := cloud_tower_application.NewGetCloudTowerApplicationsConnectionParams()\r\n    params.RequestBody = &models.GetCloudTowerApplicationsConnectionRequestBody{\nWhere: &models.CloudTowerApplicationWhereInput{\nID: pointy.String(\"CloudTowerApplication-id\"),\n},\n}\r\n    rawResp, err := cloud_tower_application_api.GetCloudTowerApplicationsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.CloudTowerApplicationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        CloudTowerApplicationApi cloudTowerApplicationApi = new CloudTowerApplicationApi(client);\r\n        GetCloudTowerApplicationsConnectionRequestBody params = new GetCloudTowerApplicationsConnectionRequestBody()\n.where(new CloudTowerApplicationWhereInput()\n.id(\"CloudTowerApplication-id\"));\r\n        CloudTowerApplicationConnection resp = cloudTowerApplicationApi.getCloudTowerApplicationsConnection(params);\r\n    }\r\n}"
  },
  "/get-cluster-images": {
    "exampleValue": {
      "where": {
        "id": "ClusterImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-images \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ClusterImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_image_api = ClusterImageApi(client)\r\n    resp = cluster_image_api.get_cluster_images({\"where\":{\"id\":\"ClusterImage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_image_api := client.ClusterImage\r\n    params := cluster_image.NewGetClusterImagesParams()\r\n    params.RequestBody = &models.GetClusterImagesRequestBody{\nWhere: &models.ClusterImageWhereInput{\nID: pointy.String(\"ClusterImage-id\"),\n},\n}\r\n    rawResp, err := cluster_image_api.GetClusterImages(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterImageApi clusterImageApi = new ClusterImageApi(client);\r\n        GetClusterImagesRequestBody params = new GetClusterImagesRequestBody()\n.where(new ClusterImageWhereInput()\n.id(\"ClusterImage-id\"));\r\n        List<ClusterImage> resp = clusterImageApi.getClusterImages(params);\r\n    }\r\n}"
  },
  "/get-cluster-images-connection": {
    "exampleValue": {
      "where": {
        "id": "ClusterImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-images-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ClusterImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_image_api = ClusterImageApi(client)\r\n    resp = cluster_image_api.get_cluster_images_connection({\"where\":{\"id\":\"ClusterImage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_image_api := client.ClusterImage\r\n    params := cluster_image.NewGetClusterImagesConnectionParams()\r\n    params.RequestBody = &models.GetClusterImagesConnectionRequestBody{\nWhere: &models.ClusterImageWhereInput{\nID: pointy.String(\"ClusterImage-id\"),\n},\n}\r\n    rawResp, err := cluster_image_api.GetClusterImagesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterImageApi clusterImageApi = new ClusterImageApi(client);\r\n        GetClusterImagesConnectionRequestBody params = new GetClusterImagesConnectionRequestBody()\n.where(new ClusterImageWhereInput()\n.id(\"ClusterImage-id\"));\r\n        ClusterImageConnection resp = clusterImageApi.getClusterImagesConnection(params);\r\n    }\r\n}"
  },
  "/get-cluster-settingses": {
    "exampleValue": {
      "where": {
        "id": "ClusterSettings-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-settingses \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ClusterSettings-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterSettingsApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_settings_api = ClusterSettingsApi(client)\r\n    resp = cluster_settings_api.get_cluster_settingses({\"where\":{\"id\":\"ClusterSettings-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_settings_api := client.ClusterSettings\r\n    params := cluster_settings.NewGetClusterSettingsesParams()\r\n    params.RequestBody = &models.GetClusterSettingsesRequestBody{\nWhere: &models.ClusterSettingsWhereInput{\nID: pointy.String(\"ClusterSettings-id\"),\n},\n}\r\n    rawResp, err := cluster_settings_api.GetClusterSettingses(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterSettingsApi clusterSettingsApi = new ClusterSettingsApi(client);\r\n        GetClusterSettingsesRequestBody params = new GetClusterSettingsesRequestBody()\n.where(new ClusterSettingsWhereInput()\n.id(\"ClusterSettings-id\"));\r\n        List<ClusterSettings> resp = clusterSettingsApi.getClusterSettingses(params);\r\n    }\r\n}"
  },
  "/get-cluster-settingses-connection": {
    "exampleValue": {
      "where": {
        "id": "ClusterSettings-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-settingses-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ClusterSettings-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterSettingsApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_settings_api = ClusterSettingsApi(client)\r\n    resp = cluster_settings_api.get_cluster_settingses_connection({\"where\":{\"id\":\"ClusterSettings-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_settings_api := client.ClusterSettings\r\n    params := cluster_settings.NewGetClusterSettingsesConnectionParams()\r\n    params.RequestBody = &models.GetClusterSettingsesConnectionRequestBody{\nWhere: &models.ClusterSettingsWhereInput{\nID: pointy.String(\"ClusterSettings-id\"),\n},\n}\r\n    rawResp, err := cluster_settings_api.GetClusterSettingsesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterSettingsApi clusterSettingsApi = new ClusterSettingsApi(client);\r\n        GetClusterSettingsesConnectionRequestBody params = new GetClusterSettingsesConnectionRequestBody()\n.where(new ClusterSettingsWhereInput()\n.id(\"ClusterSettings-id\"));\r\n        ClusterSettingsConnection resp = clusterSettingsApi.getClusterSettingsesConnection(params);\r\n    }\r\n}"
  },
  "/get-cluster-topoes": {
    "exampleValue": {
      "where": {
        "id": "ClusterTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-topoes \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ClusterTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_topo_api = ClusterTopoApi(client)\r\n    resp = cluster_topo_api.get_cluster_topoes({\"where\":{\"id\":\"ClusterTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_topo_api := client.ClusterTopo\r\n    params := cluster_topo.NewGetClusterTopoesParams()\r\n    params.RequestBody = &models.GetClusterTopoesRequestBody{\nWhere: &models.ClusterTopoWhereInput{\nID: pointy.String(\"ClusterTopo-id\"),\n},\n}\r\n    rawResp, err := cluster_topo_api.GetClusterTopoes(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterTopoApi clusterTopoApi = new ClusterTopoApi(client);\r\n        GetClusterTopoesRequestBody params = new GetClusterTopoesRequestBody()\n.where(new ClusterTopoWhereInput()\n.id(\"ClusterTopo-id\"));\r\n        List<ClusterTopo> resp = clusterTopoApi.getClusterTopoes(params);\r\n    }\r\n}"
  },
  "/get-cluster-topoes-connection": {
    "exampleValue": {
      "where": {
        "id": "ClusterTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-topoes-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ClusterTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_topo_api = ClusterTopoApi(client)\r\n    resp = cluster_topo_api.get_cluster_topoes_connection({\"where\":{\"id\":\"ClusterTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_topo_api := client.ClusterTopo\r\n    params := cluster_topo.NewGetClusterTopoesConnectionParams()\r\n    params.RequestBody = &models.GetClusterTopoesConnectionRequestBody{\nWhere: &models.ClusterTopoWhereInput{\nID: pointy.String(\"ClusterTopo-id\"),\n},\n}\r\n    rawResp, err := cluster_topo_api.GetClusterTopoesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterTopoApi clusterTopoApi = new ClusterTopoApi(client);\r\n        GetClusterTopoesConnectionRequestBody params = new GetClusterTopoesConnectionRequestBody()\n.where(new ClusterTopoWhereInput()\n.id(\"ClusterTopo-id\"));\r\n        ClusterTopoConnection resp = clusterTopoApi.getClusterTopoesConnection(params);\r\n    }\r\n}"
  },
  "/get-cluster-upgrade-histories": {
    "exampleValue": {
      "where": {
        "id": "ClusterUpgradeHistory-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-upgrade-histories \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ClusterUpgradeHistory-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterUpgradeHistoryApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_upgrade_history_api = ClusterUpgradeHistoryApi(client)\r\n    resp = cluster_upgrade_history_api.get_cluster_upgrade_histories({\"where\":{\"id\":\"ClusterUpgradeHistory-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster_upgrade_history\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_upgrade_history_api := client.ClusterUpgradeHistory\r\n    params := cluster_upgrade_history.NewGetClusterUpgradeHistoriesParams()\r\n    params.RequestBody = &models.GetClusterUpgradeHistoriesRequestBody{\nWhere: &models.ClusterUpgradeHistoryWhereInput{\nID: pointy.String(\"ClusterUpgradeHistory-id\"),\n},\n}\r\n    rawResp, err := cluster_upgrade_history_api.GetClusterUpgradeHistories(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterUpgradeHistoryApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterUpgradeHistoryApi clusterUpgradeHistoryApi = new ClusterUpgradeHistoryApi(client);\r\n        GetClusterUpgradeHistoriesRequestBody params = new GetClusterUpgradeHistoriesRequestBody()\n.where(new ClusterUpgradeHistoryWhereInput()\n.id(\"ClusterUpgradeHistory-id\"));\r\n        List<ClusterUpgradeHistory> resp = clusterUpgradeHistoryApi.getClusterUpgradeHistories(params);\r\n    }\r\n}"
  },
  "/get-cluster-upgrade-histories-connection": {
    "exampleValue": {
      "where": {
        "id": "ClusterUpgradeHistory-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-cluster-upgrade-histories-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ClusterUpgradeHistory-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterUpgradeHistoryApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_upgrade_history_api = ClusterUpgradeHistoryApi(client)\r\n    resp = cluster_upgrade_history_api.get_cluster_upgrade_histories_connection({\"where\":{\"id\":\"ClusterUpgradeHistory-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster_upgrade_history\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_upgrade_history_api := client.ClusterUpgradeHistory\r\n    params := cluster_upgrade_history.NewGetClusterUpgradeHistoriesConnectionParams()\r\n    params.RequestBody = &models.GetClusterUpgradeHistoriesConnectionRequestBody{\nWhere: &models.ClusterUpgradeHistoryWhereInput{\nID: pointy.String(\"ClusterUpgradeHistory-id\"),\n},\n}\r\n    rawResp, err := cluster_upgrade_history_api.GetClusterUpgradeHistoriesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterUpgradeHistoryApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterUpgradeHistoryApi clusterUpgradeHistoryApi = new ClusterUpgradeHistoryApi(client);\r\n        GetClusterUpgradeHistoriesConnectionRequestBody params = new GetClusterUpgradeHistoriesConnectionRequestBody()\n.where(new ClusterUpgradeHistoryWhereInput()\n.id(\"ClusterUpgradeHistory-id\"));\r\n        ClusterUpgradeHistoryConnection resp = clusterUpgradeHistoryApi.getClusterUpgradeHistoriesConnection(params);\r\n    }\r\n}"
  },
  "/get-clusters": {
    "exampleValue": {
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-clusters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.get_clusters({\"where\":{\"id\":\"Cluster-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewGetClustersParams()\r\n    params.RequestBody = &models.GetClustersRequestBody{\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.GetClusters(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        GetClustersRequestBody params = new GetClustersRequestBody()\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        List<Cluster> resp = clusterApi.getClusters(params);\r\n    }\r\n}"
  },
  "/get-clusters-connection": {
    "exampleValue": {
      "where": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-clusters-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ClusterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    cluster_api = ClusterApi(client)\r\n    resp = cluster_api.get_clusters_connection({\"where\":{\"id\":\"Cluster-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        cluster_api := client.Cluster\r\n    params := cluster.NewGetClustersConnectionParams()\r\n    params.RequestBody = &models.GetClustersConnectionRequestBody{\nWhere: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := cluster_api.GetClustersConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ClusterApi clusterApi = new ClusterApi(client);\r\n        GetClustersConnectionRequestBody params = new GetClustersConnectionRequestBody()\n.where(new ClusterWhereInput()\n.id(\"Cluster-id\"));\r\n        ClusterConnection resp = clusterApi.getClustersConnection(params);\r\n    }\r\n}"
  },
  "/get-consistency-group-snapshots": {
    "exampleValue": {
      "where": {
        "id": "ConsistencyGroupSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-consistency-group-snapshots \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ConsistencyGroupSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_snapshot_api = ConsistencyGroupSnapshotApi(client)\r\n    resp = consistency_group_snapshot_api.get_consistency_group_snapshots({\"where\":{\"id\":\"ConsistencyGroupSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_snapshot_api := client.ConsistencyGroupSnapshot\r\n    params := consistency_group_snapshot.NewGetConsistencyGroupSnapshotsParams()\r\n    params.RequestBody = &models.GetConsistencyGroupSnapshotsRequestBody{\nWhere: &models.ConsistencyGroupSnapshotWhereInput{\nID: pointy.String(\"ConsistencyGroupSnapshot-id\"),\n},\n}\r\n    rawResp, err := consistency_group_snapshot_api.GetConsistencyGroupSnapshots(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupSnapshotApi consistencyGroupSnapshotApi = new ConsistencyGroupSnapshotApi(client);\r\n        GetConsistencyGroupSnapshotsRequestBody params = new GetConsistencyGroupSnapshotsRequestBody()\n.where(new ConsistencyGroupSnapshotWhereInput()\n.id(\"ConsistencyGroupSnapshot-id\"));\r\n        List<ConsistencyGroupSnapshot> resp = consistencyGroupSnapshotApi.getConsistencyGroupSnapshots(params);\r\n    }\r\n}"
  },
  "/get-consistency-group-snapshots-connection": {
    "exampleValue": {
      "where": {
        "id": "ConsistencyGroupSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-consistency-group-snapshots-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ConsistencyGroupSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_snapshot_api = ConsistencyGroupSnapshotApi(client)\r\n    resp = consistency_group_snapshot_api.get_consistency_group_snapshots_connection({\"where\":{\"id\":\"ConsistencyGroupSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_snapshot_api := client.ConsistencyGroupSnapshot\r\n    params := consistency_group_snapshot.NewGetConsistencyGroupSnapshotsConnectionParams()\r\n    params.RequestBody = &models.GetConsistencyGroupSnapshotsConnectionRequestBody{\nWhere: &models.ConsistencyGroupSnapshotWhereInput{\nID: pointy.String(\"ConsistencyGroupSnapshot-id\"),\n},\n}\r\n    rawResp, err := consistency_group_snapshot_api.GetConsistencyGroupSnapshotsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupSnapshotApi consistencyGroupSnapshotApi = new ConsistencyGroupSnapshotApi(client);\r\n        GetConsistencyGroupSnapshotsConnectionRequestBody params = new GetConsistencyGroupSnapshotsConnectionRequestBody()\n.where(new ConsistencyGroupSnapshotWhereInput()\n.id(\"ConsistencyGroupSnapshot-id\"));\r\n        ConsistencyGroupSnapshotConnection resp = consistencyGroupSnapshotApi.getConsistencyGroupSnapshotsConnection(params);\r\n    }\r\n}"
  },
  "/get-consistency-groups": {
    "exampleValue": {
      "where": {
        "id": "ConsistencyGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-consistency-groups \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ConsistencyGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_api = ConsistencyGroupApi(client)\r\n    resp = consistency_group_api.get_consistency_groups({\"where\":{\"id\":\"ConsistencyGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_api := client.ConsistencyGroup\r\n    params := consistency_group.NewGetConsistencyGroupsParams()\r\n    params.RequestBody = &models.GetConsistencyGroupsRequestBody{\nWhere: &models.ConsistencyGroupWhereInput{\nID: pointy.String(\"ConsistencyGroup-id\"),\n},\n}\r\n    rawResp, err := consistency_group_api.GetConsistencyGroups(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupApi consistencyGroupApi = new ConsistencyGroupApi(client);\r\n        GetConsistencyGroupsRequestBody params = new GetConsistencyGroupsRequestBody()\n.where(new ConsistencyGroupWhereInput()\n.id(\"ConsistencyGroup-id\"));\r\n        List<ConsistencyGroup> resp = consistencyGroupApi.getConsistencyGroups(params);\r\n    }\r\n}"
  },
  "/get-consistency-groups-connection": {
    "exampleValue": {
      "where": {
        "id": "ConsistencyGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-consistency-groups-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ConsistencyGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ConsistencyGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    consistency_group_api = ConsistencyGroupApi(client)\r\n    resp = consistency_group_api.get_consistency_groups_connection({\"where\":{\"id\":\"ConsistencyGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/consistency_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        consistency_group_api := client.ConsistencyGroup\r\n    params := consistency_group.NewGetConsistencyGroupsConnectionParams()\r\n    params.RequestBody = &models.GetConsistencyGroupsConnectionRequestBody{\nWhere: &models.ConsistencyGroupWhereInput{\nID: pointy.String(\"ConsistencyGroup-id\"),\n},\n}\r\n    rawResp, err := consistency_group_api.GetConsistencyGroupsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ConsistencyGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ConsistencyGroupApi consistencyGroupApi = new ConsistencyGroupApi(client);\r\n        GetConsistencyGroupsConnectionRequestBody params = new GetConsistencyGroupsConnectionRequestBody()\n.where(new ConsistencyGroupWhereInput()\n.id(\"ConsistencyGroup-id\"));\r\n        ConsistencyGroupConnection resp = consistencyGroupApi.getConsistencyGroupsConnection(params);\r\n    }\r\n}"
  },
  "/get-content-library-images": {
    "exampleValue": {
      "where": {
        "id": "ContentLibraryImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-content-library-images \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ContentLibraryImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_image_api = ContentLibraryImageApi(client)\r\n    resp = content_library_image_api.get_content_library_images({\"where\":{\"id\":\"ContentLibraryImage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_image_api := client.ContentLibraryImage\r\n    params := content_library_image.NewGetContentLibraryImagesParams()\r\n    params.RequestBody = &models.GetContentLibraryImagesRequestBody{\nWhere: &models.ContentLibraryImageWhereInput{\nID: pointy.String(\"ContentLibraryImage-id\"),\n},\n}\r\n    rawResp, err := content_library_image_api.GetContentLibraryImages(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ContentLibraryImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryImageApi contentLibraryImageApi = new ContentLibraryImageApi(client);\r\n        GetContentLibraryImagesRequestBody params = new GetContentLibraryImagesRequestBody()\n.where(new ContentLibraryImageWhereInput()\n.id(\"ContentLibraryImage-id\"));\r\n        List<ContentLibraryImage> resp = contentLibraryImageApi.getContentLibraryImages(params);\r\n    }\r\n}"
  },
  "/get-content-library-images-connection": {
    "exampleValue": {
      "where": {
        "id": "ContentLibraryImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-content-library-images-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ContentLibraryImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_image_api = ContentLibraryImageApi(client)\r\n    resp = content_library_image_api.get_content_library_images_connection({\"where\":{\"id\":\"ContentLibraryImage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_image_api := client.ContentLibraryImage\r\n    params := content_library_image.NewGetContentLibraryImagesConnectionParams()\r\n    params.RequestBody = &models.GetContentLibraryImagesConnectionRequestBody{\nWhere: &models.ContentLibraryImageWhereInput{\nID: pointy.String(\"ContentLibraryImage-id\"),\n},\n}\r\n    rawResp, err := content_library_image_api.GetContentLibraryImagesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ContentLibraryImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryImageApi contentLibraryImageApi = new ContentLibraryImageApi(client);\r\n        GetContentLibraryImagesConnectionRequestBody params = new GetContentLibraryImagesConnectionRequestBody()\n.where(new ContentLibraryImageWhereInput()\n.id(\"ContentLibraryImage-id\"));\r\n        ContentLibraryImageConnection resp = contentLibraryImageApi.getContentLibraryImagesConnection(params);\r\n    }\r\n}"
  },
  "/get-content-library-vm-templates": {
    "exampleValue": {
      "where": {
        "id": "ContentLibraryVmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-content-library-vm-templates \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.get_content_library_vm_templates({\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewGetContentLibraryVMTemplatesParams()\r\n    params.RequestBody = &models.GetContentLibraryVMTemplatesRequestBody{\nWhere: &models.ContentLibraryVMTemplateWhereInput{\nID: pointy.String(\"ContentLibraryVmTemplate-id\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.GetContentLibraryVMTemplates(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        GetContentLibraryVmTemplatesRequestBody params = new GetContentLibraryVmTemplatesRequestBody()\n.where(new ContentLibraryVmTemplateWhereInput()\n.id(\"ContentLibraryVmTemplate-id\"));\r\n        List<ContentLibraryVmTemplate> resp = contentLibraryVmTemplateApi.getContentLibraryVmTemplates(params);\r\n    }\r\n}"
  },
  "/get-content-library-vm-templates-connection": {
    "exampleValue": {
      "where": {
        "id": "ContentLibraryVmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-content-library-vm-templates-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ContentLibraryVmTemplateApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    content_library_vm_template_api = ContentLibraryVmTemplateApi(client)\r\n    resp = content_library_vm_template_api.get_content_library_vm_templates_connection({\"where\":{\"id\":\"ContentLibraryVmTemplate-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/content_library_vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        content_library_vm_template_api := client.ContentLibraryVMTemplate\r\n    params := content_library_vm_template.NewGetContentLibraryVMTemplatesConnectionParams()\r\n    params.RequestBody = &models.GetContentLibraryVMTemplatesConnectionRequestBody{\nWhere: &models.ContentLibraryVMTemplateWhereInput{\nID: pointy.String(\"ContentLibraryVmTemplate-id\"),\n},\n}\r\n    rawResp, err := content_library_vm_template_api.GetContentLibraryVMTemplatesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ContentLibraryVmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ContentLibraryVmTemplateApi contentLibraryVmTemplateApi = new ContentLibraryVmTemplateApi(client);\r\n        GetContentLibraryVmTemplatesConnectionRequestBody params = new GetContentLibraryVmTemplatesConnectionRequestBody()\n.where(new ContentLibraryVmTemplateWhereInput()\n.id(\"ContentLibraryVmTemplate-id\"));\r\n        ContentLibraryVmTemplateConnection resp = contentLibraryVmTemplateApi.getContentLibraryVmTemplatesConnection(params);\r\n    }\r\n}"
  },
  "/get-datacenters": {
    "exampleValue": {
      "where": {
        "id": "Datacenter-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-datacenters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Datacenter-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DatacenterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    datacenter_api = DatacenterApi(client)\r\n    resp = datacenter_api.get_datacenters({\"where\":{\"id\":\"Datacenter-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/datacenter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        datacenter_api := client.Datacenter\r\n    params := datacenter.NewGetDatacentersParams()\r\n    params.RequestBody = &models.GetDatacentersRequestBody{\nWhere: &models.DatacenterWhereInput{\nID: pointy.String(\"Datacenter-id\"),\n},\n}\r\n    rawResp, err := datacenter_api.GetDatacenters(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.DatacenterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DatacenterApi datacenterApi = new DatacenterApi(client);\r\n        GetDatacentersRequestBody params = new GetDatacentersRequestBody()\n.where(new DatacenterWhereInput()\n.id(\"Datacenter-id\"));\r\n        List<Datacenter> resp = datacenterApi.getDatacenters(params);\r\n    }\r\n}"
  },
  "/get-datacenters-connection": {
    "exampleValue": {
      "where": {
        "id": "Datacenter-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-datacenters-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Datacenter-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DatacenterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    datacenter_api = DatacenterApi(client)\r\n    resp = datacenter_api.get_datacenters_connection({\"where\":{\"id\":\"Datacenter-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/datacenter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        datacenter_api := client.Datacenter\r\n    params := datacenter.NewGetDatacentersConnectionParams()\r\n    params.RequestBody = &models.GetDatacentersConnectionRequestBody{\nWhere: &models.DatacenterWhereInput{\nID: pointy.String(\"Datacenter-id\"),\n},\n}\r\n    rawResp, err := datacenter_api.GetDatacentersConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.DatacenterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DatacenterApi datacenterApi = new DatacenterApi(client);\r\n        GetDatacentersConnectionRequestBody params = new GetDatacentersConnectionRequestBody()\n.where(new DatacenterWhereInput()\n.id(\"Datacenter-id\"));\r\n        DatacenterConnection resp = datacenterApi.getDatacentersConnection(params);\r\n    }\r\n}"
  },
  "/get-deploys": {
    "exampleValue": {
      "where": {
        "id": "Deploy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-deploys \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Deploy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DeployApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    deploy_api = DeployApi(client)\r\n    resp = deploy_api.get_deploys({\"where\":{\"id\":\"Deploy-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/deploy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        deploy_api := client.Deploy\r\n    params := deploy.NewGetDeploysParams()\r\n    params.RequestBody = &models.GetDeploysRequestBody{\nWhere: &models.DeployWhereInput{\nID: pointy.String(\"Deploy-id\"),\n},\n}\r\n    rawResp, err := deploy_api.GetDeploys(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.DeployApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DeployApi deployApi = new DeployApi(client);\r\n        GetDeploysRequestBody params = new GetDeploysRequestBody()\n.where(new DeployWhereInput()\n.id(\"Deploy-id\"));\r\n        List<Deploy> resp = deployApi.getDeploys(params);\r\n    }\r\n}"
  },
  "/get-deploys-connection": {
    "exampleValue": {
      "where": {
        "id": "Deploy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-deploys-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Deploy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DeployApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    deploy_api = DeployApi(client)\r\n    resp = deploy_api.get_deploys_connection({\"where\":{\"id\":\"Deploy-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/deploy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        deploy_api := client.Deploy\r\n    params := deploy.NewGetDeploysConnectionParams()\r\n    params.RequestBody = &models.GetDeploysConnectionRequestBody{\nWhere: &models.DeployWhereInput{\nID: pointy.String(\"Deploy-id\"),\n},\n}\r\n    rawResp, err := deploy_api.GetDeploysConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.DeployApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DeployApi deployApi = new DeployApi(client);\r\n        GetDeploysConnectionRequestBody params = new GetDeploysConnectionRequestBody()\n.where(new DeployWhereInput()\n.id(\"Deploy-id\"));\r\n        DeployConnection resp = deployApi.getDeploysConnection(params);\r\n    }\r\n}"
  },
  "/get-discover-hosts": {
    "exampleValue": {
      "cluster": {
        "id": "Cluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-discover-hosts \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"cluster\":{\"id\":\"Cluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DiscoveredHostApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    discovered_host_api = DiscoveredHostApi(client)\r\n    resp = discovered_host_api.get_discover_hosts({\"cluster\":{\"id\":\"Cluster-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/discovered_host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        discovered_host_api := client.DiscoveredHost\r\n    params := discovered_host.NewGetDiscoverHostsParams()\r\n    params.RequestBody = &models.GetDiscoverHostsRequestBody{\nCluster: &models.ClusterWhereUniqueInput{\nID: pointy.String(\"Cluster-id\"),\n},\n}\r\n    rawResp, err := discovered_host_api.GetDiscoverHosts(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.DiscoveredHostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DiscoveredHostApi discoveredHostApi = new DiscoveredHostApi(client);\r\n        GetDiscoverHostsRequestBody params = new GetDiscoverHostsRequestBody()\n.cluster(new ClusterWhereUniqueInput()\n.id(\"Cluster-id\"));\r\n        List<DiscoveredHost> resp = discoveredHostApi.getDiscoverHosts(params);\r\n    }\r\n}"
  },
  "/get-disks": {
    "exampleValue": {
      "where": {
        "id": "Disk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-disks \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Disk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DiskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    disk_api = DiskApi(client)\r\n    resp = disk_api.get_disks({\"where\":{\"id\":\"Disk-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/disk\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        disk_api := client.Disk\r\n    params := disk.NewGetDisksParams()\r\n    params.RequestBody = &models.GetDisksRequestBody{\nWhere: &models.DiskWhereInput{\nID: pointy.String(\"Disk-id\"),\n},\n}\r\n    rawResp, err := disk_api.GetDisks(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.DiskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DiskApi diskApi = new DiskApi(client);\r\n        GetDisksRequestBody params = new GetDisksRequestBody()\n.where(new DiskWhereInput()\n.id(\"Disk-id\"));\r\n        List<Disk> resp = diskApi.getDisks(params);\r\n    }\r\n}"
  },
  "/get-disks-connection": {
    "exampleValue": {
      "where": {
        "id": "Disk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-disks-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Disk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, DiskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    disk_api = DiskApi(client)\r\n    resp = disk_api.get_disks_connection({\"where\":{\"id\":\"Disk-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/disk\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        disk_api := client.Disk\r\n    params := disk.NewGetDisksConnectionParams()\r\n    params.RequestBody = &models.GetDisksConnectionRequestBody{\nWhere: &models.DiskWhereInput{\nID: pointy.String(\"Disk-id\"),\n},\n}\r\n    rawResp, err := disk_api.GetDisksConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.DiskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        DiskApi diskApi = new DiskApi(client);\r\n        GetDisksConnectionRequestBody params = new GetDisksConnectionRequestBody()\n.where(new DiskWhereInput()\n.id(\"Disk-id\"));\r\n        DiskConnection resp = diskApi.getDisksConnection(params);\r\n    }\r\n}"
  },
  "/get-elf-data-stores": {
    "exampleValue": {
      "where": {
        "id": "ElfDataStore-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-elf-data-stores \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ElfDataStore-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfDataStoreApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_data_store_api = ElfDataStoreApi(client)\r\n    resp = elf_data_store_api.get_elf_data_stores({\"where\":{\"id\":\"ElfDataStore-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_data_store\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_data_store_api := client.ElfDataStore\r\n    params := elf_data_store.NewGetElfDataStoresParams()\r\n    params.RequestBody = &models.GetElfDataStoresRequestBody{\nWhere: &models.ElfDataStoreWhereInput{\nID: pointy.String(\"ElfDataStore-id\"),\n},\n}\r\n    rawResp, err := elf_data_store_api.GetElfDataStores(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ElfDataStoreApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfDataStoreApi elfDataStoreApi = new ElfDataStoreApi(client);\r\n        GetElfDataStoresRequestBody params = new GetElfDataStoresRequestBody()\n.where(new ElfDataStoreWhereInput()\n.id(\"ElfDataStore-id\"));\r\n        List<ElfDataStore> resp = elfDataStoreApi.getElfDataStores(params);\r\n    }\r\n}"
  },
  "/get-elf-data-stores-connection": {
    "exampleValue": {
      "where": {
        "id": "ElfDataStore-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-elf-data-stores-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ElfDataStore-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfDataStoreApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_data_store_api = ElfDataStoreApi(client)\r\n    resp = elf_data_store_api.get_elf_data_stores_connection({\"where\":{\"id\":\"ElfDataStore-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_data_store\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_data_store_api := client.ElfDataStore\r\n    params := elf_data_store.NewGetElfDataStoresConnectionParams()\r\n    params.RequestBody = &models.GetElfDataStoresConnectionRequestBody{\nWhere: &models.ElfDataStoreWhereInput{\nID: pointy.String(\"ElfDataStore-id\"),\n},\n}\r\n    rawResp, err := elf_data_store_api.GetElfDataStoresConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ElfDataStoreApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfDataStoreApi elfDataStoreApi = new ElfDataStoreApi(client);\r\n        GetElfDataStoresConnectionRequestBody params = new GetElfDataStoresConnectionRequestBody()\n.where(new ElfDataStoreWhereInput()\n.id(\"ElfDataStore-id\"));\r\n        ElfDataStoreConnection resp = elfDataStoreApi.getElfDataStoresConnection(params);\r\n    }\r\n}"
  },
  "/get-elf-images": {
    "exampleValue": {
      "where": {
        "id": "ElfImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-elf-images \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ElfImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_image_api = ElfImageApi(client)\r\n    resp = elf_image_api.get_elf_images({\"where\":{\"id\":\"ElfImage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_image_api := client.ElfImage\r\n    params := elf_image.NewGetElfImagesParams()\r\n    params.RequestBody = &models.GetElfImagesRequestBody{\nWhere: &models.ElfImageWhereInput{\nID: pointy.String(\"ElfImage-id\"),\n},\n}\r\n    rawResp, err := elf_image_api.GetElfImages(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ElfImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfImageApi elfImageApi = new ElfImageApi(client);\r\n        GetElfImagesRequestBody params = new GetElfImagesRequestBody()\n.where(new ElfImageWhereInput()\n.id(\"ElfImage-id\"));\r\n        List<ElfImage> resp = elfImageApi.getElfImages(params);\r\n    }\r\n}"
  },
  "/get-elf-images-connection": {
    "exampleValue": {
      "where": {
        "id": "ElfImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-elf-images-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ElfImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_image_api = ElfImageApi(client)\r\n    resp = elf_image_api.get_elf_images_connection({\"where\":{\"id\":\"ElfImage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_image_api := client.ElfImage\r\n    params := elf_image.NewGetElfImagesConnectionParams()\r\n    params.RequestBody = &models.GetElfImagesConnectionRequestBody{\nWhere: &models.ElfImageWhereInput{\nID: pointy.String(\"ElfImage-id\"),\n},\n}\r\n    rawResp, err := elf_image_api.GetElfImagesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ElfImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfImageApi elfImageApi = new ElfImageApi(client);\r\n        GetElfImagesConnectionRequestBody params = new GetElfImagesConnectionRequestBody()\n.where(new ElfImageWhereInput()\n.id(\"ElfImage-id\"));\r\n        ElfImageConnection resp = elfImageApi.getElfImagesConnection(params);\r\n    }\r\n}"
  },
  "/get-elf-storage-policies": {
    "exampleValue": {
      "where": {
        "id": "ElfStoragePolicy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-elf-storage-policies \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ElfStoragePolicy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfStoragePolicyApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_storage_policy_api = ElfStoragePolicyApi(client)\r\n    resp = elf_storage_policy_api.get_elf_storage_policies({\"where\":{\"id\":\"ElfStoragePolicy-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_storage_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_storage_policy_api := client.ElfStoragePolicy\r\n    params := elf_storage_policy.NewGetElfStoragePoliciesParams()\r\n    params.RequestBody = &models.GetElfStoragePoliciesRequestBody{\nWhere: &models.ElfStoragePolicyWhereInput{\nID: pointy.String(\"ElfStoragePolicy-id\"),\n},\n}\r\n    rawResp, err := elf_storage_policy_api.GetElfStoragePolicies(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ElfStoragePolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfStoragePolicyApi elfStoragePolicyApi = new ElfStoragePolicyApi(client);\r\n        GetElfStoragePoliciesRequestBody params = new GetElfStoragePoliciesRequestBody()\n.where(new ElfStoragePolicyWhereInput()\n.id(\"ElfStoragePolicy-id\"));\r\n        List<ElfStoragePolicy> resp = elfStoragePolicyApi.getElfStoragePolicies(params);\r\n    }\r\n}"
  },
  "/get-elf-storage-policies-connection": {
    "exampleValue": {
      "where": {
        "id": "ElfStoragePolicy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-elf-storage-policies-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ElfStoragePolicy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ElfStoragePolicyApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    elf_storage_policy_api = ElfStoragePolicyApi(client)\r\n    resp = elf_storage_policy_api.get_elf_storage_policies_connection({\"where\":{\"id\":\"ElfStoragePolicy-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/elf_storage_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        elf_storage_policy_api := client.ElfStoragePolicy\r\n    params := elf_storage_policy.NewGetElfStoragePoliciesConnectionParams()\r\n    params.RequestBody = &models.GetElfStoragePoliciesConnectionRequestBody{\nWhere: &models.ElfStoragePolicyWhereInput{\nID: pointy.String(\"ElfStoragePolicy-id\"),\n},\n}\r\n    rawResp, err := elf_storage_policy_api.GetElfStoragePoliciesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ElfStoragePolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ElfStoragePolicyApi elfStoragePolicyApi = new ElfStoragePolicyApi(client);\r\n        GetElfStoragePoliciesConnectionRequestBody params = new GetElfStoragePoliciesConnectionRequestBody()\n.where(new ElfStoragePolicyWhereInput()\n.id(\"ElfStoragePolicy-id\"));\r\n        ElfStoragePolicyConnection resp = elfStoragePolicyApi.getElfStoragePoliciesConnection(params);\r\n    }\r\n}"
  },
  "/get-entity-filters": {
    "exampleValue": {
      "where": {
        "id": "EntityFilter-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-entity-filters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EntityFilter-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EntityFilterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    entity_filter_api = EntityFilterApi(client)\r\n    resp = entity_filter_api.get_entity_filters({\"where\":{\"id\":\"EntityFilter-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/entity_filter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        entity_filter_api := client.EntityFilter\r\n    params := entity_filter.NewGetEntityFiltersParams()\r\n    params.RequestBody = &models.GetEntityFiltersRequestBody{\nWhere: &models.EntityFilterWhereInput{\nID: pointy.String(\"EntityFilter-id\"),\n},\n}\r\n    rawResp, err := entity_filter_api.GetEntityFilters(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.EntityFilterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EntityFilterApi entityFilterApi = new EntityFilterApi(client);\r\n        GetEntityFiltersRequestBody params = new GetEntityFiltersRequestBody()\n.where(new EntityFilterWhereInput()\n.id(\"EntityFilter-id\"));\r\n        List<EntityFilter> resp = entityFilterApi.getEntityFilters(params);\r\n    }\r\n}"
  },
  "/get-entity-filters-connection": {
    "exampleValue": {
      "where": {
        "id": "EntityFilter-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-entity-filters-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EntityFilter-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EntityFilterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    entity_filter_api = EntityFilterApi(client)\r\n    resp = entity_filter_api.get_entity_filters_connection({\"where\":{\"id\":\"EntityFilter-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/entity_filter\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        entity_filter_api := client.EntityFilter\r\n    params := entity_filter.NewGetEntityFiltersConnectionParams()\r\n    params.RequestBody = &models.GetEntityFiltersConnectionRequestBody{\nWhere: &models.EntityFilterWhereInput{\nID: pointy.String(\"EntityFilter-id\"),\n},\n}\r\n    rawResp, err := entity_filter_api.GetEntityFiltersConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.EntityFilterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EntityFilterApi entityFilterApi = new EntityFilterApi(client);\r\n        GetEntityFiltersConnectionRequestBody params = new GetEntityFiltersConnectionRequestBody()\n.where(new EntityFilterWhereInput()\n.id(\"EntityFilter-id\"));\r\n        EntityFilterConnection resp = entityFilterApi.getEntityFiltersConnection(params);\r\n    }\r\n}"
  },
  "/get-everoute-clusters": {
    "exampleValue": {
      "where": {
        "id": "EverouteCluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-everoute-clusters \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EverouteCluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EverouteClusterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    everoute_cluster_api = EverouteClusterApi(client)\r\n    resp = everoute_cluster_api.get_everoute_clusters({\"where\":{\"id\":\"EverouteCluster-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/everoute_cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        everoute_cluster_api := client.EverouteCluster\r\n    params := everoute_cluster.NewGetEverouteClustersParams()\r\n    params.RequestBody = &models.GetEverouteClustersRequestBody{\nWhere: &models.EverouteClusterWhereInput{\nID: pointy.String(\"EverouteCluster-id\"),\n},\n}\r\n    rawResp, err := everoute_cluster_api.GetEverouteClusters(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.EverouteClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EverouteClusterApi everouteClusterApi = new EverouteClusterApi(client);\r\n        GetEverouteClustersRequestBody params = new GetEverouteClustersRequestBody()\n.where(new EverouteClusterWhereInput()\n.id(\"EverouteCluster-id\"));\r\n        List<EverouteCluster> resp = everouteClusterApi.getEverouteClusters(params);\r\n    }\r\n}"
  },
  "/get-everoute-clusters-connection": {
    "exampleValue": {
      "where": {
        "id": "EverouteCluster-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-everoute-clusters-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EverouteCluster-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EverouteClusterApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    everoute_cluster_api = EverouteClusterApi(client)\r\n    resp = everoute_cluster_api.get_everoute_clusters_connection({\"where\":{\"id\":\"EverouteCluster-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/everoute_cluster\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        everoute_cluster_api := client.EverouteCluster\r\n    params := everoute_cluster.NewGetEverouteClustersConnectionParams()\r\n    params.RequestBody = &models.GetEverouteClustersConnectionRequestBody{\nWhere: &models.EverouteClusterWhereInput{\nID: pointy.String(\"EverouteCluster-id\"),\n},\n}\r\n    rawResp, err := everoute_cluster_api.GetEverouteClustersConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.EverouteClusterApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EverouteClusterApi everouteClusterApi = new EverouteClusterApi(client);\r\n        GetEverouteClustersConnectionRequestBody params = new GetEverouteClustersConnectionRequestBody()\n.where(new EverouteClusterWhereInput()\n.id(\"EverouteCluster-id\"));\r\n        EverouteClusterConnection resp = everouteClusterApi.getEverouteClustersConnection(params);\r\n    }\r\n}"
  },
  "/get-everoute-licenses": {
    "exampleValue": {
      "where": {
        "id": "EverouteLicense-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-everoute-licenses \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EverouteLicense-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EverouteLicenseApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    everoute_license_api = EverouteLicenseApi(client)\r\n    resp = everoute_license_api.get_everoute_licenses({\"where\":{\"id\":\"EverouteLicense-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/everoute_license\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        everoute_license_api := client.EverouteLicense\r\n    params := everoute_license.NewGetEverouteLicensesParams()\r\n    params.RequestBody = &models.GetEverouteLicensesRequestBody{\nWhere: &models.EverouteLicenseWhereInput{\nID: pointy.String(\"EverouteLicense-id\"),\n},\n}\r\n    rawResp, err := everoute_license_api.GetEverouteLicenses(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.EverouteLicenseApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EverouteLicenseApi everouteLicenseApi = new EverouteLicenseApi(client);\r\n        GetEverouteLicensesRequestBody params = new GetEverouteLicensesRequestBody()\n.where(new EverouteLicenseWhereInput()\n.id(\"EverouteLicense-id\"));\r\n        List<EverouteLicense> resp = everouteLicenseApi.getEverouteLicenses(params);\r\n    }\r\n}"
  },
  "/get-everoute-licenses-connection": {
    "exampleValue": {
      "where": {
        "id": "EverouteLicense-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-everoute-licenses-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EverouteLicense-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EverouteLicenseApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    everoute_license_api = EverouteLicenseApi(client)\r\n    resp = everoute_license_api.get_everoute_licenses_connection({\"where\":{\"id\":\"EverouteLicense-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/everoute_license\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        everoute_license_api := client.EverouteLicense\r\n    params := everoute_license.NewGetEverouteLicensesConnectionParams()\r\n    params.RequestBody = &models.GetEverouteLicensesConnectionRequestBody{\nWhere: &models.EverouteLicenseWhereInput{\nID: pointy.String(\"EverouteLicense-id\"),\n},\n}\r\n    rawResp, err := everoute_license_api.GetEverouteLicensesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.EverouteLicenseApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EverouteLicenseApi everouteLicenseApi = new EverouteLicenseApi(client);\r\n        GetEverouteLicensesConnectionRequestBody params = new GetEverouteLicensesConnectionRequestBody()\n.where(new EverouteLicenseWhereInput()\n.id(\"EverouteLicense-id\"));\r\n        EverouteLicenseConnection resp = everouteLicenseApi.getEverouteLicensesConnection(params);\r\n    }\r\n}"
  },
  "/get-everoute-packages": {
    "exampleValue": {
      "where": {
        "id": "EveroutePackage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-everoute-packages \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EveroutePackage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EveroutePackageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    everoute_package_api = EveroutePackageApi(client)\r\n    resp = everoute_package_api.get_everoute_packages({\"where\":{\"id\":\"EveroutePackage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/everoute_package\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        everoute_package_api := client.EveroutePackage\r\n    params := everoute_package.NewGetEveroutePackagesParams()\r\n    params.RequestBody = &models.GetEveroutePackagesRequestBody{\nWhere: &models.EveroutePackageWhereInput{\nID: pointy.String(\"EveroutePackage-id\"),\n},\n}\r\n    rawResp, err := everoute_package_api.GetEveroutePackages(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.EveroutePackageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EveroutePackageApi everoutePackageApi = new EveroutePackageApi(client);\r\n        GetEveroutePackagesRequestBody params = new GetEveroutePackagesRequestBody()\n.where(new EveroutePackageWhereInput()\n.id(\"EveroutePackage-id\"));\r\n        List<EveroutePackage> resp = everoutePackageApi.getEveroutePackages(params);\r\n    }\r\n}"
  },
  "/get-everoute-packages-connection": {
    "exampleValue": {
      "where": {
        "id": "EveroutePackage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-everoute-packages-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"EveroutePackage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, EveroutePackageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    everoute_package_api = EveroutePackageApi(client)\r\n    resp = everoute_package_api.get_everoute_packages_connection({\"where\":{\"id\":\"EveroutePackage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/everoute_package\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        everoute_package_api := client.EveroutePackage\r\n    params := everoute_package.NewGetEveroutePackagesConnectionParams()\r\n    params.RequestBody = &models.GetEveroutePackagesConnectionRequestBody{\nWhere: &models.EveroutePackageWhereInput{\nID: pointy.String(\"EveroutePackage-id\"),\n},\n}\r\n    rawResp, err := everoute_package_api.GetEveroutePackagesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.EveroutePackageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        EveroutePackageApi everoutePackageApi = new EveroutePackageApi(client);\r\n        GetEveroutePackagesConnectionRequestBody params = new GetEveroutePackagesConnectionRequestBody()\n.where(new EveroutePackageWhereInput()\n.id(\"EveroutePackage-id\"));\r\n        EveroutePackageConnection resp = everoutePackageApi.getEveroutePackagesConnection(params);\r\n    }\r\n}"
  },
  "/get-global-alert-rules": {
    "exampleValue": {
      "where": {
        "id": "GlobalAlertRule-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-global-alert-rules \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"GlobalAlertRule-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalAlertRuleApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_alert_rule_api = GlobalAlertRuleApi(client)\r\n    resp = global_alert_rule_api.get_global_alert_rules({\"where\":{\"id\":\"GlobalAlertRule-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_alert_rule\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_alert_rule_api := client.GlobalAlertRule\r\n    params := global_alert_rule.NewGetGlobalAlertRulesParams()\r\n    params.RequestBody = &models.GetGlobalAlertRulesRequestBody{\nWhere: &models.GlobalAlertRuleWhereInput{\nID: pointy.String(\"GlobalAlertRule-id\"),\n},\n}\r\n    rawResp, err := global_alert_rule_api.GetGlobalAlertRules(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GlobalAlertRuleApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalAlertRuleApi globalAlertRuleApi = new GlobalAlertRuleApi(client);\r\n        GetGlobalAlertRulesRequestBody params = new GetGlobalAlertRulesRequestBody()\n.where(new GlobalAlertRuleWhereInput()\n.id(\"GlobalAlertRule-id\"));\r\n        List<GlobalAlertRule> resp = globalAlertRuleApi.getGlobalAlertRules(params);\r\n    }\r\n}"
  },
  "/get-global-alert-rules-connection": {
    "exampleValue": {
      "where": {
        "id": "GlobalAlertRule-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-global-alert-rules-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"GlobalAlertRule-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalAlertRuleApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_alert_rule_api = GlobalAlertRuleApi(client)\r\n    resp = global_alert_rule_api.get_global_alert_rules_connection({\"where\":{\"id\":\"GlobalAlertRule-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_alert_rule\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_alert_rule_api := client.GlobalAlertRule\r\n    params := global_alert_rule.NewGetGlobalAlertRulesConnectionParams()\r\n    params.RequestBody = &models.GetGlobalAlertRulesConnectionRequestBody{\nWhere: &models.GlobalAlertRuleWhereInput{\nID: pointy.String(\"GlobalAlertRule-id\"),\n},\n}\r\n    rawResp, err := global_alert_rule_api.GetGlobalAlertRulesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GlobalAlertRuleApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalAlertRuleApi globalAlertRuleApi = new GlobalAlertRuleApi(client);\r\n        GetGlobalAlertRulesConnectionRequestBody params = new GetGlobalAlertRulesConnectionRequestBody()\n.where(new GlobalAlertRuleWhereInput()\n.id(\"GlobalAlertRule-id\"));\r\n        GlobalAlertRuleConnection resp = globalAlertRuleApi.getGlobalAlertRulesConnection(params);\r\n    }\r\n}"
  },
  "/get-global-settingses": {
    "exampleValue": {
      "where": {
        "id": "GlobalSettings-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-global-settingses \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"GlobalSettings-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.get_global_settingses({\"where\":{\"id\":\"GlobalSettings-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewGetGlobalSettingsesParams()\r\n    params.RequestBody = &models.GetGlobalSettingsesRequestBody{\nWhere: &models.GlobalSettingsWhereInput{\nID: pointy.String(\"GlobalSettings-id\"),\n},\n}\r\n    rawResp, err := global_settings_api.GetGlobalSettingses(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        GetGlobalSettingsesRequestBody params = new GetGlobalSettingsesRequestBody()\n.where(new GlobalSettingsWhereInput()\n.id(\"GlobalSettings-id\"));\r\n        List<GlobalSettings> resp = globalSettingsApi.getGlobalSettingses(params);\r\n    }\r\n}"
  },
  "/get-global-settingses-connection": {
    "exampleValue": {
      "where": {
        "id": "GlobalSettings-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-global-settingses-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"GlobalSettings-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GlobalSettingsApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    global_settings_api = GlobalSettingsApi(client)\r\n    resp = global_settings_api.get_global_settingses_connection({\"where\":{\"id\":\"GlobalSettings-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/global_settings\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        global_settings_api := client.GlobalSettings\r\n    params := global_settings.NewGetGlobalSettingsesConnectionParams()\r\n    params.RequestBody = &models.GetGlobalSettingsesConnectionRequestBody{\nWhere: &models.GlobalSettingsWhereInput{\nID: pointy.String(\"GlobalSettings-id\"),\n},\n}\r\n    rawResp, err := global_settings_api.GetGlobalSettingsesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GlobalSettingsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GlobalSettingsApi globalSettingsApi = new GlobalSettingsApi(client);\r\n        GetGlobalSettingsesConnectionRequestBody params = new GetGlobalSettingsesConnectionRequestBody()\n.where(new GlobalSettingsWhereInput()\n.id(\"GlobalSettings-id\"));\r\n        GlobalSettingsConnection resp = globalSettingsApi.getGlobalSettingsesConnection(params);\r\n    }\r\n}"
  },
  "/get-gpu-devices": {
    "exampleValue": {
      "where": {
        "id": "GpuDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-gpu-devices \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"GpuDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GpuDeviceApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    gpu_device_api = GpuDeviceApi(client)\r\n    resp = gpu_device_api.get_gpu_devices({\"where\":{\"id\":\"GpuDevice-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/gpu_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        gpu_device_api := client.GpuDevice\r\n    params := gpu_device.NewGetGpuDevicesParams()\r\n    params.RequestBody = &models.GetGpuDevicesRequestBody{\nWhere: &models.GpuDeviceWhereInput{\nID: pointy.String(\"GpuDevice-id\"),\n},\n}\r\n    rawResp, err := gpu_device_api.GetGpuDevices(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GpuDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GpuDeviceApi gpuDeviceApi = new GpuDeviceApi(client);\r\n        GetGpuDevicesRequestBody params = new GetGpuDevicesRequestBody()\n.where(new GpuDeviceWhereInput()\n.id(\"GpuDevice-id\"));\r\n        List<GpuDevice> resp = gpuDeviceApi.getGpuDevices(params);\r\n    }\r\n}"
  },
  "/get-gpu-devices-connection": {
    "exampleValue": {
      "where": {
        "id": "GpuDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-gpu-devices-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"GpuDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GpuDeviceApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    gpu_device_api = GpuDeviceApi(client)\r\n    resp = gpu_device_api.get_gpu_devices_connection({\"where\":{\"id\":\"GpuDevice-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/gpu_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        gpu_device_api := client.GpuDevice\r\n    params := gpu_device.NewGetGpuDevicesConnectionParams()\r\n    params.RequestBody = &models.GetGpuDevicesConnectionRequestBody{\nWhere: &models.GpuDeviceWhereInput{\nID: pointy.String(\"GpuDevice-id\"),\n},\n}\r\n    rawResp, err := gpu_device_api.GetGpuDevicesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GpuDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GpuDeviceApi gpuDeviceApi = new GpuDeviceApi(client);\r\n        GetGpuDevicesConnectionRequestBody params = new GetGpuDevicesConnectionRequestBody()\n.where(new GpuDeviceWhereInput()\n.id(\"GpuDevice-id\"));\r\n        GpuDeviceConnection resp = gpuDeviceApi.getGpuDevicesConnection(params);\r\n    }\r\n}"
  },
  "/get-graphs": {
    "exampleValue": {
      "where": {
        "id": "Graph-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-graphs \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Graph-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GraphApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    graph_api = GraphApi(client)\r\n    resp = graph_api.get_graphs({\"where\":{\"id\":\"Graph-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/graph\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        graph_api := client.Graph\r\n    params := graph.NewGetGraphsParams()\r\n    params.RequestBody = &models.GetGraphsRequestBody{\nWhere: &models.GraphWhereInput{\nID: pointy.String(\"Graph-id\"),\n},\n}\r\n    rawResp, err := graph_api.GetGraphs(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GraphApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GraphApi graphApi = new GraphApi(client);\r\n        GetGraphsRequestBody params = new GetGraphsRequestBody()\n.where(new GraphWhereInput()\n.id(\"Graph-id\"));\r\n        List<Graph> resp = graphApi.getGraphs(params);\r\n    }\r\n}"
  },
  "/get-graphs-connection": {
    "exampleValue": {
      "where": {
        "id": "Graph-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-graphs-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Graph-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, GraphApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    graph_api = GraphApi(client)\r\n    resp = graph_api.get_graphs_connection({\"where\":{\"id\":\"Graph-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/graph\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        graph_api := client.Graph\r\n    params := graph.NewGetGraphsConnectionParams()\r\n    params.RequestBody = &models.GetGraphsConnectionRequestBody{\nWhere: &models.GraphWhereInput{\nID: pointy.String(\"Graph-id\"),\n},\n}\r\n    rawResp, err := graph_api.GetGraphsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.GraphApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        GraphApi graphApi = new GraphApi(client);\r\n        GetGraphsConnectionRequestBody params = new GetGraphsConnectionRequestBody()\n.where(new GraphWhereInput()\n.id(\"Graph-id\"));\r\n        GraphConnection resp = graphApi.getGraphsConnection(params);\r\n    }\r\n}"
  },
  "/get-hosts": {
    "exampleValue": {
      "where": {
        "id": "Host-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-hosts \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Host-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.get_hosts({\"where\":{\"id\":\"Host-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewGetHostsParams()\r\n    params.RequestBody = &models.GetHostsRequestBody{\nWhere: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\n}\r\n    rawResp, err := host_api.GetHosts(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        GetHostsRequestBody params = new GetHostsRequestBody()\n.where(new HostWhereInput()\n.id(\"Host-id\"));\r\n        List<Host> resp = hostApi.getHosts(params);\r\n    }\r\n}"
  },
  "/get-hosts-connection": {
    "exampleValue": {
      "where": {
        "id": "Host-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-hosts-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Host-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, HostApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    host_api = HostApi(client)\r\n    resp = host_api.get_hosts_connection({\"where\":{\"id\":\"Host-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/host\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        host_api := client.Host\r\n    params := host.NewGetHostsConnectionParams()\r\n    params.RequestBody = &models.GetHostsConnectionRequestBody{\nWhere: &models.HostWhereInput{\nID: pointy.String(\"Host-id\"),\n},\n}\r\n    rawResp, err := host_api.GetHostsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.HostApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        HostApi hostApi = new HostApi(client);\r\n        GetHostsConnectionRequestBody params = new GetHostsConnectionRequestBody()\n.where(new HostWhereInput()\n.id(\"Host-id\"));\r\n        HostConnection resp = hostApi.getHostsConnection(params);\r\n    }\r\n}"
  },
  "/get-ipmis": {
    "exampleValue": {
      "where": {
        "id": "Ipmi-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-ipmis \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Ipmi-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IpmiApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    ipmi_api = IpmiApi(client)\r\n    resp = ipmi_api.get_ipmis({\"where\":{\"id\":\"Ipmi-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/ipmi\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        ipmi_api := client.Ipmi\r\n    params := ipmi.NewGetIpmisParams()\r\n    params.RequestBody = &models.GetIpmisRequestBody{\nWhere: &models.IpmiWhereInput{\nID: pointy.String(\"Ipmi-id\"),\n},\n}\r\n    rawResp, err := ipmi_api.GetIpmis(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IpmiApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IpmiApi ipmiApi = new IpmiApi(client);\r\n        GetIpmisRequestBody params = new GetIpmisRequestBody()\n.where(new IpmiWhereInput()\n.id(\"Ipmi-id\"));\r\n        List<Ipmi> resp = ipmiApi.getIpmis(params);\r\n    }\r\n}"
  },
  "/get-iscsi-connections": {
    "exampleValue": {
      "where": {
        "id": "IscsiConnection-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-iscsi-connections \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiConnection-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiConnectionApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_connection_api = IscsiConnectionApi(client)\r\n    resp = iscsi_connection_api.get_iscsi_connections({\"where\":{\"id\":\"IscsiConnection-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_connection\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_connection_api := client.IscsiConnection\r\n    params := iscsi_connection.NewGetIscsiConnectionsParams()\r\n    params.RequestBody = &models.GetIscsiConnectionsRequestBody{\nWhere: &models.IscsiConnectionWhereInput{\nID: pointy.String(\"IscsiConnection-id\"),\n},\n}\r\n    rawResp, err := iscsi_connection_api.GetIscsiConnections(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IscsiConnectionApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiConnectionApi iscsiConnectionApi = new IscsiConnectionApi(client);\r\n        GetIscsiConnectionsRequestBody params = new GetIscsiConnectionsRequestBody()\n.where(new IscsiConnectionWhereInput()\n.id(\"IscsiConnection-id\"));\r\n        List<IscsiConnection> resp = iscsiConnectionApi.getIscsiConnections(params);\r\n    }\r\n}"
  },
  "/get-iscsi-connections-connection": {
    "exampleValue": {
      "where": {
        "id": "IscsiConnection-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-iscsi-connections-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiConnection-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiConnectionApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_connection_api = IscsiConnectionApi(client)\r\n    resp = iscsi_connection_api.get_iscsi_connections_connection({\"where\":{\"id\":\"IscsiConnection-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_connection\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_connection_api := client.IscsiConnection\r\n    params := iscsi_connection.NewGetIscsiConnectionsConnectionParams()\r\n    params.RequestBody = &models.GetIscsiConnectionsConnectionRequestBody{\nWhere: &models.IscsiConnectionWhereInput{\nID: pointy.String(\"IscsiConnection-id\"),\n},\n}\r\n    rawResp, err := iscsi_connection_api.GetIscsiConnectionsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IscsiConnectionApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiConnectionApi iscsiConnectionApi = new IscsiConnectionApi(client);\r\n        GetIscsiConnectionsConnectionRequestBody params = new GetIscsiConnectionsConnectionRequestBody()\n.where(new IscsiConnectionWhereInput()\n.id(\"IscsiConnection-id\"));\r\n        IscsiConnectionConnection resp = iscsiConnectionApi.getIscsiConnectionsConnection(params);\r\n    }\r\n}"
  },
  "/get-iscsi-lun-snapshots": {
    "exampleValue": {
      "where": {
        "id": "IscsiLunSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-iscsi-lun-snapshots \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiLunSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_snapshot_api = IscsiLunSnapshotApi(client)\r\n    resp = iscsi_lun_snapshot_api.get_iscsi_lun_snapshots({\"where\":{\"id\":\"IscsiLunSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_snapshot_api := client.IscsiLunSnapshot\r\n    params := iscsi_lun_snapshot.NewGetIscsiLunSnapshotsParams()\r\n    params.RequestBody = &models.GetIscsiLunSnapshotsRequestBody{\nWhere: &models.IscsiLunSnapshotWhereInput{\nID: pointy.String(\"IscsiLunSnapshot-id\"),\n},\n}\r\n    rawResp, err := iscsi_lun_snapshot_api.GetIscsiLunSnapshots(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IscsiLunSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunSnapshotApi iscsiLunSnapshotApi = new IscsiLunSnapshotApi(client);\r\n        GetIscsiLunSnapshotsRequestBody params = new GetIscsiLunSnapshotsRequestBody()\n.where(new IscsiLunSnapshotWhereInput()\n.id(\"IscsiLunSnapshot-id\"));\r\n        List<IscsiLunSnapshot> resp = iscsiLunSnapshotApi.getIscsiLunSnapshots(params);\r\n    }\r\n}"
  },
  "/get-iscsi-lun-snapshots-connection": {
    "exampleValue": {
      "where": {
        "id": "IscsiLunSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-iscsi-lun-snapshots-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiLunSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_snapshot_api = IscsiLunSnapshotApi(client)\r\n    resp = iscsi_lun_snapshot_api.get_iscsi_lun_snapshots_connection({\"where\":{\"id\":\"IscsiLunSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_snapshot_api := client.IscsiLunSnapshot\r\n    params := iscsi_lun_snapshot.NewGetIscsiLunSnapshotsConnectionParams()\r\n    params.RequestBody = &models.GetIscsiLunSnapshotsConnectionRequestBody{\nWhere: &models.IscsiLunSnapshotWhereInput{\nID: pointy.String(\"IscsiLunSnapshot-id\"),\n},\n}\r\n    rawResp, err := iscsi_lun_snapshot_api.GetIscsiLunSnapshotsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IscsiLunSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunSnapshotApi iscsiLunSnapshotApi = new IscsiLunSnapshotApi(client);\r\n        GetIscsiLunSnapshotsConnectionRequestBody params = new GetIscsiLunSnapshotsConnectionRequestBody()\n.where(new IscsiLunSnapshotWhereInput()\n.id(\"IscsiLunSnapshot-id\"));\r\n        IscsiLunSnapshotConnection resp = iscsiLunSnapshotApi.getIscsiLunSnapshotsConnection(params);\r\n    }\r\n}"
  },
  "/get-iscsi-luns": {
    "exampleValue": {
      "where": {
        "id": "IscsiLun-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-iscsi-luns \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiLun-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_api = IscsiLunApi(client)\r\n    resp = iscsi_lun_api.get_iscsi_luns({\"where\":{\"id\":\"IscsiLun-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_api := client.IscsiLun\r\n    params := iscsi_lun.NewGetIscsiLunsParams()\r\n    params.RequestBody = &models.GetIscsiLunsRequestBody{\nWhere: &models.IscsiLunWhereInput{\nID: pointy.String(\"IscsiLun-id\"),\n},\n}\r\n    rawResp, err := iscsi_lun_api.GetIscsiLuns(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IscsiLunApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunApi iscsiLunApi = new IscsiLunApi(client);\r\n        GetIscsiLunsRequestBody params = new GetIscsiLunsRequestBody()\n.where(new IscsiLunWhereInput()\n.id(\"IscsiLun-id\"));\r\n        List<IscsiLun> resp = iscsiLunApi.getIscsiLuns(params);\r\n    }\r\n}"
  },
  "/get-iscsi-luns-connection": {
    "exampleValue": {
      "where": {
        "id": "IscsiLun-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-iscsi-luns-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiLun-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiLunApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_lun_api = IscsiLunApi(client)\r\n    resp = iscsi_lun_api.get_iscsi_luns_connection({\"where\":{\"id\":\"IscsiLun-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_lun\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_lun_api := client.IscsiLun\r\n    params := iscsi_lun.NewGetIscsiLunsConnectionParams()\r\n    params.RequestBody = &models.GetIscsiLunsConnectionRequestBody{\nWhere: &models.IscsiLunWhereInput{\nID: pointy.String(\"IscsiLun-id\"),\n},\n}\r\n    rawResp, err := iscsi_lun_api.GetIscsiLunsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IscsiLunApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiLunApi iscsiLunApi = new IscsiLunApi(client);\r\n        GetIscsiLunsConnectionRequestBody params = new GetIscsiLunsConnectionRequestBody()\n.where(new IscsiLunWhereInput()\n.id(\"IscsiLun-id\"));\r\n        IscsiLunConnection resp = iscsiLunApi.getIscsiLunsConnection(params);\r\n    }\r\n}"
  },
  "/get-iscsi-targets": {
    "exampleValue": {
      "where": {
        "id": "IscsiTarget-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-iscsi-targets \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiTarget-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiTargetApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_target_api = IscsiTargetApi(client)\r\n    resp = iscsi_target_api.get_iscsi_targets({\"where\":{\"id\":\"IscsiTarget-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_target\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_target_api := client.IscsiTarget\r\n    params := iscsi_target.NewGetIscsiTargetsParams()\r\n    params.RequestBody = &models.GetIscsiTargetsRequestBody{\nWhere: &models.IscsiTargetWhereInput{\nID: pointy.String(\"IscsiTarget-id\"),\n},\n}\r\n    rawResp, err := iscsi_target_api.GetIscsiTargets(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IscsiTargetApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiTargetApi iscsiTargetApi = new IscsiTargetApi(client);\r\n        GetIscsiTargetsRequestBody params = new GetIscsiTargetsRequestBody()\n.where(new IscsiTargetWhereInput()\n.id(\"IscsiTarget-id\"));\r\n        List<IscsiTarget> resp = iscsiTargetApi.getIscsiTargets(params);\r\n    }\r\n}"
  },
  "/get-iscsi-targets-connection": {
    "exampleValue": {
      "where": {
        "id": "IscsiTarget-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-iscsi-targets-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IscsiTarget-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IscsiTargetApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    iscsi_target_api = IscsiTargetApi(client)\r\n    resp = iscsi_target_api.get_iscsi_targets_connection({\"where\":{\"id\":\"IscsiTarget-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/iscsi_target\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        iscsi_target_api := client.IscsiTarget\r\n    params := iscsi_target.NewGetIscsiTargetsConnectionParams()\r\n    params.RequestBody = &models.GetIscsiTargetsConnectionRequestBody{\nWhere: &models.IscsiTargetWhereInput{\nID: pointy.String(\"IscsiTarget-id\"),\n},\n}\r\n    rawResp, err := iscsi_target_api.GetIscsiTargetsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IscsiTargetApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IscsiTargetApi iscsiTargetApi = new IscsiTargetApi(client);\r\n        GetIscsiTargetsConnectionRequestBody params = new GetIscsiTargetsConnectionRequestBody()\n.where(new IscsiTargetWhereInput()\n.id(\"IscsiTarget-id\"));\r\n        IscsiTargetConnection resp = iscsiTargetApi.getIscsiTargetsConnection(params);\r\n    }\r\n}"
  },
  "/get-isolation-policies": {
    "exampleValue": {
      "where": {
        "id": "IsolationPolicy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-isolation-policies \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IsolationPolicy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IsolationPolicyApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    isolation_policy_api = IsolationPolicyApi(client)\r\n    resp = isolation_policy_api.get_isolation_policies({\"where\":{\"id\":\"IsolationPolicy-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/isolation_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        isolation_policy_api := client.IsolationPolicy\r\n    params := isolation_policy.NewGetIsolationPoliciesParams()\r\n    params.RequestBody = &models.GetIsolationPoliciesRequestBody{\nWhere: &models.IsolationPolicyWhereInput{\nID: pointy.String(\"IsolationPolicy-id\"),\n},\n}\r\n    rawResp, err := isolation_policy_api.GetIsolationPolicies(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IsolationPolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IsolationPolicyApi isolationPolicyApi = new IsolationPolicyApi(client);\r\n        GetIsolationPoliciesRequestBody params = new GetIsolationPoliciesRequestBody()\n.where(new IsolationPolicyWhereInput()\n.id(\"IsolationPolicy-id\"));\r\n        List<IsolationPolicy> resp = isolationPolicyApi.getIsolationPolicies(params);\r\n    }\r\n}"
  },
  "/get-isolation-policies-connection": {
    "exampleValue": {
      "where": {
        "id": "IsolationPolicy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-isolation-policies-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"IsolationPolicy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, IsolationPolicyApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    isolation_policy_api = IsolationPolicyApi(client)\r\n    resp = isolation_policy_api.get_isolation_policies_connection({\"where\":{\"id\":\"IsolationPolicy-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/isolation_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        isolation_policy_api := client.IsolationPolicy\r\n    params := isolation_policy.NewGetIsolationPoliciesConnectionParams()\r\n    params.RequestBody = &models.GetIsolationPoliciesConnectionRequestBody{\nWhere: &models.IsolationPolicyWhereInput{\nID: pointy.String(\"IsolationPolicy-id\"),\n},\n}\r\n    rawResp, err := isolation_policy_api.GetIsolationPoliciesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.IsolationPolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        IsolationPolicyApi isolationPolicyApi = new IsolationPolicyApi(client);\r\n        GetIsolationPoliciesConnectionRequestBody params = new GetIsolationPoliciesConnectionRequestBody()\n.where(new IsolationPolicyWhereInput()\n.id(\"IsolationPolicy-id\"));\r\n        IsolationPolicyConnection resp = isolationPolicyApi.getIsolationPoliciesConnection(params);\r\n    }\r\n}"
  },
  "/get-labels": {
    "exampleValue": {
      "where": {
        "id": "Label-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-labels \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Label-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LabelApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    label_api = LabelApi(client)\r\n    resp = label_api.get_labels({\"where\":{\"id\":\"Label-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/label\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        label_api := client.Label\r\n    params := label.NewGetLabelsParams()\r\n    params.RequestBody = &models.GetLabelsRequestBody{\nWhere: &models.LabelWhereInput{\nID: pointy.String(\"Label-id\"),\n},\n}\r\n    rawResp, err := label_api.GetLabels(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.LabelApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LabelApi labelApi = new LabelApi(client);\r\n        GetLabelsRequestBody params = new GetLabelsRequestBody()\n.where(new LabelWhereInput()\n.id(\"Label-id\"));\r\n        List<Label> resp = labelApi.getLabels(params);\r\n    }\r\n}"
  },
  "/get-labels-connection": {
    "exampleValue": {
      "where": {
        "id": "Label-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-labels-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Label-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LabelApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    label_api = LabelApi(client)\r\n    resp = label_api.get_labels_connection({\"where\":{\"id\":\"Label-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/label\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        label_api := client.Label\r\n    params := label.NewGetLabelsConnectionParams()\r\n    params.RequestBody = &models.GetLabelsConnectionRequestBody{\nWhere: &models.LabelWhereInput{\nID: pointy.String(\"Label-id\"),\n},\n}\r\n    rawResp, err := label_api.GetLabelsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.LabelApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LabelApi labelApi = new LabelApi(client);\r\n        GetLabelsConnectionRequestBody params = new GetLabelsConnectionRequestBody()\n.where(new LabelWhereInput()\n.id(\"Label-id\"));\r\n        LabelConnection resp = labelApi.getLabelsConnection(params);\r\n    }\r\n}"
  },
  "/get-licenses": {
    "exampleValue": {
      "where": {
        "id": "License-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-licenses \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"License-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LicenseApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    license_api = LicenseApi(client)\r\n    resp = license_api.get_licenses({\"where\":{\"id\":\"License-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/license\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        license_api := client.License\r\n    params := license.NewGetLicensesParams()\r\n    params.RequestBody = &models.GetLicensesRequestBody{\nWhere: &models.LicenseWhereInput{\nID: pointy.String(\"License-id\"),\n},\n}\r\n    rawResp, err := license_api.GetLicenses(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.LicenseApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LicenseApi licenseApi = new LicenseApi(client);\r\n        GetLicensesRequestBody params = new GetLicensesRequestBody()\n.where(new LicenseWhereInput()\n.id(\"License-id\"));\r\n        List<License> resp = licenseApi.getLicenses(params);\r\n    }\r\n}"
  },
  "/get-licenses-connection": {
    "exampleValue": {
      "where": {
        "id": "License-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-licenses-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"License-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LicenseApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    license_api = LicenseApi(client)\r\n    resp = license_api.get_licenses_connection({\"where\":{\"id\":\"License-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/license\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        license_api := client.License\r\n    params := license.NewGetLicensesConnectionParams()\r\n    params.RequestBody = &models.GetLicensesConnectionRequestBody{\nWhere: &models.LicenseWhereInput{\nID: pointy.String(\"License-id\"),\n},\n}\r\n    rawResp, err := license_api.GetLicensesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.LicenseApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LicenseApi licenseApi = new LicenseApi(client);\r\n        GetLicensesConnectionRequestBody params = new GetLicensesConnectionRequestBody()\n.where(new LicenseWhereInput()\n.id(\"License-id\"));\r\n        LicenseConnection resp = licenseApi.getLicensesConnection(params);\r\n    }\r\n}"
  },
  "/get-log-collections": {
    "exampleValue": {
      "where": {
        "id": "LogCollection-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-log-collections \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"LogCollection-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LogCollectionApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    log_collection_api = LogCollectionApi(client)\r\n    resp = log_collection_api.get_log_collections({\"where\":{\"id\":\"LogCollection-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/log_collection\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        log_collection_api := client.LogCollection\r\n    params := log_collection.NewGetLogCollectionsParams()\r\n    params.RequestBody = &models.GetLogCollectionsRequestBody{\nWhere: &models.LogCollectionWhereInput{\nID: pointy.String(\"LogCollection-id\"),\n},\n}\r\n    rawResp, err := log_collection_api.GetLogCollections(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.LogCollectionApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LogCollectionApi logCollectionApi = new LogCollectionApi(client);\r\n        GetLogCollectionsRequestBody params = new GetLogCollectionsRequestBody()\n.where(new LogCollectionWhereInput()\n.id(\"LogCollection-id\"));\r\n        List<LogCollection> resp = logCollectionApi.getLogCollections(params);\r\n    }\r\n}"
  },
  "/get-log-collections-connection": {
    "exampleValue": {
      "where": {
        "id": "LogCollection-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-log-collections-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"LogCollection-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, LogCollectionApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    log_collection_api = LogCollectionApi(client)\r\n    resp = log_collection_api.get_log_collections_connection({\"where\":{\"id\":\"LogCollection-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/log_collection\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        log_collection_api := client.LogCollection\r\n    params := log_collection.NewGetLogCollectionsConnectionParams()\r\n    params.RequestBody = &models.GetLogCollectionsConnectionRequestBody{\nWhere: &models.LogCollectionWhereInput{\nID: pointy.String(\"LogCollection-id\"),\n},\n}\r\n    rawResp, err := log_collection_api.GetLogCollectionsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.LogCollectionApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LogCollectionApi logCollectionApi = new LogCollectionApi(client);\r\n        GetLogCollectionsConnectionRequestBody params = new GetLogCollectionsConnectionRequestBody()\n.where(new LogCollectionWhereInput()\n.id(\"LogCollection-id\"));\r\n        LogCollectionConnection resp = logCollectionApi.getLogCollectionsConnection(params);\r\n    }\r\n}"
  },
  "/get-log-service-configs": {
    "exampleValue": {
      "input": {
        "cluster": {
          "id": "Cluster-id"
        }
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-log-service-configs \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"input\":{\"cluster\":{\"id\":\"Cluster-id\"}}}'",
    "python": "from cloudtower import ApiClient, Configuration, LogServiceConfigApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    log_service_config_api = LogServiceConfigApi(client)\r\n    resp = log_service_config_api.get_log_service_configs({\"input\":{\"cluster\":{\"id\":\"Cluster-id\"}}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/log_service_config\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        log_service_config_api := client.LogServiceConfig\r\n    params := log_service_config.NewGetLogServiceConfigsParams()\r\n    params.RequestBody = &models.GetLogServiceConfigsRequestBody{\nInput: &models.LogServiceConfigsInput{\nCluster: &models.ClusterWhereUniqueInput{\nID: pointy.String(\"Cluster-id\"),\n},\n},\n}\r\n    rawResp, err := log_service_config_api.GetLogServiceConfigs(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.LogServiceConfigApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        LogServiceConfigApi logServiceConfigApi = new LogServiceConfigApi(client);\r\n        GetLogServiceConfigsRequestBody params = new GetLogServiceConfigsRequestBody()\n.input(new LogServiceConfigsInput()\n.cluster(new ClusterWhereUniqueInput()\n.id(\"Cluster-id\")));\r\n        List<LogServiceConfig> resp = logServiceConfigApi.getLogServiceConfigs(params);\r\n    }\r\n}"
  },
  "/get-namespace-groups": {
    "exampleValue": {
      "where": {
        "id": "NamespaceGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-namespace-groups \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NamespaceGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NamespaceGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    namespace_group_api = NamespaceGroupApi(client)\r\n    resp = namespace_group_api.get_namespace_groups({\"where\":{\"id\":\"NamespaceGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/namespace_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        namespace_group_api := client.NamespaceGroup\r\n    params := namespace_group.NewGetNamespaceGroupsParams()\r\n    params.RequestBody = &models.GetNamespaceGroupsRequestBody{\nWhere: &models.NamespaceGroupWhereInput{\nID: pointy.String(\"NamespaceGroup-id\"),\n},\n}\r\n    rawResp, err := namespace_group_api.GetNamespaceGroups(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NamespaceGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NamespaceGroupApi namespaceGroupApi = new NamespaceGroupApi(client);\r\n        GetNamespaceGroupsRequestBody params = new GetNamespaceGroupsRequestBody()\n.where(new NamespaceGroupWhereInput()\n.id(\"NamespaceGroup-id\"));\r\n        List<NamespaceGroup> resp = namespaceGroupApi.getNamespaceGroups(params);\r\n    }\r\n}"
  },
  "/get-namespace-groups-connection": {
    "exampleValue": {
      "where": {
        "id": "NamespaceGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-namespace-groups-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NamespaceGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NamespaceGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    namespace_group_api = NamespaceGroupApi(client)\r\n    resp = namespace_group_api.get_namespace_groups_connection({\"where\":{\"id\":\"NamespaceGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/namespace_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        namespace_group_api := client.NamespaceGroup\r\n    params := namespace_group.NewGetNamespaceGroupsConnectionParams()\r\n    params.RequestBody = &models.GetNamespaceGroupsConnectionRequestBody{\nWhere: &models.NamespaceGroupWhereInput{\nID: pointy.String(\"NamespaceGroup-id\"),\n},\n}\r\n    rawResp, err := namespace_group_api.GetNamespaceGroupsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NamespaceGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NamespaceGroupApi namespaceGroupApi = new NamespaceGroupApi(client);\r\n        GetNamespaceGroupsConnectionRequestBody params = new GetNamespaceGroupsConnectionRequestBody()\n.where(new NamespaceGroupWhereInput()\n.id(\"NamespaceGroup-id\"));\r\n        NamespaceGroupConnection resp = namespaceGroupApi.getNamespaceGroupsConnection(params);\r\n    }\r\n}"
  },
  "/get-nfs-exports": {
    "exampleValue": {
      "where": {
        "id": "NfsExport-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nfs-exports \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NfsExport-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NfsExportApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nfs_export_api = NfsExportApi(client)\r\n    resp = nfs_export_api.get_nfs_exports({\"where\":{\"id\":\"NfsExport-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nfs_export\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nfs_export_api := client.NfsExport\r\n    params := nfs_export.NewGetNfsExportsParams()\r\n    params.RequestBody = &models.GetNfsExportsRequestBody{\nWhere: &models.NfsExportWhereInput{\nID: pointy.String(\"NfsExport-id\"),\n},\n}\r\n    rawResp, err := nfs_export_api.GetNfsExports(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NfsExportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NfsExportApi nfsExportApi = new NfsExportApi(client);\r\n        GetNfsExportsRequestBody params = new GetNfsExportsRequestBody()\n.where(new NfsExportWhereInput()\n.id(\"NfsExport-id\"));\r\n        List<NfsExport> resp = nfsExportApi.getNfsExports(params);\r\n    }\r\n}"
  },
  "/get-nfs-exports-connection": {
    "exampleValue": {
      "where": {
        "id": "NfsExport-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nfs-exports-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NfsExport-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NfsExportApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nfs_export_api = NfsExportApi(client)\r\n    resp = nfs_export_api.get_nfs_exports_connection({\"where\":{\"id\":\"NfsExport-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nfs_export\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nfs_export_api := client.NfsExport\r\n    params := nfs_export.NewGetNfsExportsConnectionParams()\r\n    params.RequestBody = &models.GetNfsExportsConnectionRequestBody{\nWhere: &models.NfsExportWhereInput{\nID: pointy.String(\"NfsExport-id\"),\n},\n}\r\n    rawResp, err := nfs_export_api.GetNfsExportsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NfsExportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NfsExportApi nfsExportApi = new NfsExportApi(client);\r\n        GetNfsExportsConnectionRequestBody params = new GetNfsExportsConnectionRequestBody()\n.where(new NfsExportWhereInput()\n.id(\"NfsExport-id\"));\r\n        NfsExportConnection resp = nfsExportApi.getNfsExportsConnection(params);\r\n    }\r\n}"
  },
  "/get-nfs-inodes": {
    "exampleValue": {
      "where": {
        "id": "NfsInode-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nfs-inodes \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NfsInode-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NfsInodeApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nfs_inode_api = NfsInodeApi(client)\r\n    resp = nfs_inode_api.get_nfs_inodes({\"where\":{\"id\":\"NfsInode-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nfs_inode\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nfs_inode_api := client.NfsInode\r\n    params := nfs_inode.NewGetNfsInodesParams()\r\n    params.RequestBody = &models.GetNfsInodesRequestBody{\nWhere: &models.NfsInodeWhereInput{\nID: pointy.String(\"NfsInode-id\"),\n},\n}\r\n    rawResp, err := nfs_inode_api.GetNfsInodes(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NfsInodeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NfsInodeApi nfsInodeApi = new NfsInodeApi(client);\r\n        GetNfsInodesRequestBody params = new GetNfsInodesRequestBody()\n.where(new NfsInodeWhereInput()\n.id(\"NfsInode-id\"));\r\n        List<NfsInode> resp = nfsInodeApi.getNfsInodes(params);\r\n    }\r\n}"
  },
  "/get-nfs-inodes-connection": {
    "exampleValue": {
      "where": {
        "id": "NfsInode-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nfs-inodes-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NfsInode-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NfsInodeApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nfs_inode_api = NfsInodeApi(client)\r\n    resp = nfs_inode_api.get_nfs_inodes_connection({\"where\":{\"id\":\"NfsInode-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nfs_inode\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nfs_inode_api := client.NfsInode\r\n    params := nfs_inode.NewGetNfsInodesConnectionParams()\r\n    params.RequestBody = &models.GetNfsInodesConnectionRequestBody{\nWhere: &models.NfsInodeWhereInput{\nID: pointy.String(\"NfsInode-id\"),\n},\n}\r\n    rawResp, err := nfs_inode_api.GetNfsInodesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NfsInodeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NfsInodeApi nfsInodeApi = new NfsInodeApi(client);\r\n        GetNfsInodesConnectionRequestBody params = new GetNfsInodesConnectionRequestBody()\n.where(new NfsInodeWhereInput()\n.id(\"NfsInode-id\"));\r\n        NfsInodeConnection resp = nfsInodeApi.getNfsInodesConnection(params);\r\n    }\r\n}"
  },
  "/get-nics": {
    "exampleValue": {
      "where": {
        "id": "Nic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Nic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NicApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nic_api = NicApi(client)\r\n    resp = nic_api.get_nics({\"where\":{\"id\":\"Nic-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nic\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nic_api := client.Nic\r\n    params := nic.NewGetNicsParams()\r\n    params.RequestBody = &models.GetNicsRequestBody{\nWhere: &models.NicWhereInput{\nID: pointy.String(\"Nic-id\"),\n},\n}\r\n    rawResp, err := nic_api.GetNics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NicApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NicApi nicApi = new NicApi(client);\r\n        GetNicsRequestBody params = new GetNicsRequestBody()\n.where(new NicWhereInput()\n.id(\"Nic-id\"));\r\n        List<Nic> resp = nicApi.getNics(params);\r\n    }\r\n}"
  },
  "/get-nics-connection": {
    "exampleValue": {
      "where": {
        "id": "Nic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nics-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Nic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NicApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nic_api = NicApi(client)\r\n    resp = nic_api.get_nics_connection({\"where\":{\"id\":\"Nic-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nic\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nic_api := client.Nic\r\n    params := nic.NewGetNicsConnectionParams()\r\n    params.RequestBody = &models.GetNicsConnectionRequestBody{\nWhere: &models.NicWhereInput{\nID: pointy.String(\"Nic-id\"),\n},\n}\r\n    rawResp, err := nic_api.GetNicsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NicApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NicApi nicApi = new NicApi(client);\r\n        GetNicsConnectionRequestBody params = new GetNicsConnectionRequestBody()\n.where(new NicWhereInput()\n.id(\"Nic-id\"));\r\n        NicConnection resp = nicApi.getNicsConnection(params);\r\n    }\r\n}"
  },
  "/get-node-topoes": {
    "exampleValue": {
      "where": {
        "id": "NodeTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-node-topoes \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NodeTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NodeTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    node_topo_api = NodeTopoApi(client)\r\n    resp = node_topo_api.get_node_topoes({\"where\":{\"id\":\"NodeTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/node_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        node_topo_api := client.NodeTopo\r\n    params := node_topo.NewGetNodeTopoesParams()\r\n    params.RequestBody = &models.GetNodeTopoesRequestBody{\nWhere: &models.NodeTopoWhereInput{\nID: pointy.String(\"NodeTopo-id\"),\n},\n}\r\n    rawResp, err := node_topo_api.GetNodeTopoes(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NodeTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NodeTopoApi nodeTopoApi = new NodeTopoApi(client);\r\n        GetNodeTopoesRequestBody params = new GetNodeTopoesRequestBody()\n.where(new NodeTopoWhereInput()\n.id(\"NodeTopo-id\"));\r\n        List<NodeTopo> resp = nodeTopoApi.getNodeTopoes(params);\r\n    }\r\n}"
  },
  "/get-node-topoes-connection": {
    "exampleValue": {
      "where": {
        "id": "NodeTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-node-topoes-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NodeTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NodeTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    node_topo_api = NodeTopoApi(client)\r\n    resp = node_topo_api.get_node_topoes_connection({\"where\":{\"id\":\"NodeTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/node_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        node_topo_api := client.NodeTopo\r\n    params := node_topo.NewGetNodeTopoesConnectionParams()\r\n    params.RequestBody = &models.GetNodeTopoesConnectionRequestBody{\nWhere: &models.NodeTopoWhereInput{\nID: pointy.String(\"NodeTopo-id\"),\n},\n}\r\n    rawResp, err := node_topo_api.GetNodeTopoesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NodeTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NodeTopoApi nodeTopoApi = new NodeTopoApi(client);\r\n        GetNodeTopoesConnectionRequestBody params = new GetNodeTopoesConnectionRequestBody()\n.where(new NodeTopoWhereInput()\n.id(\"NodeTopo-id\"));\r\n        NodeTopoConnection resp = nodeTopoApi.getNodeTopoesConnection(params);\r\n    }\r\n}"
  },
  "/get-nvmf-namespace-snapshots": {
    "exampleValue": {
      "where": {
        "id": "NvmfNamespaceSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nvmf-namespace-snapshots \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NvmfNamespaceSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_snapshot_api = NvmfNamespaceSnapshotApi(client)\r\n    resp = nvmf_namespace_snapshot_api.get_nvmf_namespace_snapshots({\"where\":{\"id\":\"NvmfNamespaceSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_snapshot_api := client.NvmfNamespaceSnapshot\r\n    params := nvmf_namespace_snapshot.NewGetNvmfNamespaceSnapshotsParams()\r\n    params.RequestBody = &models.GetNvmfNamespaceSnapshotsRequestBody{\nWhere: &models.NvmfNamespaceSnapshotWhereInput{\nID: pointy.String(\"NvmfNamespaceSnapshot-id\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_snapshot_api.GetNvmfNamespaceSnapshots(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceSnapshotApi nvmfNamespaceSnapshotApi = new NvmfNamespaceSnapshotApi(client);\r\n        GetNvmfNamespaceSnapshotsRequestBody params = new GetNvmfNamespaceSnapshotsRequestBody()\n.where(new NvmfNamespaceSnapshotWhereInput()\n.id(\"NvmfNamespaceSnapshot-id\"));\r\n        List<NvmfNamespaceSnapshot> resp = nvmfNamespaceSnapshotApi.getNvmfNamespaceSnapshots(params);\r\n    }\r\n}"
  },
  "/get-nvmf-namespace-snapshots-connection": {
    "exampleValue": {
      "where": {
        "id": "NvmfNamespaceSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nvmf-namespace-snapshots-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NvmfNamespaceSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_snapshot_api = NvmfNamespaceSnapshotApi(client)\r\n    resp = nvmf_namespace_snapshot_api.get_nvmf_namespace_snapshots_connection({\"where\":{\"id\":\"NvmfNamespaceSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_snapshot_api := client.NvmfNamespaceSnapshot\r\n    params := nvmf_namespace_snapshot.NewGetNvmfNamespaceSnapshotsConnectionParams()\r\n    params.RequestBody = &models.GetNvmfNamespaceSnapshotsConnectionRequestBody{\nWhere: &models.NvmfNamespaceSnapshotWhereInput{\nID: pointy.String(\"NvmfNamespaceSnapshot-id\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_snapshot_api.GetNvmfNamespaceSnapshotsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceSnapshotApi nvmfNamespaceSnapshotApi = new NvmfNamespaceSnapshotApi(client);\r\n        GetNvmfNamespaceSnapshotsConnectionRequestBody params = new GetNvmfNamespaceSnapshotsConnectionRequestBody()\n.where(new NvmfNamespaceSnapshotWhereInput()\n.id(\"NvmfNamespaceSnapshot-id\"));\r\n        NvmfNamespaceSnapshotConnection resp = nvmfNamespaceSnapshotApi.getNvmfNamespaceSnapshotsConnection(params);\r\n    }\r\n}"
  },
  "/get-nvmf-namespaces": {
    "exampleValue": {
      "where": {
        "id": "NvmfNamespace-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nvmf-namespaces \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NvmfNamespace-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_api = NvmfNamespaceApi(client)\r\n    resp = nvmf_namespace_api.get_nvmf_namespaces({\"where\":{\"id\":\"NvmfNamespace-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_api := client.NvmfNamespace\r\n    params := nvmf_namespace.NewGetNvmfNamespacesParams()\r\n    params.RequestBody = &models.GetNvmfNamespacesRequestBody{\nWhere: &models.NvmfNamespaceWhereInput{\nID: pointy.String(\"NvmfNamespace-id\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_api.GetNvmfNamespaces(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceApi nvmfNamespaceApi = new NvmfNamespaceApi(client);\r\n        GetNvmfNamespacesRequestBody params = new GetNvmfNamespacesRequestBody()\n.where(new NvmfNamespaceWhereInput()\n.id(\"NvmfNamespace-id\"));\r\n        List<NvmfNamespace> resp = nvmfNamespaceApi.getNvmfNamespaces(params);\r\n    }\r\n}"
  },
  "/get-nvmf-namespaces-connection": {
    "exampleValue": {
      "where": {
        "id": "NvmfNamespace-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nvmf-namespaces-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NvmfNamespace-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfNamespaceApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_namespace_api = NvmfNamespaceApi(client)\r\n    resp = nvmf_namespace_api.get_nvmf_namespaces_connection({\"where\":{\"id\":\"NvmfNamespace-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_namespace\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_namespace_api := client.NvmfNamespace\r\n    params := nvmf_namespace.NewGetNvmfNamespacesConnectionParams()\r\n    params.RequestBody = &models.GetNvmfNamespacesConnectionRequestBody{\nWhere: &models.NvmfNamespaceWhereInput{\nID: pointy.String(\"NvmfNamespace-id\"),\n},\n}\r\n    rawResp, err := nvmf_namespace_api.GetNvmfNamespacesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NvmfNamespaceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfNamespaceApi nvmfNamespaceApi = new NvmfNamespaceApi(client);\r\n        GetNvmfNamespacesConnectionRequestBody params = new GetNvmfNamespacesConnectionRequestBody()\n.where(new NvmfNamespaceWhereInput()\n.id(\"NvmfNamespace-id\"));\r\n        NvmfNamespaceConnection resp = nvmfNamespaceApi.getNvmfNamespacesConnection(params);\r\n    }\r\n}"
  },
  "/get-nvmf-subsystems": {
    "exampleValue": {
      "where": {
        "id": "NvmfSubsystem-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nvmf-subsystems \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NvmfSubsystem-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfSubsystemApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_subsystem_api = NvmfSubsystemApi(client)\r\n    resp = nvmf_subsystem_api.get_nvmf_subsystems({\"where\":{\"id\":\"NvmfSubsystem-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_subsystem\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_subsystem_api := client.NvmfSubsystem\r\n    params := nvmf_subsystem.NewGetNvmfSubsystemsParams()\r\n    params.RequestBody = &models.GetNvmfSubsystemsRequestBody{\nWhere: &models.NvmfSubsystemWhereInput{\nID: pointy.String(\"NvmfSubsystem-id\"),\n},\n}\r\n    rawResp, err := nvmf_subsystem_api.GetNvmfSubsystems(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NvmfSubsystemApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfSubsystemApi nvmfSubsystemApi = new NvmfSubsystemApi(client);\r\n        GetNvmfSubsystemsRequestBody params = new GetNvmfSubsystemsRequestBody()\n.where(new NvmfSubsystemWhereInput()\n.id(\"NvmfSubsystem-id\"));\r\n        List<NvmfSubsystem> resp = nvmfSubsystemApi.getNvmfSubsystems(params);\r\n    }\r\n}"
  },
  "/get-nvmf-subsystems-connection": {
    "exampleValue": {
      "where": {
        "id": "NvmfSubsystem-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-nvmf-subsystems-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"NvmfSubsystem-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, NvmfSubsystemApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    nvmf_subsystem_api = NvmfSubsystemApi(client)\r\n    resp = nvmf_subsystem_api.get_nvmf_subsystems_connection({\"where\":{\"id\":\"NvmfSubsystem-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/nvmf_subsystem\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        nvmf_subsystem_api := client.NvmfSubsystem\r\n    params := nvmf_subsystem.NewGetNvmfSubsystemsConnectionParams()\r\n    params.RequestBody = &models.GetNvmfSubsystemsConnectionRequestBody{\nWhere: &models.NvmfSubsystemWhereInput{\nID: pointy.String(\"NvmfSubsystem-id\"),\n},\n}\r\n    rawResp, err := nvmf_subsystem_api.GetNvmfSubsystemsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.NvmfSubsystemApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        NvmfSubsystemApi nvmfSubsystemApi = new NvmfSubsystemApi(client);\r\n        GetNvmfSubsystemsConnectionRequestBody params = new GetNvmfSubsystemsConnectionRequestBody()\n.where(new NvmfSubsystemWhereInput()\n.id(\"NvmfSubsystem-id\"));\r\n        NvmfSubsystemConnection resp = nvmfSubsystemApi.getNvmfSubsystemsConnection(params);\r\n    }\r\n}"
  },
  "/get-organizations": {
    "exampleValue": {
      "where": {
        "id": "Organization-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-organizations \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Organization-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, OrganizationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    organization_api = OrganizationApi(client)\r\n    resp = organization_api.get_organizations({\"where\":{\"id\":\"Organization-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/organization\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        organization_api := client.Organization\r\n    params := organization.NewGetOrganizationsParams()\r\n    params.RequestBody = &models.GetOrganizationsRequestBody{\nWhere: &models.OrganizationWhereInput{\nID: pointy.String(\"Organization-id\"),\n},\n}\r\n    rawResp, err := organization_api.GetOrganizations(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.OrganizationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        OrganizationApi organizationApi = new OrganizationApi(client);\r\n        GetOrganizationsRequestBody params = new GetOrganizationsRequestBody()\n.where(new OrganizationWhereInput()\n.id(\"Organization-id\"));\r\n        List<Organization> resp = organizationApi.getOrganizations(params);\r\n    }\r\n}"
  },
  "/get-organizations-connection": {
    "exampleValue": {
      "where": {
        "id": "Organization-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-organizations-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Organization-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, OrganizationApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    organization_api = OrganizationApi(client)\r\n    resp = organization_api.get_organizations_connection({\"where\":{\"id\":\"Organization-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/organization\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        organization_api := client.Organization\r\n    params := organization.NewGetOrganizationsConnectionParams()\r\n    params.RequestBody = &models.GetOrganizationsConnectionRequestBody{\nWhere: &models.OrganizationWhereInput{\nID: pointy.String(\"Organization-id\"),\n},\n}\r\n    rawResp, err := organization_api.GetOrganizationsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.OrganizationApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        OrganizationApi organizationApi = new OrganizationApi(client);\r\n        GetOrganizationsConnectionRequestBody params = new GetOrganizationsConnectionRequestBody()\n.where(new OrganizationWhereInput()\n.id(\"Organization-id\"));\r\n        OrganizationConnection resp = organizationApi.getOrganizationsConnection(params);\r\n    }\r\n}"
  },
  "/get-pmem-dimms": {
    "exampleValue": {
      "where": {
        "id": "PmemDimm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-pmem-dimms \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"PmemDimm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, PmemDimmApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    pmem_dimm_api = PmemDimmApi(client)\r\n    resp = pmem_dimm_api.get_pmem_dimms({\"where\":{\"id\":\"PmemDimm-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/pmem_dimm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        pmem_dimm_api := client.PmemDimm\r\n    params := pmem_dimm.NewGetPmemDimmsParams()\r\n    params.RequestBody = &models.GetPmemDimmsRequestBody{\nWhere: &models.PmemDimmWhereInput{\nID: pointy.String(\"PmemDimm-id\"),\n},\n}\r\n    rawResp, err := pmem_dimm_api.GetPmemDimms(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.PmemDimmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        PmemDimmApi pmemDimmApi = new PmemDimmApi(client);\r\n        GetPmemDimmsRequestBody params = new GetPmemDimmsRequestBody()\n.where(new PmemDimmWhereInput()\n.id(\"PmemDimm-id\"));\r\n        List<PmemDimm> resp = pmemDimmApi.getPmemDimms(params);\r\n    }\r\n}"
  },
  "/get-pmem-dimms-connection": {
    "exampleValue": {
      "where": {
        "id": "PmemDimm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-pmem-dimms-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"PmemDimm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, PmemDimmApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    pmem_dimm_api = PmemDimmApi(client)\r\n    resp = pmem_dimm_api.get_pmem_dimms_connection({\"where\":{\"id\":\"PmemDimm-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/pmem_dimm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        pmem_dimm_api := client.PmemDimm\r\n    params := pmem_dimm.NewGetPmemDimmsConnectionParams()\r\n    params.RequestBody = &models.GetPmemDimmsConnectionRequestBody{\nWhere: &models.PmemDimmWhereInput{\nID: pointy.String(\"PmemDimm-id\"),\n},\n}\r\n    rawResp, err := pmem_dimm_api.GetPmemDimmsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.PmemDimmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        PmemDimmApi pmemDimmApi = new PmemDimmApi(client);\r\n        GetPmemDimmsConnectionRequestBody params = new GetPmemDimmsConnectionRequestBody()\n.where(new PmemDimmWhereInput()\n.id(\"PmemDimm-id\"));\r\n        PmemDimmConnection resp = pmemDimmApi.getPmemDimmsConnection(params);\r\n    }\r\n}"
  },
  "/get-rack-topoes": {
    "exampleValue": {
      "where": {
        "id": "RackTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-rack-topoes \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"RackTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, RackTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    rack_topo_api = RackTopoApi(client)\r\n    resp = rack_topo_api.get_rack_topoes({\"where\":{\"id\":\"RackTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/rack_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        rack_topo_api := client.RackTopo\r\n    params := rack_topo.NewGetRackTopoesParams()\r\n    params.RequestBody = &models.GetRackTopoesRequestBody{\nWhere: &models.RackTopoWhereInput{\nID: pointy.String(\"RackTopo-id\"),\n},\n}\r\n    rawResp, err := rack_topo_api.GetRackTopoes(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.RackTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        RackTopoApi rackTopoApi = new RackTopoApi(client);\r\n        GetRackTopoesRequestBody params = new GetRackTopoesRequestBody()\n.where(new RackTopoWhereInput()\n.id(\"RackTopo-id\"));\r\n        List<RackTopo> resp = rackTopoApi.getRackTopoes(params);\r\n    }\r\n}"
  },
  "/get-rack-topoes-connection": {
    "exampleValue": {
      "where": {
        "id": "RackTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-rack-topoes-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"RackTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, RackTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    rack_topo_api = RackTopoApi(client)\r\n    resp = rack_topo_api.get_rack_topoes_connection({\"where\":{\"id\":\"RackTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/rack_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        rack_topo_api := client.RackTopo\r\n    params := rack_topo.NewGetRackTopoesConnectionParams()\r\n    params.RequestBody = &models.GetRackTopoesConnectionRequestBody{\nWhere: &models.RackTopoWhereInput{\nID: pointy.String(\"RackTopo-id\"),\n},\n}\r\n    rawResp, err := rack_topo_api.GetRackTopoesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.RackTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        RackTopoApi rackTopoApi = new RackTopoApi(client);\r\n        GetRackTopoesConnectionRequestBody params = new GetRackTopoesConnectionRequestBody()\n.where(new RackTopoWhereInput()\n.id(\"RackTopo-id\"));\r\n        RackTopoConnection resp = rackTopoApi.getRackTopoesConnection(params);\r\n    }\r\n}"
  },
  "/get-report-tasks": {
    "exampleValue": {
      "where": {
        "id": "ReportTask-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-report-tasks \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ReportTask-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ReportTaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    report_task_api = ReportTaskApi(client)\r\n    resp = report_task_api.get_report_tasks({\"where\":{\"id\":\"ReportTask-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/report_task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        report_task_api := client.ReportTask\r\n    params := report_task.NewGetReportTasksParams()\r\n    params.RequestBody = &models.GetReportTasksRequestBody{\nWhere: &models.ReportTaskWhereInput{\nID: pointy.String(\"ReportTask-id\"),\n},\n}\r\n    rawResp, err := report_task_api.GetReportTasks(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ReportTaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ReportTaskApi reportTaskApi = new ReportTaskApi(client);\r\n        GetReportTasksRequestBody params = new GetReportTasksRequestBody()\n.where(new ReportTaskWhereInput()\n.id(\"ReportTask-id\"));\r\n        List<ReportTask> resp = reportTaskApi.getReportTasks(params);\r\n    }\r\n}"
  },
  "/get-report-tasks-connection": {
    "exampleValue": {
      "where": {
        "id": "ReportTask-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-report-tasks-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ReportTask-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ReportTaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    report_task_api = ReportTaskApi(client)\r\n    resp = report_task_api.get_report_tasks_connection({\"where\":{\"id\":\"ReportTask-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/report_task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        report_task_api := client.ReportTask\r\n    params := report_task.NewGetReportTasksConnectionParams()\r\n    params.RequestBody = &models.GetReportTasksConnectionRequestBody{\nWhere: &models.ReportTaskWhereInput{\nID: pointy.String(\"ReportTask-id\"),\n},\n}\r\n    rawResp, err := report_task_api.GetReportTasksConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ReportTaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ReportTaskApi reportTaskApi = new ReportTaskApi(client);\r\n        GetReportTasksConnectionRequestBody params = new GetReportTasksConnectionRequestBody()\n.where(new ReportTaskWhereInput()\n.id(\"ReportTask-id\"));\r\n        ReportTaskConnection resp = reportTaskApi.getReportTasksConnection(params);\r\n    }\r\n}"
  },
  "/get-report-templates": {
    "exampleValue": {
      "where": {
        "id": "ReportTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-report-templates \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ReportTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ReportTemplateApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    report_template_api = ReportTemplateApi(client)\r\n    resp = report_template_api.get_report_templates({\"where\":{\"id\":\"ReportTemplate-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/report_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        report_template_api := client.ReportTemplate\r\n    params := report_template.NewGetReportTemplatesParams()\r\n    params.RequestBody = &models.GetReportTemplatesRequestBody{\nWhere: &models.ReportTemplateWhereInput{\nID: pointy.String(\"ReportTemplate-id\"),\n},\n}\r\n    rawResp, err := report_template_api.GetReportTemplates(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ReportTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ReportTemplateApi reportTemplateApi = new ReportTemplateApi(client);\r\n        GetReportTemplatesRequestBody params = new GetReportTemplatesRequestBody()\n.where(new ReportTemplateWhereInput()\n.id(\"ReportTemplate-id\"));\r\n        List<ReportTemplate> resp = reportTemplateApi.getReportTemplates(params);\r\n    }\r\n}"
  },
  "/get-report-templates-connection": {
    "exampleValue": {
      "where": {
        "id": "ReportTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-report-templates-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ReportTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ReportTemplateApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    report_template_api = ReportTemplateApi(client)\r\n    resp = report_template_api.get_report_templates_connection({\"where\":{\"id\":\"ReportTemplate-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/report_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        report_template_api := client.ReportTemplate\r\n    params := report_template.NewGetReportTemplatesConnectionParams()\r\n    params.RequestBody = &models.GetReportTemplatesConnectionRequestBody{\nWhere: &models.ReportTemplateWhereInput{\nID: pointy.String(\"ReportTemplate-id\"),\n},\n}\r\n    rawResp, err := report_template_api.GetReportTemplatesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ReportTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ReportTemplateApi reportTemplateApi = new ReportTemplateApi(client);\r\n        GetReportTemplatesConnectionRequestBody params = new GetReportTemplatesConnectionRequestBody()\n.where(new ReportTemplateWhereInput()\n.id(\"ReportTemplate-id\"));\r\n        ReportTemplateConnection resp = reportTemplateApi.getReportTemplatesConnection(params);\r\n    }\r\n}"
  },
  "/get-security-groups": {
    "exampleValue": {
      "where": {
        "id": "SecurityGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-security-groups \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SecurityGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_group_api = SecurityGroupApi(client)\r\n    resp = security_group_api.get_security_groups({\"where\":{\"id\":\"SecurityGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_group_api := client.SecurityGroup\r\n    params := security_group.NewGetSecurityGroupsParams()\r\n    params.RequestBody = &models.GetSecurityGroupsRequestBody{\nWhere: &models.SecurityGroupWhereInput{\nID: pointy.String(\"SecurityGroup-id\"),\n},\n}\r\n    rawResp, err := security_group_api.GetSecurityGroups(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SecurityGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityGroupApi securityGroupApi = new SecurityGroupApi(client);\r\n        GetSecurityGroupsRequestBody params = new GetSecurityGroupsRequestBody()\n.where(new SecurityGroupWhereInput()\n.id(\"SecurityGroup-id\"));\r\n        List<SecurityGroup> resp = securityGroupApi.getSecurityGroups(params);\r\n    }\r\n}"
  },
  "/get-security-groups-connection": {
    "exampleValue": {
      "where": {
        "id": "SecurityGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-security-groups-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SecurityGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_group_api = SecurityGroupApi(client)\r\n    resp = security_group_api.get_security_groups_connection({\"where\":{\"id\":\"SecurityGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_group_api := client.SecurityGroup\r\n    params := security_group.NewGetSecurityGroupsConnectionParams()\r\n    params.RequestBody = &models.GetSecurityGroupsConnectionRequestBody{\nWhere: &models.SecurityGroupWhereInput{\nID: pointy.String(\"SecurityGroup-id\"),\n},\n}\r\n    rawResp, err := security_group_api.GetSecurityGroupsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SecurityGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityGroupApi securityGroupApi = new SecurityGroupApi(client);\r\n        GetSecurityGroupsConnectionRequestBody params = new GetSecurityGroupsConnectionRequestBody()\n.where(new SecurityGroupWhereInput()\n.id(\"SecurityGroup-id\"));\r\n        SecurityGroupConnection resp = securityGroupApi.getSecurityGroupsConnection(params);\r\n    }\r\n}"
  },
  "/get-security-policies": {
    "exampleValue": {
      "where": {
        "id": "SecurityPolicy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-security-policies \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SecurityPolicy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityPolicyApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_policy_api = SecurityPolicyApi(client)\r\n    resp = security_policy_api.get_security_policies({\"where\":{\"id\":\"SecurityPolicy-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_policy_api := client.SecurityPolicy\r\n    params := security_policy.NewGetSecurityPoliciesParams()\r\n    params.RequestBody = &models.GetSecurityPoliciesRequestBody{\nWhere: &models.SecurityPolicyWhereInput{\nID: pointy.String(\"SecurityPolicy-id\"),\n},\n}\r\n    rawResp, err := security_policy_api.GetSecurityPolicies(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SecurityPolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityPolicyApi securityPolicyApi = new SecurityPolicyApi(client);\r\n        GetSecurityPoliciesRequestBody params = new GetSecurityPoliciesRequestBody()\n.where(new SecurityPolicyWhereInput()\n.id(\"SecurityPolicy-id\"));\r\n        List<SecurityPolicy> resp = securityPolicyApi.getSecurityPolicies(params);\r\n    }\r\n}"
  },
  "/get-security-policies-connection": {
    "exampleValue": {
      "where": {
        "id": "SecurityPolicy-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-security-policies-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SecurityPolicy-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SecurityPolicyApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    security_policy_api = SecurityPolicyApi(client)\r\n    resp = security_policy_api.get_security_policies_connection({\"where\":{\"id\":\"SecurityPolicy-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/security_policy\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        security_policy_api := client.SecurityPolicy\r\n    params := security_policy.NewGetSecurityPoliciesConnectionParams()\r\n    params.RequestBody = &models.GetSecurityPoliciesConnectionRequestBody{\nWhere: &models.SecurityPolicyWhereInput{\nID: pointy.String(\"SecurityPolicy-id\"),\n},\n}\r\n    rawResp, err := security_policy_api.GetSecurityPoliciesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SecurityPolicyApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SecurityPolicyApi securityPolicyApi = new SecurityPolicyApi(client);\r\n        GetSecurityPoliciesConnectionRequestBody params = new GetSecurityPoliciesConnectionRequestBody()\n.where(new SecurityPolicyWhereInput()\n.id(\"SecurityPolicy-id\"));\r\n        SecurityPolicyConnection resp = securityPolicyApi.getSecurityPoliciesConnection(params);\r\n    }\r\n}"
  },
  "/get-snapshot-groups": {
    "exampleValue": {
      "where": {
        "id": "SnapshotGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snapshot-groups \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_group_api = SnapshotGroupApi(client)\r\n    resp = snapshot_group_api.get_snapshot_groups({\"where\":{\"id\":\"SnapshotGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_group_api := client.SnapshotGroup\r\n    params := snapshot_group.NewGetSnapshotGroupsParams()\r\n    params.RequestBody = &models.GetSnapshotGroupsRequestBody{\nWhere: &models.SnapshotGroupWhereInput{\nID: pointy.String(\"SnapshotGroup-id\"),\n},\n}\r\n    rawResp, err := snapshot_group_api.GetSnapshotGroups(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnapshotGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotGroupApi snapshotGroupApi = new SnapshotGroupApi(client);\r\n        GetSnapshotGroupsRequestBody params = new GetSnapshotGroupsRequestBody()\n.where(new SnapshotGroupWhereInput()\n.id(\"SnapshotGroup-id\"));\r\n        List<SnapshotGroup> resp = snapshotGroupApi.getSnapshotGroups(params);\r\n    }\r\n}"
  },
  "/get-snapshot-groups-connection": {
    "exampleValue": {
      "where": {
        "id": "SnapshotGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snapshot-groups-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_group_api = SnapshotGroupApi(client)\r\n    resp = snapshot_group_api.get_snapshot_groups_connection({\"where\":{\"id\":\"SnapshotGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_group_api := client.SnapshotGroup\r\n    params := snapshot_group.NewGetSnapshotGroupsConnectionParams()\r\n    params.RequestBody = &models.GetSnapshotGroupsConnectionRequestBody{\nWhere: &models.SnapshotGroupWhereInput{\nID: pointy.String(\"SnapshotGroup-id\"),\n},\n}\r\n    rawResp, err := snapshot_group_api.GetSnapshotGroupsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnapshotGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotGroupApi snapshotGroupApi = new SnapshotGroupApi(client);\r\n        GetSnapshotGroupsConnectionRequestBody params = new GetSnapshotGroupsConnectionRequestBody()\n.where(new SnapshotGroupWhereInput()\n.id(\"SnapshotGroup-id\"));\r\n        SnapshotGroupConnection resp = snapshotGroupApi.getSnapshotGroupsConnection(params);\r\n    }\r\n}"
  },
  "/get-snapshot-plan-tasks": {
    "exampleValue": {
      "where": {
        "id": "SnapshotPlanTask-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snapshot-plan-tasks \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotPlanTask-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanTaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_task_api = SnapshotPlanTaskApi(client)\r\n    resp = snapshot_plan_task_api.get_snapshot_plan_tasks({\"where\":{\"id\":\"SnapshotPlanTask-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan_task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_task_api := client.SnapshotPlanTask\r\n    params := snapshot_plan_task.NewGetSnapshotPlanTasksParams()\r\n    params.RequestBody = &models.GetSnapshotPlanTasksRequestBody{\nWhere: &models.SnapshotPlanTaskWhereInput{\nID: pointy.String(\"SnapshotPlanTask-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_task_api.GetSnapshotPlanTasks(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnapshotPlanTaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanTaskApi snapshotPlanTaskApi = new SnapshotPlanTaskApi(client);\r\n        GetSnapshotPlanTasksRequestBody params = new GetSnapshotPlanTasksRequestBody()\n.where(new SnapshotPlanTaskWhereInput()\n.id(\"SnapshotPlanTask-id\"));\r\n        List<SnapshotPlanTask> resp = snapshotPlanTaskApi.getSnapshotPlanTasks(params);\r\n    }\r\n}"
  },
  "/get-snapshot-plan-tasks-connection": {
    "exampleValue": {
      "where": {
        "id": "SnapshotPlanTask-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snapshot-plan-tasks-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotPlanTask-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanTaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_task_api = SnapshotPlanTaskApi(client)\r\n    resp = snapshot_plan_task_api.get_snapshot_plan_tasks_connection({\"where\":{\"id\":\"SnapshotPlanTask-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan_task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_task_api := client.SnapshotPlanTask\r\n    params := snapshot_plan_task.NewGetSnapshotPlanTasksConnectionParams()\r\n    params.RequestBody = &models.GetSnapshotPlanTasksConnectionRequestBody{\nWhere: &models.SnapshotPlanTaskWhereInput{\nID: pointy.String(\"SnapshotPlanTask-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_task_api.GetSnapshotPlanTasksConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnapshotPlanTaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanTaskApi snapshotPlanTaskApi = new SnapshotPlanTaskApi(client);\r\n        GetSnapshotPlanTasksConnectionRequestBody params = new GetSnapshotPlanTasksConnectionRequestBody()\n.where(new SnapshotPlanTaskWhereInput()\n.id(\"SnapshotPlanTask-id\"));\r\n        SnapshotPlanTaskConnection resp = snapshotPlanTaskApi.getSnapshotPlanTasksConnection(params);\r\n    }\r\n}"
  },
  "/get-snapshot-plans": {
    "exampleValue": {
      "where": {
        "id": "SnapshotPlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snapshot-plans \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotPlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_api = SnapshotPlanApi(client)\r\n    resp = snapshot_plan_api.get_snapshot_plans({\"where\":{\"id\":\"SnapshotPlan-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_api := client.SnapshotPlan\r\n    params := snapshot_plan.NewGetSnapshotPlansParams()\r\n    params.RequestBody = &models.GetSnapshotPlansRequestBody{\nWhere: &models.SnapshotPlanWhereInput{\nID: pointy.String(\"SnapshotPlan-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_api.GetSnapshotPlans(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnapshotPlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanApi snapshotPlanApi = new SnapshotPlanApi(client);\r\n        GetSnapshotPlansRequestBody params = new GetSnapshotPlansRequestBody()\n.where(new SnapshotPlanWhereInput()\n.id(\"SnapshotPlan-id\"));\r\n        List<SnapshotPlan> resp = snapshotPlanApi.getSnapshotPlans(params);\r\n    }\r\n}"
  },
  "/get-snapshot-plans-connection": {
    "exampleValue": {
      "where": {
        "id": "SnapshotPlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snapshot-plans-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnapshotPlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnapshotPlanApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snapshot_plan_api = SnapshotPlanApi(client)\r\n    resp = snapshot_plan_api.get_snapshot_plans_connection({\"where\":{\"id\":\"SnapshotPlan-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snapshot_plan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snapshot_plan_api := client.SnapshotPlan\r\n    params := snapshot_plan.NewGetSnapshotPlansConnectionParams()\r\n    params.RequestBody = &models.GetSnapshotPlansConnectionRequestBody{\nWhere: &models.SnapshotPlanWhereInput{\nID: pointy.String(\"SnapshotPlan-id\"),\n},\n}\r\n    rawResp, err := snapshot_plan_api.GetSnapshotPlansConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnapshotPlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnapshotPlanApi snapshotPlanApi = new SnapshotPlanApi(client);\r\n        GetSnapshotPlansConnectionRequestBody params = new GetSnapshotPlansConnectionRequestBody()\n.where(new SnapshotPlanWhereInput()\n.id(\"SnapshotPlan-id\"));\r\n        SnapshotPlanConnection resp = snapshotPlanApi.getSnapshotPlansConnection(params);\r\n    }\r\n}"
  },
  "/get-snmp-transports": {
    "exampleValue": {
      "where": {
        "id": "SnmpTransport-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snmp-transports \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnmpTransport-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTransportApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_transport_api = SnmpTransportApi(client)\r\n    resp = snmp_transport_api.get_snmp_transports({\"where\":{\"id\":\"SnmpTransport-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_transport\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_transport_api := client.SnmpTransport\r\n    params := snmp_transport.NewGetSnmpTransportsParams()\r\n    params.RequestBody = &models.GetSnmpTransportsRequestBody{\nWhere: &models.SnmpTransportWhereInput{\nID: pointy.String(\"SnmpTransport-id\"),\n},\n}\r\n    rawResp, err := snmp_transport_api.GetSnmpTransports(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnmpTransportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTransportApi snmpTransportApi = new SnmpTransportApi(client);\r\n        GetSnmpTransportsRequestBody params = new GetSnmpTransportsRequestBody()\n.where(new SnmpTransportWhereInput()\n.id(\"SnmpTransport-id\"));\r\n        List<SnmpTransport> resp = snmpTransportApi.getSnmpTransports(params);\r\n    }\r\n}"
  },
  "/get-snmp-transports-connection": {
    "exampleValue": {
      "where": {
        "id": "SnmpTransport-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snmp-transports-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnmpTransport-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTransportApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_transport_api = SnmpTransportApi(client)\r\n    resp = snmp_transport_api.get_snmp_transports_connection({\"where\":{\"id\":\"SnmpTransport-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_transport\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_transport_api := client.SnmpTransport\r\n    params := snmp_transport.NewGetSnmpTransportsConnectionParams()\r\n    params.RequestBody = &models.GetSnmpTransportsConnectionRequestBody{\nWhere: &models.SnmpTransportWhereInput{\nID: pointy.String(\"SnmpTransport-id\"),\n},\n}\r\n    rawResp, err := snmp_transport_api.GetSnmpTransportsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnmpTransportApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTransportApi snmpTransportApi = new SnmpTransportApi(client);\r\n        GetSnmpTransportsConnectionRequestBody params = new GetSnmpTransportsConnectionRequestBody()\n.where(new SnmpTransportWhereInput()\n.id(\"SnmpTransport-id\"));\r\n        SnmpTransportConnection resp = snmpTransportApi.getSnmpTransportsConnection(params);\r\n    }\r\n}"
  },
  "/get-snmp-trap-receivers": {
    "exampleValue": {
      "where": {
        "id": "SnmpTrapReceiver-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snmp-trap-receivers \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnmpTrapReceiver-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTrapReceiverApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_trap_receiver_api = SnmpTrapReceiverApi(client)\r\n    resp = snmp_trap_receiver_api.get_snmp_trap_receivers({\"where\":{\"id\":\"SnmpTrapReceiver-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_trap_receiver\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_trap_receiver_api := client.SnmpTrapReceiver\r\n    params := snmp_trap_receiver.NewGetSnmpTrapReceiversParams()\r\n    params.RequestBody = &models.GetSnmpTrapReceiversRequestBody{\nWhere: &models.SnmpTrapReceiverWhereInput{\nID: pointy.String(\"SnmpTrapReceiver-id\"),\n},\n}\r\n    rawResp, err := snmp_trap_receiver_api.GetSnmpTrapReceivers(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnmpTrapReceiverApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTrapReceiverApi snmpTrapReceiverApi = new SnmpTrapReceiverApi(client);\r\n        GetSnmpTrapReceiversRequestBody params = new GetSnmpTrapReceiversRequestBody()\n.where(new SnmpTrapReceiverWhereInput()\n.id(\"SnmpTrapReceiver-id\"));\r\n        List<SnmpTrapReceiver> resp = snmpTrapReceiverApi.getSnmpTrapReceivers(params);\r\n    }\r\n}"
  },
  "/get-snmp-trap-receivers-connection": {
    "exampleValue": {
      "where": {
        "id": "SnmpTrapReceiver-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-snmp-trap-receivers-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SnmpTrapReceiver-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SnmpTrapReceiverApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    snmp_trap_receiver_api = SnmpTrapReceiverApi(client)\r\n    resp = snmp_trap_receiver_api.get_snmp_trap_receivers_connection({\"where\":{\"id\":\"SnmpTrapReceiver-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/snmp_trap_receiver\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        snmp_trap_receiver_api := client.SnmpTrapReceiver\r\n    params := snmp_trap_receiver.NewGetSnmpTrapReceiversConnectionParams()\r\n    params.RequestBody = &models.GetSnmpTrapReceiversConnectionRequestBody{\nWhere: &models.SnmpTrapReceiverWhereInput{\nID: pointy.String(\"SnmpTrapReceiver-id\"),\n},\n}\r\n    rawResp, err := snmp_trap_receiver_api.GetSnmpTrapReceiversConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SnmpTrapReceiverApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SnmpTrapReceiverApi snmpTrapReceiverApi = new SnmpTrapReceiverApi(client);\r\n        GetSnmpTrapReceiversConnectionRequestBody params = new GetSnmpTrapReceiversConnectionRequestBody()\n.where(new SnmpTrapReceiverWhereInput()\n.id(\"SnmpTrapReceiver-id\"));\r\n        SnmpTrapReceiverConnection resp = snmpTrapReceiverApi.getSnmpTrapReceiversConnection(params);\r\n    }\r\n}"
  },
  "/get-svt-images": {
    "exampleValue": {
      "where": {
        "id": "SvtImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-svt-images \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SvtImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SvtImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    svt_image_api = SvtImageApi(client)\r\n    resp = svt_image_api.get_svt_images({\"where\":{\"id\":\"SvtImage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/svt_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        svt_image_api := client.SvtImage\r\n    params := svt_image.NewGetSvtImagesParams()\r\n    params.RequestBody = &models.GetSvtImagesRequestBody{\nWhere: &models.SvtImageWhereInput{\nID: pointy.String(\"SvtImage-id\"),\n},\n}\r\n    rawResp, err := svt_image_api.GetSvtImages(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SvtImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SvtImageApi svtImageApi = new SvtImageApi(client);\r\n        GetSvtImagesRequestBody params = new GetSvtImagesRequestBody()\n.where(new SvtImageWhereInput()\n.id(\"SvtImage-id\"));\r\n        List<SvtImage> resp = svtImageApi.getSvtImages(params);\r\n    }\r\n}"
  },
  "/get-svt-images-connection": {
    "exampleValue": {
      "where": {
        "id": "SvtImage-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-svt-images-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SvtImage-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SvtImageApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    svt_image_api = SvtImageApi(client)\r\n    resp = svt_image_api.get_svt_images_connection({\"where\":{\"id\":\"SvtImage-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/svt_image\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        svt_image_api := client.SvtImage\r\n    params := svt_image.NewGetSvtImagesConnectionParams()\r\n    params.RequestBody = &models.GetSvtImagesConnectionRequestBody{\nWhere: &models.SvtImageWhereInput{\nID: pointy.String(\"SvtImage-id\"),\n},\n}\r\n    rawResp, err := svt_image_api.GetSvtImagesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SvtImageApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SvtImageApi svtImageApi = new SvtImageApi(client);\r\n        GetSvtImagesConnectionRequestBody params = new GetSvtImagesConnectionRequestBody()\n.where(new SvtImageWhereInput()\n.id(\"SvtImage-id\"));\r\n        SvtImageConnection resp = svtImageApi.getSvtImagesConnection(params);\r\n    }\r\n}"
  },
  "/get-system-audit-logs": {
    "exampleValue": {
      "where": {
        "id": "SystemAuditLog-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-system-audit-logs \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SystemAuditLog-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SystemAuditLogApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    system_audit_log_api = SystemAuditLogApi(client)\r\n    resp = system_audit_log_api.get_system_audit_logs({\"where\":{\"id\":\"SystemAuditLog-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/system_audit_log\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        system_audit_log_api := client.SystemAuditLog\r\n    params := system_audit_log.NewGetSystemAuditLogsParams()\r\n    params.RequestBody = &models.GetSystemAuditLogsRequestBody{\nWhere: &models.SystemAuditLogWhereInput{\nID: pointy.String(\"SystemAuditLog-id\"),\n},\n}\r\n    rawResp, err := system_audit_log_api.GetSystemAuditLogs(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SystemAuditLogApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SystemAuditLogApi systemAuditLogApi = new SystemAuditLogApi(client);\r\n        GetSystemAuditLogsRequestBody params = new GetSystemAuditLogsRequestBody()\n.where(new SystemAuditLogWhereInput()\n.id(\"SystemAuditLog-id\"));\r\n        List<SystemAuditLog> resp = systemAuditLogApi.getSystemAuditLogs(params);\r\n    }\r\n}"
  },
  "/get-system-audit-logs-connection": {
    "exampleValue": {
      "where": {
        "id": "SystemAuditLog-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-system-audit-logs-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"SystemAuditLog-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, SystemAuditLogApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    system_audit_log_api = SystemAuditLogApi(client)\r\n    resp = system_audit_log_api.get_system_audit_logs_connection({\"where\":{\"id\":\"SystemAuditLog-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/system_audit_log\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        system_audit_log_api := client.SystemAuditLog\r\n    params := system_audit_log.NewGetSystemAuditLogsConnectionParams()\r\n    params.RequestBody = &models.GetSystemAuditLogsConnectionRequestBody{\nWhere: &models.SystemAuditLogWhereInput{\nID: pointy.String(\"SystemAuditLog-id\"),\n},\n}\r\n    rawResp, err := system_audit_log_api.GetSystemAuditLogsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.SystemAuditLogApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        SystemAuditLogApi systemAuditLogApi = new SystemAuditLogApi(client);\r\n        GetSystemAuditLogsConnectionRequestBody params = new GetSystemAuditLogsConnectionRequestBody()\n.where(new SystemAuditLogWhereInput()\n.id(\"SystemAuditLog-id\"));\r\n        SystemAuditLogConnection resp = systemAuditLogApi.getSystemAuditLogsConnection(params);\r\n    }\r\n}"
  },
  "/get-tasks": {
    "exampleValue": {
      "where": {
        "id": "Task-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-tasks \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Task-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, TaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    task_api = TaskApi(client)\r\n    resp = task_api.get_tasks({\"where\":{\"id\":\"Task-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        task_api := client.Task\r\n    params := task.NewGetTasksParams()\r\n    params.RequestBody = &models.GetTasksRequestBody{\nWhere: &models.TaskWhereInput{\nID: pointy.String(\"Task-id\"),\n},\n}\r\n    rawResp, err := task_api.GetTasks(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.TaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        TaskApi taskApi = new TaskApi(client);\r\n        GetTasksRequestBody params = new GetTasksRequestBody()\n.where(new TaskWhereInput()\n.id(\"Task-id\"));\r\n        List<Task> resp = taskApi.getTasks(params);\r\n    }\r\n}"
  },
  "/get-tasks-connection": {
    "exampleValue": {
      "where": {
        "id": "Task-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-tasks-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Task-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, TaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    task_api = TaskApi(client)\r\n    resp = task_api.get_tasks_connection({\"where\":{\"id\":\"Task-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        task_api := client.Task\r\n    params := task.NewGetTasksConnectionParams()\r\n    params.RequestBody = &models.GetTasksConnectionRequestBody{\nWhere: &models.TaskWhereInput{\nID: pointy.String(\"Task-id\"),\n},\n}\r\n    rawResp, err := task_api.GetTasksConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.TaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        TaskApi taskApi = new TaskApi(client);\r\n        GetTasksConnectionRequestBody params = new GetTasksConnectionRequestBody()\n.where(new TaskWhereInput()\n.id(\"Task-id\"));\r\n        TaskConnection resp = taskApi.getTasksConnection(params);\r\n    }\r\n}"
  },
  "/get-upload-tasks": {
    "exampleValue": {
      "where": {
        "id": "UploadTask-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-upload-tasks \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UploadTask-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UploadTaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    upload_task_api = UploadTaskApi(client)\r\n    resp = upload_task_api.get_upload_tasks({\"where\":{\"id\":\"UploadTask-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/upload_task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        upload_task_api := client.UploadTask\r\n    params := upload_task.NewGetUploadTasksParams()\r\n    params.RequestBody = &models.GetUploadTasksRequestBody{\nWhere: &models.UploadTaskWhereInput{\nID: pointy.String(\"UploadTask-id\"),\n},\n}\r\n    rawResp, err := upload_task_api.GetUploadTasks(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UploadTaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UploadTaskApi uploadTaskApi = new UploadTaskApi(client);\r\n        GetUploadTasksRequestBody params = new GetUploadTasksRequestBody()\n.where(new UploadTaskWhereInput()\n.id(\"UploadTask-id\"));\r\n        List<UploadTask> resp = uploadTaskApi.getUploadTasks(params);\r\n    }\r\n}"
  },
  "/get-upload-tasks-connection": {
    "exampleValue": {
      "where": {
        "id": "UploadTask-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-upload-tasks-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UploadTask-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UploadTaskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    upload_task_api = UploadTaskApi(client)\r\n    resp = upload_task_api.get_upload_tasks_connection({\"where\":{\"id\":\"UploadTask-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/upload_task\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        upload_task_api := client.UploadTask\r\n    params := upload_task.NewGetUploadTasksConnectionParams()\r\n    params.RequestBody = &models.GetUploadTasksConnectionRequestBody{\nWhere: &models.UploadTaskWhereInput{\nID: pointy.String(\"UploadTask-id\"),\n},\n}\r\n    rawResp, err := upload_task_api.GetUploadTasksConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UploadTaskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UploadTaskApi uploadTaskApi = new UploadTaskApi(client);\r\n        GetUploadTasksConnectionRequestBody params = new GetUploadTasksConnectionRequestBody()\n.where(new UploadTaskWhereInput()\n.id(\"UploadTask-id\"));\r\n        UploadTaskConnection resp = uploadTaskApi.getUploadTasksConnection(params);\r\n    }\r\n}"
  },
  "/get-usb-devices-connection": {
    "exampleValue": {
      "where": {
        "id": "UsbDevice-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-usb-devices-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UsbDevice-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UsbDeviceApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    usb_device_api = UsbDeviceApi(client)\r\n    resp = usb_device_api.get_usb_devices_connection({\"where\":{\"id\":\"UsbDevice-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/usb_device\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        usb_device_api := client.UsbDevice\r\n    params := usb_device.NewGetUsbDevicesConnectionParams()\r\n    params.RequestBody = &models.GetUsbDevicesConnectionRequestBody{\nWhere: &models.UsbDeviceWhereInput{\nID: pointy.String(\"UsbDevice-id\"),\n},\n}\r\n    rawResp, err := usb_device_api.GetUsbDevicesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UsbDeviceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UsbDeviceApi usbDeviceApi = new UsbDeviceApi(client);\r\n        GetUsbDevicesConnectionRequestBody params = new GetUsbDevicesConnectionRequestBody()\n.where(new UsbDeviceWhereInput()\n.id(\"UsbDevice-id\"));\r\n        UsbDeviceConnection resp = usbDeviceApi.getUsbDevicesConnection(params);\r\n    }\r\n}"
  },
  "/get-user-audit-logs": {
    "exampleValue": {
      "where": {
        "id": "UserAuditLog-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-user-audit-logs \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UserAuditLog-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserAuditLogApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_audit_log_api = UserAuditLogApi(client)\r\n    resp = user_audit_log_api.get_user_audit_logs({\"where\":{\"id\":\"UserAuditLog-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user_audit_log\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_audit_log_api := client.UserAuditLog\r\n    params := user_audit_log.NewGetUserAuditLogsParams()\r\n    params.RequestBody = &models.GetUserAuditLogsRequestBody{\nWhere: &models.UserAuditLogWhereInput{\nID: pointy.String(\"UserAuditLog-id\"),\n},\n}\r\n    rawResp, err := user_audit_log_api.GetUserAuditLogs(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UserAuditLogApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserAuditLogApi userAuditLogApi = new UserAuditLogApi(client);\r\n        GetUserAuditLogsRequestBody params = new GetUserAuditLogsRequestBody()\n.where(new UserAuditLogWhereInput()\n.id(\"UserAuditLog-id\"));\r\n        List<UserAuditLog> resp = userAuditLogApi.getUserAuditLogs(params);\r\n    }\r\n}"
  },
  "/get-user-audit-logs-connection": {
    "exampleValue": {
      "where": {
        "id": "UserAuditLog-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-user-audit-logs-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UserAuditLog-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserAuditLogApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_audit_log_api = UserAuditLogApi(client)\r\n    resp = user_audit_log_api.get_user_audit_logs_connection({\"where\":{\"id\":\"UserAuditLog-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user_audit_log\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_audit_log_api := client.UserAuditLog\r\n    params := user_audit_log.NewGetUserAuditLogsConnectionParams()\r\n    params.RequestBody = &models.GetUserAuditLogsConnectionRequestBody{\nWhere: &models.UserAuditLogWhereInput{\nID: pointy.String(\"UserAuditLog-id\"),\n},\n}\r\n    rawResp, err := user_audit_log_api.GetUserAuditLogsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UserAuditLogApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserAuditLogApi userAuditLogApi = new UserAuditLogApi(client);\r\n        GetUserAuditLogsConnectionRequestBody params = new GetUserAuditLogsConnectionRequestBody()\n.where(new UserAuditLogWhereInput()\n.id(\"UserAuditLog-id\"));\r\n        UserAuditLogConnection resp = userAuditLogApi.getUserAuditLogsConnection(params);\r\n    }\r\n}"
  },
  "/get-user-role-nexts": {
    "exampleValue": {
      "where": {
        "id": "UserRoleNext-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-user-role-nexts \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UserRoleNext-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserRoleNextApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_role_next_api = UserRoleNextApi(client)\r\n    resp = user_role_next_api.get_user_role_nexts({\"where\":{\"id\":\"UserRoleNext-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user_role_next\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_role_next_api := client.UserRoleNext\r\n    params := user_role_next.NewGetUserRoleNextsParams()\r\n    params.RequestBody = &models.GetUserRoleNextsRequestBody{\nWhere: &models.UserRoleNextWhereInput{\nID: pointy.String(\"UserRoleNext-id\"),\n},\n}\r\n    rawResp, err := user_role_next_api.GetUserRoleNexts(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UserRoleNextApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserRoleNextApi userRoleNextApi = new UserRoleNextApi(client);\r\n        GetUserRoleNextsRequestBody params = new GetUserRoleNextsRequestBody()\n.where(new UserRoleNextWhereInput()\n.id(\"UserRoleNext-id\"));\r\n        List<UserRoleNext> resp = userRoleNextApi.getUserRoleNexts(params);\r\n    }\r\n}"
  },
  "/get-user-role-nexts-connection": {
    "exampleValue": {
      "where": {
        "id": "UserRoleNext-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-user-role-nexts-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"UserRoleNext-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserRoleNextApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_role_next_api = UserRoleNextApi(client)\r\n    resp = user_role_next_api.get_user_role_nexts_connection({\"where\":{\"id\":\"UserRoleNext-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user_role_next\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_role_next_api := client.UserRoleNext\r\n    params := user_role_next.NewGetUserRoleNextsConnectionParams()\r\n    params.RequestBody = &models.GetUserRoleNextsConnectionRequestBody{\nWhere: &models.UserRoleNextWhereInput{\nID: pointy.String(\"UserRoleNext-id\"),\n},\n}\r\n    rawResp, err := user_role_next_api.GetUserRoleNextsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UserRoleNextApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserRoleNextApi userRoleNextApi = new UserRoleNextApi(client);\r\n        GetUserRoleNextsConnectionRequestBody params = new GetUserRoleNextsConnectionRequestBody()\n.where(new UserRoleNextWhereInput()\n.id(\"UserRoleNext-id\"));\r\n        UserRoleNextConnection resp = userRoleNextApi.getUserRoleNextsConnection(params);\r\n    }\r\n}"
  },
  "/get-users": {
    "exampleValue": {
      "where": {
        "id": "User-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-users \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"User-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_api = UserApi(client)\r\n    resp = user_api.get_users({\"where\":{\"id\":\"User-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_api := client.User\r\n    params := user.NewGetUsersParams()\r\n    params.RequestBody = &models.GetUsersRequestBody{\nWhere: &models.UserWhereInput{\nID: pointy.String(\"User-id\"),\n},\n}\r\n    rawResp, err := user_api.GetUsers(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UserApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserApi userApi = new UserApi(client);\r\n        GetUsersRequestBody params = new GetUsersRequestBody()\n.where(new UserWhereInput()\n.id(\"User-id\"));\r\n        List<User> resp = userApi.getUsers(params);\r\n    }\r\n}"
  },
  "/get-users-connection": {
    "exampleValue": {
      "where": {
        "id": "User-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-users-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"User-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, UserApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    user_api = UserApi(client)\r\n    resp = user_api.get_users_connection({\"where\":{\"id\":\"User-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/user\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        user_api := client.User\r\n    params := user.NewGetUsersConnectionParams()\r\n    params.RequestBody = &models.GetUsersConnectionRequestBody{\nWhere: &models.UserWhereInput{\nID: pointy.String(\"User-id\"),\n},\n}\r\n    rawResp, err := user_api.GetUsersConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.UserApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        UserApi userApi = new UserApi(client);\r\n        GetUsersConnectionRequestBody params = new GetUsersConnectionRequestBody()\n.where(new UserWhereInput()\n.id(\"User-id\"));\r\n        UserConnection resp = userApi.getUsersConnection(params);\r\n    }\r\n}"
  },
  "/get-vcenter-accounts": {
    "exampleValue": {
      "where": {
        "id": "VcenterAccount-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vcenter-accounts \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VcenterAccount-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VcenterAccountApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vcenter_account_api = VcenterAccountApi(client)\r\n    resp = vcenter_account_api.get_vcenter_accounts({\"where\":{\"id\":\"VcenterAccount-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vcenter_account\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vcenter_account_api := client.VcenterAccount\r\n    params := vcenter_account.NewGetVcenterAccountsParams()\r\n    params.RequestBody = &models.GetVcenterAccountsRequestBody{\nWhere: &models.VcenterAccountWhereInput{\nID: pointy.String(\"VcenterAccount-id\"),\n},\n}\r\n    rawResp, err := vcenter_account_api.GetVcenterAccounts(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VcenterAccountApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VcenterAccountApi vcenterAccountApi = new VcenterAccountApi(client);\r\n        GetVcenterAccountsRequestBody params = new GetVcenterAccountsRequestBody()\n.where(new VcenterAccountWhereInput()\n.id(\"VcenterAccount-id\"));\r\n        List<VcenterAccount> resp = vcenterAccountApi.getVcenterAccounts(params);\r\n    }\r\n}"
  },
  "/get-vcenter-accounts-connection": {
    "exampleValue": {
      "where": {
        "id": "VcenterAccount-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vcenter-accounts-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VcenterAccount-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VcenterAccountApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vcenter_account_api = VcenterAccountApi(client)\r\n    resp = vcenter_account_api.get_vcenter_accounts_connection({\"where\":{\"id\":\"VcenterAccount-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vcenter_account\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vcenter_account_api := client.VcenterAccount\r\n    params := vcenter_account.NewGetVcenterAccountsConnectionParams()\r\n    params.RequestBody = &models.GetVcenterAccountsConnectionRequestBody{\nWhere: &models.VcenterAccountWhereInput{\nID: pointy.String(\"VcenterAccount-id\"),\n},\n}\r\n    rawResp, err := vcenter_account_api.GetVcenterAccountsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VcenterAccountApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VcenterAccountApi vcenterAccountApi = new VcenterAccountApi(client);\r\n        GetVcenterAccountsConnectionRequestBody params = new GetVcenterAccountsConnectionRequestBody()\n.where(new VcenterAccountWhereInput()\n.id(\"VcenterAccount-id\"));\r\n        VcenterAccountConnection resp = vcenterAccountApi.getVcenterAccountsConnection(params);\r\n    }\r\n}"
  },
  "/get-vdses": {
    "exampleValue": {
      "where": {
        "id": "Vds-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vdses \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vds-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VdsApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vds_api = VdsApi(client)\r\n    resp = vds_api.get_vdses({\"where\":{\"id\":\"Vds-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vds\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vds_api := client.Vds\r\n    params := vds.NewGetVdsesParams()\r\n    params.RequestBody = &models.GetVdsesRequestBody{\nWhere: &models.VdsWhereInput{\nID: pointy.String(\"Vds-id\"),\n},\n}\r\n    rawResp, err := vds_api.GetVdses(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VdsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VdsApi vdsApi = new VdsApi(client);\r\n        GetVdsesRequestBody params = new GetVdsesRequestBody()\n.where(new VdsWhereInput()\n.id(\"Vds-id\"));\r\n        List<Vds> resp = vdsApi.getVdses(params);\r\n    }\r\n}"
  },
  "/get-vdses-connection": {
    "exampleValue": {
      "where": {
        "id": "Vds-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vdses-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vds-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VdsApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vds_api = VdsApi(client)\r\n    resp = vds_api.get_vdses_connection({\"where\":{\"id\":\"Vds-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vds\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vds_api := client.Vds\r\n    params := vds.NewGetVdsesConnectionParams()\r\n    params.RequestBody = &models.GetVdsesConnectionRequestBody{\nWhere: &models.VdsWhereInput{\nID: pointy.String(\"Vds-id\"),\n},\n}\r\n    rawResp, err := vds_api.GetVdsesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VdsApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VdsApi vdsApi = new VdsApi(client);\r\n        GetVdsesConnectionRequestBody params = new GetVdsesConnectionRequestBody()\n.where(new VdsWhereInput()\n.id(\"Vds-id\"));\r\n        VdsConnection resp = vdsApi.getVdsesConnection(params);\r\n    }\r\n}"
  },
  "/get-views": {
    "exampleValue": {
      "where": {
        "id": "View-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-views \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"View-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ViewApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    view_api = ViewApi(client)\r\n    resp = view_api.get_views({\"where\":{\"id\":\"View-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/view\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        view_api := client.View\r\n    params := view.NewGetViewsParams()\r\n    params.RequestBody = &models.GetViewsRequestBody{\nWhere: &models.ViewWhereInput{\nID: pointy.String(\"View-id\"),\n},\n}\r\n    rawResp, err := view_api.GetViews(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ViewApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ViewApi viewApi = new ViewApi(client);\r\n        GetViewsRequestBody params = new GetViewsRequestBody()\n.where(new ViewWhereInput()\n.id(\"View-id\"));\r\n        List<View> resp = viewApi.getViews(params);\r\n    }\r\n}"
  },
  "/get-views-connection": {
    "exampleValue": {
      "where": {
        "id": "View-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-views-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"View-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ViewApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    view_api = ViewApi(client)\r\n    resp = view_api.get_views_connection({\"where\":{\"id\":\"View-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/view\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        view_api := client.View\r\n    params := view.NewGetViewsConnectionParams()\r\n    params.RequestBody = &models.GetViewsConnectionRequestBody{\nWhere: &models.ViewWhereInput{\nID: pointy.String(\"View-id\"),\n},\n}\r\n    rawResp, err := view_api.GetViewsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ViewApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ViewApi viewApi = new ViewApi(client);\r\n        GetViewsConnectionRequestBody params = new GetViewsConnectionRequestBody()\n.where(new ViewWhereInput()\n.id(\"View-id\"));\r\n        ViewConnection resp = viewApi.getViewsConnection(params);\r\n    }\r\n}"
  },
  "/get-vlans": {
    "exampleValue": {
      "where": {
        "id": "Vlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vlans \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VlanApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vlan_api = VlanApi(client)\r\n    resp = vlan_api.get_vlans({\"where\":{\"id\":\"Vlan-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vlan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vlan_api := client.Vlan\r\n    params := vlan.NewGetVlansParams()\r\n    params.RequestBody = &models.GetVlansRequestBody{\nWhere: &models.VlanWhereInput{\nID: pointy.String(\"Vlan-id\"),\n},\n}\r\n    rawResp, err := vlan_api.GetVlans(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VlanApi vlanApi = new VlanApi(client);\r\n        GetVlansRequestBody params = new GetVlansRequestBody()\n.where(new VlanWhereInput()\n.id(\"Vlan-id\"));\r\n        List<Vlan> resp = vlanApi.getVlans(params);\r\n    }\r\n}"
  },
  "/get-vlans-connection": {
    "exampleValue": {
      "where": {
        "id": "Vlan-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vlans-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vlan-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VlanApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vlan_api = VlanApi(client)\r\n    resp = vlan_api.get_vlans_connection({\"where\":{\"id\":\"Vlan-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vlan\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vlan_api := client.Vlan\r\n    params := vlan.NewGetVlansConnectionParams()\r\n    params.RequestBody = &models.GetVlansConnectionRequestBody{\nWhere: &models.VlanWhereInput{\nID: pointy.String(\"Vlan-id\"),\n},\n}\r\n    rawResp, err := vlan_api.GetVlansConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VlanApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VlanApi vlanApi = new VlanApi(client);\r\n        GetVlansConnectionRequestBody params = new GetVlansConnectionRequestBody()\n.where(new VlanWhereInput()\n.id(\"Vlan-id\"));\r\n        VlanConnection resp = vlanApi.getVlansConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-disks": {
    "exampleValue": {
      "where": {
        "id": "VmDisk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-disks \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmDisk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmDiskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_disk_api = VmDiskApi(client)\r\n    resp = vm_disk_api.get_vm_disks({\"where\":{\"id\":\"VmDisk-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_disk\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_disk_api := client.VMDisk\r\n    params := vm_disk.NewGetVMDisksParams()\r\n    params.RequestBody = &models.GetVMDisksRequestBody{\nWhere: &models.VMDiskWhereInput{\nID: pointy.String(\"VmDisk-id\"),\n},\n}\r\n    rawResp, err := vm_disk_api.GetVMDisks(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmDiskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmDiskApi vmDiskApi = new VmDiskApi(client);\r\n        GetVmDisksRequestBody params = new GetVmDisksRequestBody()\n.where(new VmDiskWhereInput()\n.id(\"VmDisk-id\"));\r\n        List<VmDisk> resp = vmDiskApi.getVmDisks(params);\r\n    }\r\n}"
  },
  "/get-vm-disks-connection": {
    "exampleValue": {
      "where": {
        "id": "VmDisk-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-disks-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmDisk-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmDiskApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_disk_api = VmDiskApi(client)\r\n    resp = vm_disk_api.get_vm_disks_connection({\"where\":{\"id\":\"VmDisk-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_disk\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_disk_api := client.VMDisk\r\n    params := vm_disk.NewGetVMDisksConnectionParams()\r\n    params.RequestBody = &models.GetVMDisksConnectionRequestBody{\nWhere: &models.VMDiskWhereInput{\nID: pointy.String(\"VmDisk-id\"),\n},\n}\r\n    rawResp, err := vm_disk_api.GetVMDisksConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmDiskApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmDiskApi vmDiskApi = new VmDiskApi(client);\r\n        GetVmDisksConnectionRequestBody params = new GetVmDisksConnectionRequestBody()\n.where(new VmDiskWhereInput()\n.id(\"VmDisk-id\"));\r\n        VmDiskConnection resp = vmDiskApi.getVmDisksConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-entity-filter-results": {
    "exampleValue": {
      "where": {
        "id": "VmEntityFilterResult-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-entity-filter-results \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmEntityFilterResult-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmEntityFilterResultApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_entity_filter_result_api = VmEntityFilterResultApi(client)\r\n    resp = vm_entity_filter_result_api.get_vm_entity_filter_results({\"where\":{\"id\":\"VmEntityFilterResult-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_entity_filter_result\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_entity_filter_result_api := client.VMEntityFilterResult\r\n    params := vm_entity_filter_result.NewGetVMEntityFilterResultsParams()\r\n    params.RequestBody = &models.GetVMEntityFilterResultsRequestBody{\nWhere: &models.VMEntityFilterResultWhereInput{\nID: pointy.String(\"VmEntityFilterResult-id\"),\n},\n}\r\n    rawResp, err := vm_entity_filter_result_api.GetVMEntityFilterResults(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmEntityFilterResultApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmEntityFilterResultApi vmEntityFilterResultApi = new VmEntityFilterResultApi(client);\r\n        GetVmEntityFilterResultsRequestBody params = new GetVmEntityFilterResultsRequestBody()\n.where(new VmEntityFilterResultWhereInput()\n.id(\"VmEntityFilterResult-id\"));\r\n        List<VmEntityFilterResult> resp = vmEntityFilterResultApi.getVmEntityFilterResults(params);\r\n    }\r\n}"
  },
  "/get-vm-entity-filter-results-connection": {
    "exampleValue": {
      "where": {
        "id": "VmEntityFilterResult-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-entity-filter-results-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmEntityFilterResult-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmEntityFilterResultApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_entity_filter_result_api = VmEntityFilterResultApi(client)\r\n    resp = vm_entity_filter_result_api.get_vm_entity_filter_results_connection({\"where\":{\"id\":\"VmEntityFilterResult-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_entity_filter_result\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_entity_filter_result_api := client.VMEntityFilterResult\r\n    params := vm_entity_filter_result.NewGetVMEntityFilterResultsConnectionParams()\r\n    params.RequestBody = &models.GetVMEntityFilterResultsConnectionRequestBody{\nWhere: &models.VMEntityFilterResultWhereInput{\nID: pointy.String(\"VmEntityFilterResult-id\"),\n},\n}\r\n    rawResp, err := vm_entity_filter_result_api.GetVMEntityFilterResultsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmEntityFilterResultApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmEntityFilterResultApi vmEntityFilterResultApi = new VmEntityFilterResultApi(client);\r\n        GetVmEntityFilterResultsConnectionRequestBody params = new GetVmEntityFilterResultsConnectionRequestBody()\n.where(new VmEntityFilterResultWhereInput()\n.id(\"VmEntityFilterResult-id\"));\r\n        VmEntityFilterResultConnection resp = vmEntityFilterResultApi.getVmEntityFilterResultsConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-export-files": {
    "exampleValue": {
      "where": {
        "id": "VmExportFile-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-export-files \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmExportFile-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmExportFileApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_export_file_api = VmExportFileApi(client)\r\n    resp = vm_export_file_api.get_vm_export_files({\"where\":{\"id\":\"VmExportFile-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_export_file\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_export_file_api := client.VMExportFile\r\n    params := vm_export_file.NewGetVMExportFilesParams()\r\n    params.RequestBody = &models.GetVMExportFilesRequestBody{\nWhere: &models.VMExportFileWhereInput{\nID: pointy.String(\"VmExportFile-id\"),\n},\n}\r\n    rawResp, err := vm_export_file_api.GetVMExportFiles(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmExportFileApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmExportFileApi vmExportFileApi = new VmExportFileApi(client);\r\n        GetVmExportFilesRequestBody params = new GetVmExportFilesRequestBody()\n.where(new VmExportFileWhereInput()\n.id(\"VmExportFile-id\"));\r\n        List<VmExportFile> resp = vmExportFileApi.getVmExportFiles(params);\r\n    }\r\n}"
  },
  "/get-vm-export-files-connection": {
    "exampleValue": {
      "where": {
        "id": "VmExportFile-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-export-files-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmExportFile-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmExportFileApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_export_file_api = VmExportFileApi(client)\r\n    resp = vm_export_file_api.get_vm_export_files_connection({\"where\":{\"id\":\"VmExportFile-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_export_file\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_export_file_api := client.VMExportFile\r\n    params := vm_export_file.NewGetVMExportFilesConnectionParams()\r\n    params.RequestBody = &models.GetVMExportFilesConnectionRequestBody{\nWhere: &models.VMExportFileWhereInput{\nID: pointy.String(\"VmExportFile-id\"),\n},\n}\r\n    rawResp, err := vm_export_file_api.GetVMExportFilesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmExportFileApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmExportFileApi vmExportFileApi = new VmExportFileApi(client);\r\n        GetVmExportFilesConnectionRequestBody params = new GetVmExportFilesConnectionRequestBody()\n.where(new VmExportFileWhereInput()\n.id(\"VmExportFile-id\"));\r\n        VmExportFileConnection resp = vmExportFileApi.getVmExportFilesConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-folders": {
    "exampleValue": {
      "where": {
        "id": "VmFolder-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-folders \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmFolder-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmFolderApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_folder_api = VmFolderApi(client)\r\n    resp = vm_folder_api.get_vm_folders({\"where\":{\"id\":\"VmFolder-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_folder\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_folder_api := client.VMFolder\r\n    params := vm_folder.NewGetVMFoldersParams()\r\n    params.RequestBody = &models.GetVMFoldersRequestBody{\nWhere: &models.VMFolderWhereInput{\nID: pointy.String(\"VmFolder-id\"),\n},\n}\r\n    rawResp, err := vm_folder_api.GetVMFolders(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmFolderApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmFolderApi vmFolderApi = new VmFolderApi(client);\r\n        GetVmFoldersRequestBody params = new GetVmFoldersRequestBody()\n.where(new VmFolderWhereInput()\n.id(\"VmFolder-id\"));\r\n        List<VmFolder> resp = vmFolderApi.getVmFolders(params);\r\n    }\r\n}"
  },
  "/get-vm-folders-connection": {
    "exampleValue": {
      "where": {
        "id": "VmFolder-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-folders-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmFolder-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmFolderApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_folder_api = VmFolderApi(client)\r\n    resp = vm_folder_api.get_vm_folders_connection({\"where\":{\"id\":\"VmFolder-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_folder\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_folder_api := client.VMFolder\r\n    params := vm_folder.NewGetVMFoldersConnectionParams()\r\n    params.RequestBody = &models.GetVMFoldersConnectionRequestBody{\nWhere: &models.VMFolderWhereInput{\nID: pointy.String(\"VmFolder-id\"),\n},\n}\r\n    rawResp, err := vm_folder_api.GetVMFoldersConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmFolderApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmFolderApi vmFolderApi = new VmFolderApi(client);\r\n        GetVmFoldersConnectionRequestBody params = new GetVmFoldersConnectionRequestBody()\n.where(new VmFolderWhereInput()\n.id(\"VmFolder-id\"));\r\n        VmFolderConnection resp = vmFolderApi.getVmFoldersConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-nics": {
    "exampleValue": {
      "where": {
        "id": "VmNic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-nics \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmNic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmNicApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_nic_api = VmNicApi(client)\r\n    resp = vm_nic_api.get_vm_nics({\"where\":{\"id\":\"VmNic-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_nic\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_nic_api := client.VMNic\r\n    params := vm_nic.NewGetVMNicsParams()\r\n    params.RequestBody = &models.GetVMNicsRequestBody{\nWhere: &models.VMNicWhereInput{\nID: pointy.String(\"VmNic-id\"),\n},\n}\r\n    rawResp, err := vm_nic_api.GetVMNics(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmNicApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmNicApi vmNicApi = new VmNicApi(client);\r\n        GetVmNicsRequestBody params = new GetVmNicsRequestBody()\n.where(new VmNicWhereInput()\n.id(\"VmNic-id\"));\r\n        List<VmNic> resp = vmNicApi.getVmNics(params);\r\n    }\r\n}"
  },
  "/get-vm-nics-connection": {
    "exampleValue": {
      "where": {
        "id": "VmNic-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-nics-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmNic-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmNicApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_nic_api = VmNicApi(client)\r\n    resp = vm_nic_api.get_vm_nics_connection({\"where\":{\"id\":\"VmNic-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_nic\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_nic_api := client.VMNic\r\n    params := vm_nic.NewGetVMNicsConnectionParams()\r\n    params.RequestBody = &models.GetVMNicsConnectionRequestBody{\nWhere: &models.VMNicWhereInput{\nID: pointy.String(\"VmNic-id\"),\n},\n}\r\n    rawResp, err := vm_nic_api.GetVMNicsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmNicApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmNicApi vmNicApi = new VmNicApi(client);\r\n        GetVmNicsConnectionRequestBody params = new GetVmNicsConnectionRequestBody()\n.where(new VmNicWhereInput()\n.id(\"VmNic-id\"));\r\n        VmNicConnection resp = vmNicApi.getVmNicsConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-placement-groups": {
    "exampleValue": {
      "where": {
        "id": "VmPlacementGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-placement-groups \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmPlacementGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmPlacementGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_placement_group_api = VmPlacementGroupApi(client)\r\n    resp = vm_placement_group_api.get_vm_placement_groups({\"where\":{\"id\":\"VmPlacementGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_placement_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_placement_group_api := client.VMPlacementGroup\r\n    params := vm_placement_group.NewGetVMPlacementGroupsParams()\r\n    params.RequestBody = &models.GetVMPlacementGroupsRequestBody{\nWhere: &models.VMPlacementGroupWhereInput{\nID: pointy.String(\"VmPlacementGroup-id\"),\n},\n}\r\n    rawResp, err := vm_placement_group_api.GetVMPlacementGroups(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmPlacementGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmPlacementGroupApi vmPlacementGroupApi = new VmPlacementGroupApi(client);\r\n        GetVmPlacementGroupsRequestBody params = new GetVmPlacementGroupsRequestBody()\n.where(new VmPlacementGroupWhereInput()\n.id(\"VmPlacementGroup-id\"));\r\n        List<VmPlacementGroup> resp = vmPlacementGroupApi.getVmPlacementGroups(params);\r\n    }\r\n}"
  },
  "/get-vm-placement-groups-connection": {
    "exampleValue": {
      "where": {
        "id": "VmPlacementGroup-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-placement-groups-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmPlacementGroup-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmPlacementGroupApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_placement_group_api = VmPlacementGroupApi(client)\r\n    resp = vm_placement_group_api.get_vm_placement_groups_connection({\"where\":{\"id\":\"VmPlacementGroup-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_placement_group\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_placement_group_api := client.VMPlacementGroup\r\n    params := vm_placement_group.NewGetVMPlacementGroupsConnectionParams()\r\n    params.RequestBody = &models.GetVMPlacementGroupsConnectionRequestBody{\nWhere: &models.VMPlacementGroupWhereInput{\nID: pointy.String(\"VmPlacementGroup-id\"),\n},\n}\r\n    rawResp, err := vm_placement_group_api.GetVMPlacementGroupsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmPlacementGroupApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmPlacementGroupApi vmPlacementGroupApi = new VmPlacementGroupApi(client);\r\n        GetVmPlacementGroupsConnectionRequestBody params = new GetVmPlacementGroupsConnectionRequestBody()\n.where(new VmPlacementGroupWhereInput()\n.id(\"VmPlacementGroup-id\"));\r\n        VmPlacementGroupConnection resp = vmPlacementGroupApi.getVmPlacementGroupsConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-snapshots": {
    "exampleValue": {
      "where": {
        "id": "VmSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-snapshots \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_snapshot_api = VmSnapshotApi(client)\r\n    resp = vm_snapshot_api.get_vm_snapshots({\"where\":{\"id\":\"VmSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_snapshot_api := client.VMSnapshot\r\n    params := vm_snapshot.NewGetVMSnapshotsParams()\r\n    params.RequestBody = &models.GetVMSnapshotsRequestBody{\nWhere: &models.VMSnapshotWhereInput{\nID: pointy.String(\"VmSnapshot-id\"),\n},\n}\r\n    rawResp, err := vm_snapshot_api.GetVMSnapshots(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmSnapshotApi vmSnapshotApi = new VmSnapshotApi(client);\r\n        GetVmSnapshotsRequestBody params = new GetVmSnapshotsRequestBody()\n.where(new VmSnapshotWhereInput()\n.id(\"VmSnapshot-id\"));\r\n        List<VmSnapshot> resp = vmSnapshotApi.getVmSnapshots(params);\r\n    }\r\n}"
  },
  "/get-vm-snapshots-connection": {
    "exampleValue": {
      "where": {
        "id": "VmSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-snapshots-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_snapshot_api = VmSnapshotApi(client)\r\n    resp = vm_snapshot_api.get_vm_snapshots_connection({\"where\":{\"id\":\"VmSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_snapshot_api := client.VMSnapshot\r\n    params := vm_snapshot.NewGetVMSnapshotsConnectionParams()\r\n    params.RequestBody = &models.GetVMSnapshotsConnectionRequestBody{\nWhere: &models.VMSnapshotWhereInput{\nID: pointy.String(\"VmSnapshot-id\"),\n},\n}\r\n    rawResp, err := vm_snapshot_api.GetVMSnapshotsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmSnapshotApi vmSnapshotApi = new VmSnapshotApi(client);\r\n        GetVmSnapshotsConnectionRequestBody params = new GetVmSnapshotsConnectionRequestBody()\n.where(new VmSnapshotWhereInput()\n.id(\"VmSnapshot-id\"));\r\n        VmSnapshotConnection resp = vmSnapshotApi.getVmSnapshotsConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-templates": {
    "exampleValue": {
      "where": {
        "id": "VmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-templates \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmTemplateApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_template_api = VmTemplateApi(client)\r\n    resp = vm_template_api.get_vm_templates({\"where\":{\"id\":\"VmTemplate-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_template_api := client.VMTemplate\r\n    params := vm_template.NewGetVMTemplatesParams()\r\n    params.RequestBody = &models.GetVMTemplatesRequestBody{\nWhere: &models.VMTemplateWhereInput{\nID: pointy.String(\"VmTemplate-id\"),\n},\n}\r\n    rawResp, err := vm_template_api.GetVMTemplates(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmTemplateApi vmTemplateApi = new VmTemplateApi(client);\r\n        GetVmTemplatesRequestBody params = new GetVmTemplatesRequestBody()\n.where(new VmTemplateWhereInput()\n.id(\"VmTemplate-id\"));\r\n        List<VmTemplate> resp = vmTemplateApi.getVmTemplates(params);\r\n    }\r\n}"
  },
  "/get-vm-templates-connection": {
    "exampleValue": {
      "where": {
        "id": "VmTemplate-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-templates-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmTemplate-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmTemplateApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_template_api = VmTemplateApi(client)\r\n    resp = vm_template_api.get_vm_templates_connection({\"where\":{\"id\":\"VmTemplate-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_template\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_template_api := client.VMTemplate\r\n    params := vm_template.NewGetVMTemplatesConnectionParams()\r\n    params.RequestBody = &models.GetVMTemplatesConnectionRequestBody{\nWhere: &models.VMTemplateWhereInput{\nID: pointy.String(\"VmTemplate-id\"),\n},\n}\r\n    rawResp, err := vm_template_api.GetVMTemplatesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmTemplateApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmTemplateApi vmTemplateApi = new VmTemplateApi(client);\r\n        GetVmTemplatesConnectionRequestBody params = new GetVmTemplatesConnectionRequestBody()\n.where(new VmTemplateWhereInput()\n.id(\"VmTemplate-id\"));\r\n        VmTemplateConnection resp = vmTemplateApi.getVmTemplatesConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-volume-snapshots": {
    "exampleValue": {
      "where": {
        "id": "VmVolumeSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-volume-snapshots \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmVolumeSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_snapshot_api = VmVolumeSnapshotApi(client)\r\n    resp = vm_volume_snapshot_api.get_vm_volume_snapshots({\"where\":{\"id\":\"VmVolumeSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_snapshot_api := client.VMVolumeSnapshot\r\n    params := vm_volume_snapshot.NewGetVMVolumeSnapshotsParams()\r\n    params.RequestBody = &models.GetVMVolumeSnapshotsRequestBody{\nWhere: &models.VMVolumeSnapshotWhereInput{\nID: pointy.String(\"VmVolumeSnapshot-id\"),\n},\n}\r\n    rawResp, err := vm_volume_snapshot_api.GetVMVolumeSnapshots(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmVolumeSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeSnapshotApi vmVolumeSnapshotApi = new VmVolumeSnapshotApi(client);\r\n        GetVmVolumeSnapshotsRequestBody params = new GetVmVolumeSnapshotsRequestBody()\n.where(new VmVolumeSnapshotWhereInput()\n.id(\"VmVolumeSnapshot-id\"));\r\n        List<VmVolumeSnapshot> resp = vmVolumeSnapshotApi.getVmVolumeSnapshots(params);\r\n    }\r\n}"
  },
  "/get-vm-volume-snapshots-connection": {
    "exampleValue": {
      "where": {
        "id": "VmVolumeSnapshot-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-volume-snapshots-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmVolumeSnapshot-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeSnapshotApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_snapshot_api = VmVolumeSnapshotApi(client)\r\n    resp = vm_volume_snapshot_api.get_vm_volume_snapshots_connection({\"where\":{\"id\":\"VmVolumeSnapshot-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume_snapshot\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_snapshot_api := client.VMVolumeSnapshot\r\n    params := vm_volume_snapshot.NewGetVMVolumeSnapshotsConnectionParams()\r\n    params.RequestBody = &models.GetVMVolumeSnapshotsConnectionRequestBody{\nWhere: &models.VMVolumeSnapshotWhereInput{\nID: pointy.String(\"VmVolumeSnapshot-id\"),\n},\n}\r\n    rawResp, err := vm_volume_snapshot_api.GetVMVolumeSnapshotsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmVolumeSnapshotApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeSnapshotApi vmVolumeSnapshotApi = new VmVolumeSnapshotApi(client);\r\n        GetVmVolumeSnapshotsConnectionRequestBody params = new GetVmVolumeSnapshotsConnectionRequestBody()\n.where(new VmVolumeSnapshotWhereInput()\n.id(\"VmVolumeSnapshot-id\"));\r\n        VmVolumeSnapshotConnection resp = vmVolumeSnapshotApi.getVmVolumeSnapshotsConnection(params);\r\n    }\r\n}"
  },
  "/get-vm-volumes": {
    "exampleValue": {
      "where": {
        "id": "VmVolume-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-volumes \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmVolume-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.get_vm_volumes({\"where\":{\"id\":\"VmVolume-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewGetVMVolumesParams()\r\n    params.RequestBody = &models.GetVMVolumesRequestBody{\nWhere: &models.VMVolumeWhereInput{\nID: pointy.String(\"VmVolume-id\"),\n},\n}\r\n    rawResp, err := vm_volume_api.GetVMVolumes(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        GetVmVolumesRequestBody params = new GetVmVolumesRequestBody()\n.where(new VmVolumeWhereInput()\n.id(\"VmVolume-id\"));\r\n        List<VmVolume> resp = vmVolumeApi.getVmVolumes(params);\r\n    }\r\n}"
  },
  "/get-vm-volumes-connection": {
    "exampleValue": {
      "where": {
        "id": "VmVolume-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vm-volumes-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VmVolume-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmVolumeApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_volume_api = VmVolumeApi(client)\r\n    resp = vm_volume_api.get_vm_volumes_connection({\"where\":{\"id\":\"VmVolume-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm_volume\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_volume_api := client.VMVolume\r\n    params := vm_volume.NewGetVMVolumesConnectionParams()\r\n    params.RequestBody = &models.GetVMVolumesConnectionRequestBody{\nWhere: &models.VMVolumeWhereInput{\nID: pointy.String(\"VmVolume-id\"),\n},\n}\r\n    rawResp, err := vm_volume_api.GetVMVolumesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmVolumeApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmVolumeApi vmVolumeApi = new VmVolumeApi(client);\r\n        GetVmVolumesConnectionRequestBody params = new GetVmVolumesConnectionRequestBody()\n.where(new VmVolumeWhereInput()\n.id(\"VmVolume-id\"));\r\n        VmVolumeConnection resp = vmVolumeApi.getVmVolumesConnection(params);\r\n    }\r\n}"
  },
  "/get-vms": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vms \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.get_vms({\"where\":{\"id\":\"Vm-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewGetVmsParams()\r\n    params.RequestBody = &models.GetVmsRequestBody{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.GetVms(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        GetVmsRequestBody params = new GetVmsRequestBody()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        List<Vm> resp = vmApi.getVms(params);\r\n    }\r\n}"
  },
  "/get-vms-connection": {
    "exampleValue": {
      "where": {
        "id": "Vm-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vms-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Vm-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VmApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vm_api = VmApi(client)\r\n    resp = vm_api.get_vms_connection({\"where\":{\"id\":\"Vm-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vm\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vm_api := client.VM\r\n    params := vm.NewGetVmsConnectionParams()\r\n    params.RequestBody = &models.GetVmsConnectionRequestBody{\nWhere: &models.VMWhereInput{\nID: pointy.String(\"Vm-id\"),\n},\n}\r\n    rawResp, err := vm_api.GetVmsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VmApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VmApi vmApi = new VmApi(client);\r\n        GetVmsConnectionRequestBody params = new GetVmsConnectionRequestBody()\n.where(new VmWhereInput()\n.id(\"Vm-id\"));\r\n        VmConnection resp = vmApi.getVmsConnection(params);\r\n    }\r\n}"
  },
  "/get-vsphere-esxi-accounts": {
    "exampleValue": {
      "where": {
        "id": "VsphereEsxiAccount-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vsphere-esxi-accounts \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VsphereEsxiAccount-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VsphereEsxiAccountApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vsphere_esxi_account_api = VsphereEsxiAccountApi(client)\r\n    resp = vsphere_esxi_account_api.get_vsphere_esxi_accounts({\"where\":{\"id\":\"VsphereEsxiAccount-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vsphere_esxi_account\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vsphere_esxi_account_api := client.VsphereEsxiAccount\r\n    params := vsphere_esxi_account.NewGetVsphereEsxiAccountsParams()\r\n    params.RequestBody = &models.GetVsphereEsxiAccountsRequestBody{\nWhere: &models.VsphereEsxiAccountWhereInput{\nID: pointy.String(\"VsphereEsxiAccount-id\"),\n},\n}\r\n    rawResp, err := vsphere_esxi_account_api.GetVsphereEsxiAccounts(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VsphereEsxiAccountApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VsphereEsxiAccountApi vsphereEsxiAccountApi = new VsphereEsxiAccountApi(client);\r\n        GetVsphereEsxiAccountsRequestBody params = new GetVsphereEsxiAccountsRequestBody()\n.where(new VsphereEsxiAccountWhereInput()\n.id(\"VsphereEsxiAccount-id\"));\r\n        List<VsphereEsxiAccount> resp = vsphereEsxiAccountApi.getVsphereEsxiAccounts(params);\r\n    }\r\n}"
  },
  "/get-vsphere-esxi-accounts-connection": {
    "exampleValue": {
      "where": {
        "id": "VsphereEsxiAccount-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-vsphere-esxi-accounts-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"VsphereEsxiAccount-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, VsphereEsxiAccountApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    vsphere_esxi_account_api = VsphereEsxiAccountApi(client)\r\n    resp = vsphere_esxi_account_api.get_vsphere_esxi_accounts_connection({\"where\":{\"id\":\"VsphereEsxiAccount-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/vsphere_esxi_account\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        vsphere_esxi_account_api := client.VsphereEsxiAccount\r\n    params := vsphere_esxi_account.NewGetVsphereEsxiAccountsConnectionParams()\r\n    params.RequestBody = &models.GetVsphereEsxiAccountsConnectionRequestBody{\nWhere: &models.VsphereEsxiAccountWhereInput{\nID: pointy.String(\"VsphereEsxiAccount-id\"),\n},\n}\r\n    rawResp, err := vsphere_esxi_account_api.GetVsphereEsxiAccountsConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.VsphereEsxiAccountApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        VsphereEsxiAccountApi vsphereEsxiAccountApi = new VsphereEsxiAccountApi(client);\r\n        GetVsphereEsxiAccountsConnectionRequestBody params = new GetVsphereEsxiAccountsConnectionRequestBody()\n.where(new VsphereEsxiAccountWhereInput()\n.id(\"VsphereEsxiAccount-id\"));\r\n        VsphereEsxiAccountConnection resp = vsphereEsxiAccountApi.getVsphereEsxiAccountsConnection(params);\r\n    }\r\n}"
  },
  "/get-witness-services": {
    "exampleValue": {
      "where": {
        "id": "Witness-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-witness-services \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Witness-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, WitnessServiceApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    witness_service_api = WitnessServiceApi(client)\r\n    resp = witness_service_api.get_witness_services({\"where\":{\"id\":\"Witness-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/witness_service\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        witness_service_api := client.WitnessService\r\n    params := witness_service.NewGetWitnessServicesParams()\r\n    params.RequestBody = &models.GetWitnessServicesRequestBody{\nWhere: &models.WitnessWhereUniqueInput{\nID: pointy.String(\"Witness-id\"),\n},\n}\r\n    rawResp, err := witness_service_api.GetWitnessServices(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.WitnessServiceApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        WitnessServiceApi witnessServiceApi = new WitnessServiceApi(client);\r\n        GetWitnessServicesRequestBody params = new GetWitnessServicesRequestBody()\n.where(new WitnessWhereUniqueInput()\n.id(\"Witness-id\"));\r\n        List<WitnessService> resp = witnessServiceApi.getWitnessServices(params);\r\n    }\r\n}"
  },
  "/get-witnesses": {
    "exampleValue": {
      "where": {
        "id": "Witness-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-witnesses \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Witness-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, WitnessApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    witness_api = WitnessApi(client)\r\n    resp = witness_api.get_witnesses({\"where\":{\"id\":\"Witness-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/witness\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        witness_api := client.Witness\r\n    params := witness.NewGetWitnessesParams()\r\n    params.RequestBody = &models.GetWitnessesRequestBody{\nWhere: &models.WitnessWhereInput{\nID: pointy.String(\"Witness-id\"),\n},\n}\r\n    rawResp, err := witness_api.GetWitnesses(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.WitnessApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        WitnessApi witnessApi = new WitnessApi(client);\r\n        GetWitnessesRequestBody params = new GetWitnessesRequestBody()\n.where(new WitnessWhereInput()\n.id(\"Witness-id\"));\r\n        List<Witness> resp = witnessApi.getWitnesses(params);\r\n    }\r\n}"
  },
  "/get-witnesses-connection": {
    "exampleValue": {
      "where": {
        "id": "Witness-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-witnesses-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Witness-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, WitnessApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    witness_api = WitnessApi(client)\r\n    resp = witness_api.get_witnesses_connection({\"where\":{\"id\":\"Witness-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/witness\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        witness_api := client.Witness\r\n    params := witness.NewGetWitnessesConnectionParams()\r\n    params.RequestBody = &models.GetWitnessesConnectionRequestBody{\nWhere: &models.WitnessWhereInput{\nID: pointy.String(\"Witness-id\"),\n},\n}\r\n    rawResp, err := witness_api.GetWitnessesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.WitnessApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        WitnessApi witnessApi = new WitnessApi(client);\r\n        GetWitnessesConnectionRequestBody params = new GetWitnessesConnectionRequestBody()\n.where(new WitnessWhereInput()\n.id(\"Witness-id\"));\r\n        WitnessConnection resp = witnessApi.getWitnessesConnection(params);\r\n    }\r\n}"
  },
  "/get-zone-topoes": {
    "exampleValue": {
      "where": {
        "id": "ZoneTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-zone-topoes \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ZoneTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ZoneTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    zone_topo_api = ZoneTopoApi(client)\r\n    resp = zone_topo_api.get_zone_topoes({\"where\":{\"id\":\"ZoneTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/zone_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        zone_topo_api := client.ZoneTopo\r\n    params := zone_topo.NewGetZoneTopoesParams()\r\n    params.RequestBody = &models.GetZoneTopoesRequestBody{\nWhere: &models.ZoneTopoWhereInput{\nID: pointy.String(\"ZoneTopo-id\"),\n},\n}\r\n    rawResp, err := zone_topo_api.GetZoneTopoes(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ZoneTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ZoneTopoApi zoneTopoApi = new ZoneTopoApi(client);\r\n        GetZoneTopoesRequestBody params = new GetZoneTopoesRequestBody()\n.where(new ZoneTopoWhereInput()\n.id(\"ZoneTopo-id\"));\r\n        List<ZoneTopo> resp = zoneTopoApi.getZoneTopoes(params);\r\n    }\r\n}"
  },
  "/get-zone-topoes-connection": {
    "exampleValue": {
      "where": {
        "id": "ZoneTopo-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-zone-topoes-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"ZoneTopo-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ZoneTopoApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    zone_topo_api = ZoneTopoApi(client)\r\n    resp = zone_topo_api.get_zone_topoes_connection({\"where\":{\"id\":\"ZoneTopo-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/zone_topo\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        zone_topo_api := client.ZoneTopo\r\n    params := zone_topo.NewGetZoneTopoesConnectionParams()\r\n    params.RequestBody = &models.GetZoneTopoesConnectionRequestBody{\nWhere: &models.ZoneTopoWhereInput{\nID: pointy.String(\"ZoneTopo-id\"),\n},\n}\r\n    rawResp, err := zone_topo_api.GetZoneTopoesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ZoneTopoApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ZoneTopoApi zoneTopoApi = new ZoneTopoApi(client);\r\n        GetZoneTopoesConnectionRequestBody params = new GetZoneTopoesConnectionRequestBody()\n.where(new ZoneTopoWhereInput()\n.id(\"ZoneTopo-id\"));\r\n        ZoneTopoConnection resp = zoneTopoApi.getZoneTopoesConnection(params);\r\n    }\r\n}"
  },
  "/get-zones": {
    "exampleValue": {
      "where": {
        "id": "Zone-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-zones \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Zone-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ZoneApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    zone_api = ZoneApi(client)\r\n    resp = zone_api.get_zones({\"where\":{\"id\":\"Zone-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/zone\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        zone_api := client.Zone\r\n    params := zone.NewGetZonesParams()\r\n    params.RequestBody = &models.GetZonesRequestBody{\nWhere: &models.ZoneWhereInput{\nID: pointy.String(\"Zone-id\"),\n},\n}\r\n    rawResp, err := zone_api.GetZones(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ZoneApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ZoneApi zoneApi = new ZoneApi(client);\r\n        GetZonesRequestBody params = new GetZonesRequestBody()\n.where(new ZoneWhereInput()\n.id(\"Zone-id\"));\r\n        List<Zone> resp = zoneApi.getZones(params);\r\n    }\r\n}"
  },
  "/get-zones-connection": {
    "exampleValue": {
      "where": {
        "id": "Zone-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/get-zones-connection \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"Zone-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, ZoneApi\r\nfrom cloudtower.utils import login\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    zone_api = ZoneApi(client)\r\n    resp = zone_api.get_zones_connection({\"where\":{\"id\":\"Zone-id\"}})\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/zone\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        zone_api := client.Zone\r\n    params := zone.NewGetZonesConnectionParams()\r\n    params.RequestBody = &models.GetZonesConnectionRequestBody{\nWhere: &models.ZoneWhereInput{\nID: pointy.String(\"Zone-id\"),\n},\n}\r\n    rawResp, err := zone_api.GetZonesConnection(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.api.ZoneApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        ZoneApi zoneApi = new ZoneApi(client);\r\n        GetZonesConnectionRequestBody params = new GetZonesConnectionRequestBody()\n.where(new ZoneWhereInput()\n.id(\"Zone-id\"));\r\n        ZoneConnection resp = zoneApi.getZonesConnection(params);\r\n    }\r\n}"
  },
  "/create-alert-notifier": {
    "exampleValue": [
      {
        "notice_severities": [
          "CRITICAL"
        ],
        "language_code": "EN_US",
        "email_tos": [
          "-string"
        ],
        "email_from": "email_from-string",
        "disabled": true,
        "smtp_server_id": "ck74rk21wg5lz0786opdnzz5m",
        "name": "name-string",
        "clusters": {
          "id": "Cluster-id"
        }
      }
    ],
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/create-alert-notifier \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '[{\"notice_severities\":[\"CRITICAL\"],\"language_code\":\"EN_US\",\"email_tos\":[\"-string\"],\"email_from\":\"email_from-string\",\"disabled\":true,\"smtp_server_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"clusters\":{\"id\":\"Cluster-id\"}}]'",
    "python": "from cloudtower import ApiClient, Configuration, AlertNotifierApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_notifier_api = AlertNotifierApi(client)\r\n    resp = alert_notifier_api.create_alert_notifier([{\"notice_severities\":[\"CRITICAL\"],\"language_code\":\"EN_US\",\"email_tos\":[\"-string\"],\"email_from\":\"email_from-string\",\"disabled\":True,\"smtp_server_id\":\"ck74rk21wg5lz0786opdnzz5m\",\"name\":\"name-string\",\"clusters\":{\"id\":\"Cluster-id\"}}])\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert_notifier\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_notifier_api := client.AlertNotifier\r\n    params := alert_notifier.NewCreateAlertNotifierParams()\r\n    params.RequestBody = []*models.AlertNotifierCreationParams{\n{\nNoticeSeverities: []string{\"CRITICAL\",\n},\nLanguageCode: models.NotifierLanguageCodeEN_US.Pointer(),\nEmailTos: []string{\"-string\",\n},\nEmailFrom: pointy.String(\"email_from-string\"),\nDisabled: pointy.Bool(true),\nSMTPServerID: pointy.String(\"ck74rk21wg5lz0786opdnzz5m\"),\nName: pointy.String(\"name-string\"),\nClusters: &models.ClusterWhereInput{\nID: pointy.String(\"Cluster-id\"),\n},\n},\n}\r\n    rawResp, err := alert_notifier_api.CreateAlertNotifier(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskAlertNotifier) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.AlertNotifierApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertNotifierApi alertNotifierApi = new AlertNotifierApi(client);\r\n        List<AlertNotifierCreationParams> params = new ArrayList<>();\r\n        params.add(new AlertNotifierCreationParams()\n.addNoticeSeveritiesItem(\"CRITICAL\")\n.languageCode(NotifierLanguageCode.fromValue(\"EN_US\"))\n.addEmailTosItem(\"-string\")\n.emailFrom(\"email_from-string\")\n.disabled(true)\n.smtpServerId(\"ck74rk21wg5lz0786opdnzz5m\")\n.name(\"name-string\")\n.clusters(new ClusterWhereInput()\n.id(\"Cluster-id\")));\r\n        List<WithTaskAlertNotifier> resp = alertNotifierApi.createAlertNotifier(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/update-alert-notifier": {
    "exampleValue": {},
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-alert-notifier \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertNotifierApi\r\nfrom cloudtower.utils import login, wait_task\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_notifier_api = AlertNotifierApi(client)\r\n    resp = alert_notifier_api.update_alert_notifier({})\r\n    wait_task(resp.task_id, client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert_notifier\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_notifier_api := client.AlertNotifier\r\n    params := alert_notifier.NewUpdateAlertNotifierParams()\r\n    params.RequestBody = &models.AlertNotifierUpdationParams{\n}\r\n    rawResp, err := alert_notifier_api.UpdateAlertNotifier(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTask(context.Background(), client, resp.TaskID, 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.AlertNotifierApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertNotifierApi alertNotifierApi = new AlertNotifierApi(client);\r\n        AlertNotifierUpdationParams params = new AlertNotifierUpdationParams();\r\n        WithTaskAlertNotifier resp = alertNotifierApi.updateAlertNotifier(params);\r\n        TaskUtil.WaitTask(resp.getTaskId(), client);\r\n    }\r\n}"
  },
  "/update-many-alert-notifiers": {
    "exampleValue": {
      "where": {
        "id": "AlertNotifier-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/update-many-alert-notifiers \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"AlertNotifier-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertNotifierApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_notifier_api = AlertNotifierApi(client)\r\n    resp = alert_notifier_api.update_many_alert_notifiers({\"where\":{\"id\":\"AlertNotifier-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert_notifier\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_notifier_api := client.AlertNotifier\r\n    params := alert_notifier.NewUpdateManyAlertNotifiersParams()\r\n    params.RequestBody = &models.AlertNotifierManyUpdationParams{\nWhere: &models.AlertNotifierWhereInput{\nID: pointy.String(\"AlertNotifier-id\"),\n},\n}\r\n    rawResp, err := alert_notifier_api.UpdateManyAlertNotifiers(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskAlertNotifier) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.AlertNotifierApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertNotifierApi alertNotifierApi = new AlertNotifierApi(client);\r\n        AlertNotifierManyUpdationParams params = new AlertNotifierManyUpdationParams()\n.where(new AlertNotifierWhereInput()\n.id(\"AlertNotifier-id\"));\r\n        List<WithTaskAlertNotifier> resp = alertNotifierApi.updateManyAlertNotifiers(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  },
  "/delete-alert-notifier": {
    "exampleValue": {
      "where": {
        "id": "AlertNotifier-id"
      }
    },
    "curl": "curl -X POST \\\n\thttp://your_tower_url/v2/api/delete-alert-notifier \\\n\t-H 'Authorization: YOUR_TOKEN' \\\n\t-H 'Content-Language: en-US' \\\n\t-H 'Content-Type: application/json' \\\n\t-d '{\"where\":{\"id\":\"AlertNotifier-id\"}}'",
    "python": "from cloudtower import ApiClient, Configuration, AlertNotifierApi\r\nfrom cloudtower.utils import login, wait_tasks\r\n\r\ndef main():\r\n    username = \"username\"\r\n    password = \"password\"\r\n\r\n    endpoint = \"http://tower.smartx.com/v2/api\"\r\n\r\n    configuration = Configuration(host=endpoint)\r\n    client = ApiClient(configuration=configuration)\r\n    login(client,username,password)\r\n    alert_notifier_api = AlertNotifierApi(client)\r\n    resp = alert_notifier_api.delete_alert_notifier({\"where\":{\"id\":\"AlertNotifier-id\"}})\r\n    wait_tasks([with_task_obj.task_id for with_task_obj in resp], client)\r\n\r\n",
    "go": "package main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"time\"\r\n\r\n    \"github.com/openlyinc/pointy\"\r\n    apiclient \"github.com/smartxworks/cloudtower-go-sdk/v2/client\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/client/alert_notifier\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/models\"\r\n    \"github.com/smartxworks/cloudtower-go-sdk/v2/utils\"\r\n    \"github.com/thoas/go-funk\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := apiclient.NewWithUserConfig(apiclient.ClientConfig{\r\n        Host:     \"tower.smartx.com\",\r\n        BasePath: \"v2/api\",\r\n        Schemes:  []string{\"http\"},\r\n    }, apiclient.UserConfig{\r\n        Name:     \"Name\",\r\n        Password: \"Password\",\r\n        Source:   models.UserSourceLOCAL,\r\n    })\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n        alert_notifier_api := client.AlertNotifier\r\n    params := alert_notifier.NewDeleteAlertNotifierParams()\r\n    params.RequestBody = &models.DeleteAlertNotifierParams{\nWhere: &models.AlertNotifierWhereInput{\nID: pointy.String(\"AlertNotifier-id\"),\n},\n}\r\n    rawResp, err := alert_notifier_api.DeleteAlertNotifier(params)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n    resp := rawResp.Payload\r\n    err = utils.WaitTasks(context.Background(), client, funk.Map(resp, func(withTaskObj *models.WithTaskDeleteAlertNotifier) string {\r\n\t\treturn *withTaskObj.TaskID\r\n\t}).([]string), 1*time.Second)\r\n    if err != nil {\r\n        fmt.Println(err)\r\n        return\r\n    }\r\n}",
    "java": "package com.smartx.com;\r\n\r\nimport com.smartx.tower.ApiClient;\r\nimport com.smartx.tower.ApiException;\r\nimport com.smartx.tower.ClientUtil;\r\nimport com.smartx.tower.TaskUtil;\r\nimport com.smartx.tower.api.AlertNotifierApi;\r\nimport com.smartx.tower.model.*;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws ApiException, IOException {\r\n        ApiClient client = new ApiClient();\r\n        client.setBasePath(\"http://tower.smartx.com/v2/api\");\r\n        ClientUtil.login(\"username\",\"root\", client);\r\n\r\n        AlertNotifierApi alertNotifierApi = new AlertNotifierApi(client);\r\n        DeleteAlertNotifierParams params = new DeleteAlertNotifierParams()\n.where(new AlertNotifierWhereInput()\n.id(\"AlertNotifier-id\"));\r\n        List<WithTaskDeleteAlertNotifier> resp = alertNotifierApi.deleteAlertNotifier(params);\r\n        List<String> taskIds = resp.stream().map(withTaskObj -> withTaskObj.getTaskId()).collect(Collectors.toList());\r\n        TaskUtil.WaitTasks(taskIds, client);\r\n    }\r\n}"
  }
}